"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("core-js/modules/web.dom-collections.iterator.js");
var _react = require("react");
var _ApiProviderContext = _interopRequireDefault(require("../Context/ApiProviderContext"));
var _constants = require("../Utils/constants");
var _generateQueryInitialState = _interopRequireDefault(require("../Utils/generateQueryInitialState"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
const useMultipleQueries = _ref => {
  let {
    queries,
    executeImmediately = false,
    onEnd = () => {},
    clientOptions = {}
  } = _ref;
  //*******************************************
  // States
  //*******************************************
  const {
    apiClient,
    onUnauthorized: defaultOnUnauthorized
  } = (0, _react.useContext)(_ApiProviderContext.default);
  const cancelRequest = (0, _react.useRef)(false);
  const [isLoading, setIsLoading] = (0, _react.useState)(executeImmediately);

  //*******************************************
  // Reducer
  //*******************************************
  const checkIsLoading = state => {
    if (Object.values(state).some(queryState => queryState.status === _constants.status.LOADING)) {
      return true;
    }
    return false;
  };
  const queryReducer = (state, action) => {
    switch (action.status) {
      case _constants.status.LOADING:
        for (const queryName in queries) {
          state[queryName].status = _constants.status.LOADING;
        }
        setIsLoading(true);
        return state;
      case _constants.status.SUCCESS:
        state[action.queryName] = {
          status: _constants.status.SUCCESS,
          response: action.payload,
          error: undefined
        };
        setIsLoading(checkIsLoading(state));
        return state;
      case _constants.status.ERROR:
        state[action.queryName] = {
          status: _constants.status.ERROR,
          response: undefined,
          error: action.payload
        };
        setIsLoading(checkIsLoading(state));
        return state;
      case _constants.actions.RESET:
        return generateInitialState(queries);
      default:
        return state;
    }
  };
  const generateInitialState = () => {
    const output = {};
    for (const queryName in queries) {
      output[queryName] = (0, _generateQueryInitialState.default)(executeImmediately);
    }
    return output;
  };
  const [queriesState, dispatch] = (0, _react.useReducer)(queryReducer, generateInitialState(queries));

  //*******************************************
  // Output generation
  //*******************************************
  const retrieveErrors = () => {
    const output = {};
    for (const [queryName, queryState] of Object.entries(queriesState)) {
      if (queryState.status === _constants.status.ERROR) {
        output[queryName] = queryState.error;
      }
    }
    return output;
  };
  const retrieveResponses = () => {
    const output = {};
    for (const [queryName, queryState] of Object.entries(queriesState)) {
      if (queryState.status === _constants.status.SUCCESS) {
        output[queryName] = queryState.response;
      }
    }
    return output;
  };
  const retrieveStatuses = () => {
    const output = {};
    for (const [queryName, queryState] of Object.entries(queriesState)) {
      output[queryName] = queryState.status;
    }
    return output;
  };

  //*******************************************
  // Query logic
  //*******************************************
  const executeQueries = function executeQueries() {
    let data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    cancelRequest.current = false;
    dispatch({
      status: _constants.status.LOADING
    });
    for (const [queryName, queryOptions] of Object.entries(queries)) {
      apiClient(_objectSpread({
        url: queryOptions.url,
        method: queryOptions.method || "GET",
        data: queryName in data ? data[queryName] : queryOptions.data
      }, clientOptions)).then(response => {
        if (cancelRequest.current) return;
        dispatch({
          queryName: queryName,
          status: _constants.status.SUCCESS,
          payload: response
        });
        if ("onSuccess" in queryOptions) {
          queryOptions.onSuccess(response);
        }
      }).catch(error => {
        if (cancelRequest.current) return;
        dispatch({
          queryName: queryName,
          status: _constants.status.ERROR,
          payload: error
        });
        const onUnauthorizedFunction = queryOptions.onUnauthorized !== undefined ? queryOptions.onUnauthorized : defaultOnUnauthorized;
        if (error.response && error.response.status === 401 && onUnauthorizedFunction) {
          onUnauthorizedFunction(error);
        } else if (queryOptions.onError) {
          queryOptions.onError(error);
        }
      });
    }
  };
  const resetQueries = () => {
    dispatch({
      status: _constants.actions.RESET
    });
  };
  (0, _react.useEffect)(() => {
    if (executeImmediately) executeQueries();
    return () => {
      cancelRequest.current = true;
    };
  }, []);
  (0, _react.useEffect)(() => {
    if (Object.values(queriesState).some(queryState => queryState.status !== _constants.status.SUCCESS && queryState.status !== _constants.status.ERROR)) {
      return;
    }
    onEnd(queriesState);
  }, [isLoading]);
  return {
    executeQueries,
    resetQueries,
    errors: retrieveErrors(),
    responses: retrieveResponses(),
    statuses: retrieveStatuses(),
    isLoading: isLoading,
    queries: queriesState
  };
};
var _default = useMultipleQueries;
exports.default = _default;