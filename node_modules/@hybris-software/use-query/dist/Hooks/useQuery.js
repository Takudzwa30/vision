"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("core-js/modules/web.dom-collections.iterator.js");
var _react = require("react");
var _ApiProviderContext = _interopRequireDefault(require("../Context/ApiProviderContext"));
var _constants = require("../Utils/constants");
var _generateQueryInitialState = _interopRequireDefault(require("../Utils/generateQueryInitialState"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
const useQuery = _ref => {
  let {
    url,
    method = "GET",
    executeImmediately = false,
    onSuccess = () => {},
    onError = () => {},
    onUnauthorized = undefined,
    clientOptions = {}
  } = _ref;
  //*******************************************
  // States
  //*******************************************
  const {
    apiClient,
    onUnauthorized: defaultOnUnauthorized
  } = (0, _react.useContext)(_ApiProviderContext.default);
  const cancelRequest = (0, _react.useRef)(false);

  //*******************************************
  // Reducer
  //*******************************************
  const queryReducer = (state, action) => {
    switch (action.status) {
      case _constants.status.LOADING:
        return _objectSpread(_objectSpread({}, (0, _generateQueryInitialState.default)(executeImmediately)), {}, {
          status: _constants.status.LOADING
        });
      case _constants.status.SUCCESS:
        return _objectSpread(_objectSpread({}, (0, _generateQueryInitialState.default)(executeImmediately)), {}, {
          status: _constants.status.SUCCESS,
          response: action.payload
        });
      case _constants.status.ERROR:
        return _objectSpread(_objectSpread({}, (0, _generateQueryInitialState.default)(executeImmediately)), {}, {
          status: _constants.status.ERROR,
          error: action.payload
        });
      case _constants.actions.RESET:
        return (0, _generateQueryInitialState.default)(executeImmediately);
      default:
        return state;
    }
  };
  const [state, dispatch] = (0, _react.useReducer)(queryReducer, (0, _generateQueryInitialState.default)(executeImmediately));

  //*******************************************
  // Query logic
  //*******************************************
  const executeQuery = function executeQuery() {
    let data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    cancelRequest.current = false;
    dispatch({
      status: _constants.status.LOADING
    });
    apiClient(_objectSpread({
      url: url,
      method: method,
      data: data,
      params: params
    }, clientOptions)).then(response => {
      if (cancelRequest.current) return;
      dispatch({
        status: _constants.status.SUCCESS,
        payload: response
      });
      try {
        onSuccess(response);
      } catch (e) {
        console.error(e);
      }
    }).catch(error => {
      if (cancelRequest.current) return;
      dispatch({
        status: _constants.status.ERROR,
        payload: error
      });
      const onUnauthorizedFunction = onUnauthorized !== undefined ? onUnauthorized : defaultOnUnauthorized;
      if (error.response && error.response.status === 401 && onUnauthorizedFunction) {
        onUnauthorizedFunction(error);
      } else {
        onError(error);
      }
    });
  };
  const resetQuery = () => {
    dispatch({
      status: _constants.actions.RESET
    });
  };
  (0, _react.useEffect)(() => {
    if (executeImmediately) executeQuery();
    return () => {
      cancelRequest.current = true;
    };
  }, [url]);
  return {
    isLoading: state.status === _constants.status.LOADING,
    isError: state.status === _constants.status.ERROR,
    isSuccess: state.status === _constants.status.SUCCESS,
    response: state.response,
    error: state.error,
    executeQuery: executeQuery,
    resetQuery: resetQuery
  };
};
var _default = useQuery;
exports.default = _default;