"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StripedTable = exports.CommonStyles = void 0;
exports.createUrl = createUrl;
exports.sortType = void 0;
exports.updateObjectState = updateObjectState;
require("core-js/modules/es.regexp.exec.js");
require("core-js/modules/es.string.search.js");
require("core-js/modules/es.object.from-entries.js");
require("core-js/modules/web.dom-collections.iterator.js");
require("core-js/modules/web.url-search-params.js");
require("core-js/modules/es.symbol.description.js");
var _styledComponents = _interopRequireDefault(require("styled-components"));
var _templateObject, _templateObject2;
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function createUrl(tableSettings, extraFilters) {
  let parametersObject = _objectSpread(_objectSpread({}, {
    page: tableSettings === null || tableSettings === void 0 ? void 0 : tableSettings.pagination.page,
    limit: tableSettings === null || tableSettings === void 0 ? void 0 : tableSettings.pagination.pageSize
  }), extraFilters);
  if (tableSettings !== null && tableSettings !== void 0 && tableSettings.sortingSettings) {
    parametersObject = _objectSpread(_objectSpread({}, parametersObject), {}, {
      ordering: tableSettings === null || tableSettings === void 0 ? void 0 : tableSettings.sortingSettings
    });
  }
  if (tableSettings !== null && tableSettings !== void 0 && tableSettings.search.field.searchField && tableSettings !== null && tableSettings !== void 0 && tableSettings.search.value) {
    parametersObject = _objectSpread(_objectSpread({}, parametersObject), {}, {
      [(tableSettings === null || tableSettings === void 0 ? void 0 : tableSettings.search.field.searchField) + "__icontains"]: tableSettings === null || tableSettings === void 0 ? void 0 : tableSettings.search.value
    });
  }
  parametersObject = Object.fromEntries(Object.entries(parametersObject).filter(_ref => {
    let [_, v] = _ref;
    return v != null;
  }));
  const url = tableSettings.endPoint + "?" + new URLSearchParams(parametersObject);
  return url;
}
function updateObjectState(key, nestedKey, value, setObjectState) {
  setObjectState(prev => {
    const newObj = _objectSpread({}, prev);
    if (nestedKey) {
      newObj[key][nestedKey] = value;
    } else {
      newObj[key] = value;
    }
    return newObj;
  });
}
const CommonStyles = _styledComponents.default.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  padding: 1rem;\n  box-shadow: rgba(0, 0, 0, 0.09) 0px 3px 12px;\n  border-radius: 5px;\n  \n  table {\n    width: 100%;\n    border-spacing: 0;\n\n    thead {\n      tr {\n        color: #757575;\n        font-weight: 600;\n        font-size: 14px;\n        \n        th {\n          min-width: 200px;\n          max-width: 800px;\n          text-align: center;\n          padding: 0 30px;\n          border-left: 1px solid #f3f3f3;\n          :first-child {\n            min-width: 60px;\n          }\n          :last-child {\n            border-right: 1px solid #f3f3f3;\n          }\n        }\n      }\n    }\n\n    tbody {\n      tr {\n        height: 65px;\n        font-weight: 500;\n        font-size: 14px;\n        color: #757575;\n        td {\n          min-width: 200px;\n          max-width: 800px;\n          text-align: center;\n          border-top: 1px solid #f3f3f3;\n          padding: 0 30px;\n          border-left: 1px solid #f3f3f3;\n          :first-child {\n            min-width: 60px;\n          }\n          :last-child {\n            border-right: 1px solid #f3f3f3;\n          }\n        }\n      }\n    }\n  }\n"])));
exports.CommonStyles = CommonStyles;
const StripedTable = _styledComponents.default.div(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  padding: 1rem;\n  box-shadow: rgba(0, 0, 0, 0.09) 0px 3px 12px;\n  border-radius: 5px;\n  \n  table {\n    width: 100%;\n    border-spacing: 0;\n\n    thead {\n      tr {\n        color: #757575;\n        font-weight: 600;\n        font-size: 14px;\n        \n        th {\n          min-width: 200px;\n          max-width: 800px;\n          text-align: center;\n          padding: 0 30px;\n          border-left: 1px solid #f3f3f3;\n          :first-child {\n            min-width: 60px;\n          }\n          :last-child {\n            border-right: 1px solid #f3f3f3;\n          }\n        }\n      }\n    }\n\n    tbody {\n      tr {\n        height: 65px;\n        font-weight: 500;\n        font-size: 14px;\n        color: #757575;\n        &:nth-child(odd) {\n          background-color: #bfcae41f;\n        }\n        td {\n          min-width: 200px;\n          max-width: 800px;\n          text-align: center;\n          border-top: 1px solid #f3f3f3;\n          padding: 0 30px;\n          border-left: 1px solid #f3f3f3;\n          :first-child {\n            min-width: 60px;\n          }\n          :last-child {\n            border-right: 1px solid #f3f3f3;\n          }\n        }\n      }\n    }\n  }\n"])));
exports.StripedTable = StripedTable;
const sortType = {
  UP: "asc",
  DOWN: "desc"
};
exports.sortType = sortType;