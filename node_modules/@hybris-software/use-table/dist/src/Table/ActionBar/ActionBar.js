"use strict";

require("core-js/modules/es.symbol.description.js");
require("core-js/modules/es.weak-map.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("core-js/modules/web.dom-collections.iterator.js");
require("core-js/modules/es.regexp.exec.js");
require("core-js/modules/es.string.search.js");
var _react = _interopRequireWildcard(require("react"));
var _ConditionalComponent = _interopRequireDefault(require("../ConditionalComponent/ConditionalComponent"));
var _uiKit = require("@hybris-software/ui-kit");
var _ActionBarModule = _interopRequireDefault(require("./ActionBar.module.css"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } //Components
//Libraries
// Styles
function ActionBar(_ref) {
  let {
    tableRef,
    tableSettings,
    setTableSettings,
    texts,
    enableAllowedActions,
    allowedActions,
    enableSearch,
    enableSearchFieldSelect,
    computedColumns,
    updateObjectState,
    inputSearchBaseClassName = _ActionBarModule.default.inputSearchBaseClass,
    searchBarClassName = _ActionBarModule.default.searchBarClass
  } = _ref;
  const [selectedAction, setSelectedAction] = (0, _react.useState)("");
  const [searchValue, setSearchValue] = (0, _react.useState)("");
  const [currentSearch, setCurrentSearch] = (0, _react.useState)({
    value: tableSettings.search.value,
    field: tableSettings.search.field
  });
  (0, _react.useEffect)(() => {
    clearTimeout(timeoutId.current);
    timeoutId.current = setTimeout(() => {
      if (tableRef.current) {
        updateObjectState("value", null, searchValue, setCurrentSearch);
      }
    }, 1000);
  }, [searchValue]);
  (0, _react.useEffect)(() => {
    if (currentSearch.value && currentSearch.field) {
      setTableSettings(prev => {
        return _objectSpread(_objectSpread({}, prev), {}, {
          search: {
            field: currentSearch.field,
            value: currentSearch.value
          },
          pagination: {
            page: 1,
            pageSize: prev.pagination.pageSize
          }
        });
      });
    } else if (currentSearch.field) {
      setTableSettings(prev => {
        var _prev$search;
        if (prev !== null && prev !== void 0 && (_prev$search = prev.search) !== null && _prev$search !== void 0 && _prev$search.value) {
          return _objectSpread(_objectSpread({}, prev), {}, {
            search: {
              field: currentSearch.field,
              value: ""
            }
          });
        } else {
          return prev;
        }
      });
    }
  }, [currentSearch]);
  (0, _react.useEffect)(() => {
    setSearchValue(tableSettings.search.value);
  }, [tableSettings.search.value]);

  // For debounce mechanisms
  const timeoutId = (0, _react.useRef)(null);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: _ActionBarModule.default.filterRow
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: _ActionBarModule.default.leftSideFilter
  }, /*#__PURE__*/_react.default.createElement(_ConditionalComponent.default, {
    condition: enableAllowedActions
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: _ActionBarModule.default.actions
  }, /*#__PURE__*/_react.default.createElement(_uiKit.Select, {
    placeholder: texts.actionSelect,
    items: allowedActions,
    setValue: value => {
      setSelectedAction(value);
    },
    value: selectedAction
  }), /*#__PURE__*/_react.default.createElement(_uiKit.Button, {
    disabled: tableSettings.selectedData.length <= 0 || !selectedAction,
    onClick: () => selectedAction.action()
  }, texts.buttonAction)))), /*#__PURE__*/_react.default.createElement("div", {
    className: _ActionBarModule.default.rightSideFilter
  }, /*#__PURE__*/_react.default.createElement(_ConditionalComponent.default, {
    condition: enableSearchFieldSelect
  }, /*#__PURE__*/_react.default.createElement(_uiKit.Select, {
    items: computedColumns.filter(item => item.searchable !== false),
    placeholder: texts.columnsSelect,
    labelKey: "Header",
    value: currentSearch.field,
    setValue: value => {
      updateObjectState("field", null, value, setCurrentSearch);
    }
  })), /*#__PURE__*/_react.default.createElement(_ConditionalComponent.default, {
    condition: enableSearch
  }, /*#__PURE__*/_react.default.createElement(_uiKit.InputField, {
    baseClassName: inputSearchBaseClassName,
    showError: false,
    placeholder: texts.placeholderSearch,
    className: searchBarClassName,
    value: searchValue,
    onChange: e => {
      setSearchValue(e.target.value);
    }
  }))));
}
var _default = ActionBar;
exports.default = _default;