"use strict";

require("core-js/modules/es.symbol.description.js");
require("core-js/modules/es.object.assign.js");
require("core-js/modules/es.weak-map.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("core-js/modules/web.dom-collections.iterator.js");
require("core-js/modules/es.array.includes.js");
require("core-js/modules/es.string.includes.js");
require("core-js/modules/es.regexp.exec.js");
require("core-js/modules/es.string.search.js");
require("core-js/modules/es.regexp.to-string.js");
require("core-js/modules/es.string.replace.js");
require("core-js/modules/es.array.sort.js");
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _HeaderActionList = _interopRequireDefault(require("./HeaderActionList/HeaderActionList"));
var _ConditionalComponent = _interopRequireDefault(require("./ConditionalComponent/ConditionalComponent"));
var _PaginationBar = _interopRequireDefault(require("./PaginationBar/PaginationBar"));
var _reactTable = require("react-table");
var _tableAddons = require("./tableAddons");
var _im = require("react-icons/im");
var _gr = require("react-icons/gr");
var _hi = require("react-icons/hi");
var _ai = require("react-icons/ai");
var _TableClientModule = _interopRequireDefault(require("./TableClient.module.css"));
var _ActionBar = _interopRequireDefault(require("./ActionBar/ActionBar"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } //Components
// Libraries
//Addons
//Icon
// Styles
/**
 * @param {Object} props
 * @param {Array} props.pageSizes - Array of numbers that will be used as options for the page size select
 * @param {Array} props.columns - Array of objects that will be used as columns for the table
 * @param {Number} props.headerHeight - Height of the header
 * @param {Number} props.rowHeight - Height of the rows
 * @param {Number} props.height - Height of the table
 * @param {Object} props.Styles - Object with custom styles
 * @param {String} props.emptyDataMessageComponent - Component to show Message when there is no data
 * @param {Object} props.extraFilters - Object with extra filters to add to the query
 * @param {Number} props.defaultPageSize - Default page size
 * @param {Boolean} props.enablePageSizeSelect - Enable page size select
 * @param {Boolean} props.dragWithMouse - Enable drag with mouse
 * @param {Boolean} props.enableSearch - Enable search
 * @param {Boolean} props.enableSearchFieldSelect - Enable search field select
 * @param {String} props.defaultSearchField - Default search field
 * @param {String} props.inputSearchBaseClassName - Base class name for the search input
 * @param {Boolean} props.enableSelectableRows - Enable selectable rows
 * @param {String} props.selectabledRowsClassName - Class name for the selectable rows
 * @param {Boolean} props.enableAllowedActions - Enable allowed actions
 * @param {Array} props.allowedActions - Array of objects with the allowed actions
 * @param {String} props.searchBarClassName - Class name for the search bar
 * @param {String} props.toPageInputClassName - Class name for the to page input
 * @param {String} props.toPageInputBaseClassName - Base class name for the to page input
 * @param {String} props.paginationButtonClassName - Class name for the pagination buttons
 * @param {String} props.paginationButtonBaseClassName - Base class name for the pagination buttons
 */

const TableClientComponent = (_ref, ref) => {
  var _dataLists$inPageData;
  let {
    pageSizes = [5, 10, 25, 50, 100],
    columns,
    rawData = [],
    headerHeight = 50,
    rowHeight = 65,
    height,
    Styles,
    emptyDataMessageComponent = /*#__PURE__*/_react.default.createElement(EmptyDataMessageComponent, null),
    emptyDataClassName = _TableClientModule.default.noResults,
    extraFilters = {},
    defaultPageSize = 5,
    enablePageSizeSelect = true,
    dragWithMouse = true,
    enableSearch = true,
    enableSearchFieldSelect = true,
    defaultSearchField = "",
    inputSearchBaseClassName = _TableClientModule.default.inputSearchBaseClass,
    enableSelectableRows = true,
    selectabledRowsClassName = _TableClientModule.default.selectableRowsClass,
    enableAllowedActions = false,
    allowedActions,
    settingClassName = _TableClientModule.default.tooltopOptions,
    settingClassNameOpened = _TableClientModule.default.tooltopOptionsOpened,
    settingClassNameList = _TableClientModule.default.scrollableList,
    settingClassNameListOpened = _TableClientModule.default.scrollableListOpened,
    searchBarClassName,
    toPageInputClassName,
    toPageInputBaseClassName,
    paginationButtonClassName,
    paginationClassName,
    checkboxClassName = _TableClientModule.default.labelClass,
    sortingClassName = _TableClientModule.default.sortingClass,
    settingsIcon = /*#__PURE__*/_react.default.createElement(_im.ImWrench, null),
    copyToClipboardIcon = /*#__PURE__*/_react.default.createElement(_ai.AiOutlineCopy, null),
    tooltipClassName = _TableClientModule.default.tooltip,
    enableStripedTable = false,
    enableSettings = true,
    settingsClassName = _TableClientModule.default.select,
    enableRowsSelectedBadge = true,
    rowsSelectedBadgeClassName = _TableClientModule.default.rowsSelected,
    enableSearchBadges = true,
    searchBadgesClassName = _TableClientModule.default.rowsSelected,
    texts = {
      actionSelect: "Select an action",
      buttonAction: "Apply",
      columnsSelect: "Select a column",
      placeholderSearch: "Search...",
      settingTitle: "Hide columns",
      rowsSelected: "row(s) selected",
      columnByAsc: "Sort by ASC",
      columnByDesc: "Sort by DESC",
      hideColumn: "Hide this column",
      showColumns: "Show all columns",
      pageLabel: "Page",
      ofPageLabel: "of",
      buttonPrevious: "Previous",
      buttonNext: "Next",
      copyToClipboard: "Copy to clipboard",
      copied: "Copied"
    },
    activeSortIconClassName,
    disableSortIconClassName,
    sortingUpIcon,
    sortingDownIcon,
    conditionToHideSelectRow = () => {},
    onSearch = () => {},
    onSearchFieldChange = () => {},
    onPageChange = () => {},
    onPageSizeChange = () => {},
    onSelectionChange = () => {},
    onSortChange = () => {}
  } = _ref;
  // Constants
  const initialSettings = {
    pagination: {
      page: 1,
      pageSize: defaultPageSize
    },
    sortingSettings: "",
    search: {
      field: defaultSearchField,
      value: ""
    },
    selectedData: []
  };

  // Refs
  const defaultRef = (0, _react.useRef)(null);
  const tableRef = ref || defaultRef;

  // States
  const [tableSettings, setTableSettings] = (0, _react.useState)(initialSettings);
  const [showDropdown, setShowDropdown] = (0, _react.useState)(false);
  const [hiddenColumns, setHiddenColumns] = (0, _react.useState)([]);
  const [dataLists, setDataLists] = (0, _react.useState)({});
  const [notSelectableRow, setNotSelectableRow] = (0, _react.useState)([]);

  // Draggable
  const [isDown, setIsDown] = (0, _react.useState)(false);
  const [startX, setStartX] = (0, _react.useState)(0);
  const [scrollLeft, setScrollLeft] = (0, _react.useState)(0);

  // To select all
  const [selectAllRows, setSelectAllRows] = (0, _react.useState)(false);
  const selectColumn = (0, _react.useMemo)(() => ({
    Header: " ",
    field: "select",
    searchable: false,
    sortable: false,
    noAction: true,
    accessor: row => {
      const condition = conditionToHideSelectRow(row);
      if (condition && !notSelectableRow.map(item => item.id).includes(row.id)) setNotSelectableRow(prev => [...prev, row]);
      return /*#__PURE__*/_react.default.createElement("div", {
        className: _TableClientModule.default.checkboxContainer
      }, /*#__PURE__*/_react.default.createElement("input", {
        id: "clientTable" + row.id,
        disabled: condition ? condition : false,
        className: _TableClientModule.default.simpleCheckbox,
        type: "checkbox",
        checked: tableSettings.selectedData.find(item => item.id === row.id) !== undefined,
        onChange: e => {
          let tempList = [...tableSettings.selectedData];
          if (e.target.checked) {
            // tempList.push(row);
            tempList = [...tempList, row];
          } else {
            tempList = tempList.filter(item => item.id !== row.id);
          }
          tableRef.current.setSelectedData(tempList);
        }
      }), /*#__PURE__*/_react.default.createElement("label", {
        htmlFor: "clientTable" + row.id,
        className: checkboxClassName
      }, /*#__PURE__*/_react.default.createElement(_hi.HiCheck, null)));
    }
  }),
  // eslint-disable-next-line
  [tableSettings, tableRef]);
  const ComputedUpSortIcon = sortingUpIcon ? sortingUpIcon : IconUpComponent;
  const ComputedDownSortIcon = sortingDownIcon ? sortingDownIcon : IconDownComponent;
  const computedSortingClassName = sortingClassName ? sortingClassName : _TableClientModule.default.sortingClassName;
  const computedDisableSortIconClassName = disableSortIconClassName ? disableSortIconClassName : _TableClientModule.default.sortingIconDisabled;
  const computedActiveSortIconClassName = activeSortIconClassName ? activeSortIconClassName : _TableClientModule.default.sortingIconActive;
  const computedColumns = (0, _react.useMemo)(() => {
    return [...(enableSelectableRows ? [selectColumn] : []), ...columns.filter(item => !hiddenColumns.includes(item.field)).map(column => _objectSpread(_objectSpread({}, column), {}, {
      searchField: column.field
    }))];
  }, [columns, selectColumn, enableSelectableRows, hiddenColumns]);

  //Customized settings
  const ComputedStyles = Styles ? Styles : enableStripedTable ? _tableAddons.StripedTable : _tableAddons.CommonStyles;
  const tableContext = (0, _react.useMemo)(() => ({
    tableSettings: tableSettings,
    extraFilters: extraFilters,
    data: dataLists === null || dataLists === void 0 ? void 0 : dataLists.inPageData
  }), [tableSettings, extraFilters, dataLists]);
  const {
    getTableProps,
    getTableBodyProps,
    headerGroups,
    rows,
    prepareRow
  } = (0, _reactTable.useTable)({
    columns: computedColumns,
    data: (dataLists === null || dataLists === void 0 ? void 0 : dataLists.inPageData) || []
  });
  (0, _react.useImperativeHandle)(tableRef, () => {
    return {
      getData() {
        return tableContext;
      },
      nextPage() {
        const value = +tableSettings.pagination.page + 1;
        (0, _tableAddons.updateObjectState)("pagination", "page", value, setTableSettings);
      },
      previousPage() {
        const value = tableSettings.pagination.page - 1;
        (0, _tableAddons.updateObjectState)("pagination", "page", value, setTableSettings);
      },
      toPage(page) {
        (0, _tableAddons.updateObjectState)("pagination", "page", page, setTableSettings);
      },
      setPageSize(pageSize) {
        (0, _tableAddons.updateObjectState)("pagination", "pageSize", pageSize, setTableSettings);
        (0, _tableAddons.updateObjectState)("pagination", "page", 1, setTableSettings);
        onPageSizeChange(tableContext);
      },
      setSearchValue(value) {
        (0, _tableAddons.updateObjectState)("search", "value", value, setTableSettings);
        (0, _tableAddons.updateObjectState)("pagination", "page", 1, setTableSettings);
      },
      setSearchField(value) {
        (0, _tableAddons.updateObjectState)("search", "field", value, setTableSettings);
        (0, _tableAddons.updateObjectState)("pagination", "page", 1, setTableSettings);
      },
      setSortingSettings(value) {
        (0, _tableAddons.updateObjectState)("sortingSettings", null, value, setTableSettings);
      },
      setSelectedData(value) {
        (0, _tableAddons.updateObjectState)("selectedData", null, value, setTableSettings);
      }
    };
  }, [tableSettings, tableContext]);
  const sortHandler = column => {
    const columnName = column.field;
    const computedSorting = tableSettings.sortingSettings.includes("-") ? columnName : "-" + columnName;
    tableRef.current.setSortingSettings(computedSorting);
  };
  (0, _react.useEffect)(() => {
    onSelectionChange(tableContext);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [tableSettings.selectedData]);
  (0, _react.useEffect)(() => {
    onPageChange(tableContext);
  }, [tableSettings.pagination.page]);
  (0, _react.useEffect)(() => {
    onPageSizeChange(tableContext);
  }, [tableSettings.pagination.pageSize]);
  (0, _react.useEffect)(() => {
    onSortChange(tableContext);
  }, [tableSettings.sortingSettings]);
  (0, _react.useEffect)(() => {
    onSearchFieldChange(tableContext);
  }, [tableSettings.search.field]);
  (0, _react.useEffect)(() => {
    onSearch(tableContext);
  }, [tableSettings.search.value]);
  (0, _react.useEffect)(() => {
    let tempData = rawData;

    //Search
    if (tableSettings.search.field && tableSettings.search.value) {
      tempData = tempData.filter(item => item[tableSettings.search.field.field] && item[tableSettings.search.field.field].toString().toLowerCase().includes(tableSettings.search.value.toLowerCase()));
    }

    //Sorting
    if (tableSettings.sortingSettings) {
      tempData = sortingInClientTable(tempData);
    }

    //Pagination
    const start = (tableSettings.pagination.page - 1) * tableSettings.pagination.pageSize;
    const end = start + tableSettings.pagination.pageSize;
    if (tempData.slice(start, end) && tempData.slice(start, end).map(value => value.id).filter(item => !notSelectableRow.map(value => value.id).includes(item)).every(item => tableSettings.selectedData.map(value => value.id).includes(item)) && !tempData.slice(start, end).map(value => value.id).every(tempItem => notSelectableRow.map(value => value.id).includes(tempItem))) {
      setSelectAllRows(true);
    } else {
      setSelectAllRows(false);
    }

    //Set the final data for table
    (0, _tableAddons.updateObjectState)("filteredData", null, tempData, setDataLists);
    (0, _tableAddons.updateObjectState)("inPageData", null, tempData.slice(start, end), setDataLists);
  }, [tableSettings]);
  function sortingInClientTable(data) {
    const field = tableSettings.sortingSettings.replace("-", "");
    if (data[0] && typeof data[0][field] === "number") {
      tableSettings.sortingSettings.includes("-") ? data = data.sort((a, b) => b[field] - a[field]) : data = data.sort((a, b) => a[field] - b[field]);
    } else if (data[0] && typeof data[0][field] === "string") {
      tableSettings.sortingSettings.includes("-") ? data = data.sort((a, b) => b[field].localeCompare(a[field])) : data = data.sort((a, b) => a[field].localeCompare(b[field]));
    }
    return data;
  }
  function copyToClipboard(str) {
    const el = document.createElement("textarea");
    el.value = str;
    el.setAttribute("readonly", "");
    el.style.position = "absolute";
    el.style.left = "-9999px";
    document.body.appendChild(el);
    const selected = document.getSelection().rangeCount > 0 ? document.getSelection().getRangeAt(0) : false;
    el.select();
    document.execCommand("copy");
    document.body.removeChild(el);
    if (selected) {
      document.getSelection().removeAllRanges();
      document.getSelection().addRange(selected);
    }
  }
  return /*#__PURE__*/_react.default.createElement(ComputedStyles, null, /*#__PURE__*/_react.default.createElement("div", {
    className: _TableClientModule.default.tableContainer
  }, /*#__PURE__*/_react.default.createElement("div", {
    style: {
      position: "relative"
    }
  }, /*#__PURE__*/_react.default.createElement(_ActionBar.default, {
    tableRef: tableRef,
    tableSettings: tableSettings,
    setTableSettings: setTableSettings,
    texts: texts,
    enableAllowedActions: enableAllowedActions,
    allowedActions: allowedActions,
    enableSearch: enableSearch,
    enableSearchFieldSelect: enableSearchFieldSelect,
    computedColumns: computedColumns,
    updateObjectState: _tableAddons.updateObjectState,
    inputSearchBaseClassName: inputSearchBaseClassName,
    searchBarClassName: searchBarClassName
  }), /*#__PURE__*/_react.default.createElement(_ConditionalComponent.default, {
    condition: enableSettings || enableRowsSelectedBadge || enableSearchBadges
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: _TableClientModule.default.selectContainer
  }, /*#__PURE__*/_react.default.createElement(_ConditionalComponent.default, {
    condition: enableSettings
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: _TableClientModule.default.select,
    onMouseLeave: () => setShowDropdown(false)
  }, /*#__PURE__*/_react.default.createElement("span", {
    className: _TableClientModule.default.iconContainer,
    onClick: () => setShowDropdown(!showDropdown)
  }, settingsIcon), /*#__PURE__*/_react.default.createElement("div", {
    className: !showDropdown ? settingClassName : settingClassNameOpened,
    style: showDropdown ? {
      transition: "all 0.3s ease 0s"
    } : {
      transition: "all 0.3s ease 0s"
    }
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: _TableClientModule.default.options
  }, /*#__PURE__*/_react.default.createElement("h4", {
    className: _TableClientModule.default.heading
  }, texts.settingTitle), /*#__PURE__*/_react.default.createElement("div", {
    className: showDropdown ? settingClassNameListOpened : settingClassNameList,
    style: showDropdown ? {
      transition: "all 0.3s ease"
    } : {
      transition: "all 0.3s ease"
    }
  }, columns.map((item, index) => /*#__PURE__*/_react.default.createElement("div", {
    key: index,
    className: _TableClientModule.default.singleOption
  }, /*#__PURE__*/_react.default.createElement("label", {
    className: _TableClientModule.default.checkboxInput
  }, /*#__PURE__*/_react.default.createElement("input", {
    type: "checkbox",
    checked: hiddenColumns.includes(item.field),
    onChange: e => {
      hiddenColumns.includes(item.field) ? setHiddenColumns(oldState => oldState.filter(field => field !== item.field)) : setHiddenColumns(oldState => [...oldState, item.field]);
    }
  }), /*#__PURE__*/_react.default.createElement("i", null)), /*#__PURE__*/_react.default.createElement("div", {
    className: _TableClientModule.default.optionText
  }, item.Header)))))))), /*#__PURE__*/_react.default.createElement(_ConditionalComponent.default, {
    condition: tableSettings.selectedData.length > 0 && enableRowsSelectedBadge
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: _TableClientModule.default.rowsSelected
  }, tableSettings.selectedData.length, " ", texts.rowsSelected, /*#__PURE__*/_react.default.createElement(_gr.GrFormClose, {
    onClick: () => {
      tableRef.current.setSelectedData([]);
    }
  }))), /*#__PURE__*/_react.default.createElement(_ConditionalComponent.default, {
    condition: tableSettings.search.field && tableSettings.search.value && enableSearchBadges
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: _TableClientModule.default.rowsSelected
  }, tableSettings.search.field.Header, ":", " ", tableSettings.search.value, /*#__PURE__*/_react.default.createElement(_gr.GrFormClose, {
    onClick: () => {
      var _tableRef$current, _tableRef$current2;
      tableRef === null || tableRef === void 0 ? void 0 : (_tableRef$current = tableRef.current) === null || _tableRef$current === void 0 ? void 0 : _tableRef$current.setSearchField(defaultSearchField);
      tableRef === null || tableRef === void 0 ? void 0 : (_tableRef$current2 = tableRef.current) === null || _tableRef$current2 === void 0 ? void 0 : _tableRef$current2.setSearchValue("");
    }
  }))))), /*#__PURE__*/_react.default.createElement("div", {
    style: !height ? {
      minHeight: "".concat(rowHeight * tableSettings.pagination.pageSize + headerHeight, "px")
    } : {
      minHeight: "".concat(height, "px")
    },
    className: _TableClientModule.default.tableContent,
    onMouseDown: e => {
      if (dragWithMouse) {
        setIsDown(true);
        e.currentTarget.classList.add(_TableClientModule.default.active);
        setStartX(e.pageX - e.currentTarget.offsetLeft);
        setScrollLeft(e.currentTarget.scrollLeft);
      }
    },
    onMouseLeave: e => {
      if (dragWithMouse) {
        setIsDown(false);
        e.currentTarget.classList.remove(_TableClientModule.default.active);
      }
    },
    onMouseUp: e => {
      if (dragWithMouse) {
        setIsDown(false);
        e.currentTarget.classList.remove(_TableClientModule.default.active);
      }
    },
    onMouseMove: e => {
      if (dragWithMouse) {
        if (!isDown) return;
        const x = e.pageX - e.currentTarget.offsetLeft;
        const walk = (x - startX) * 1;
        e.currentTarget.scrollLeft = scrollLeft - walk;
      }
    }
  }, (dataLists === null || dataLists === void 0 ? void 0 : (_dataLists$inPageData = dataLists.inPageData) === null || _dataLists$inPageData === void 0 ? void 0 : _dataLists$inPageData.length) > 0 ? /*#__PURE__*/_react.default.createElement("table", getTableProps(), /*#__PURE__*/_react.default.createElement("thead", null, headerGroups.map(headerGroup => {
    return /*#__PURE__*/_react.default.createElement("tr", _extends({}, headerGroup.getHeaderGroupProps(), {
      style: {
        height: "".concat(headerHeight, "px")
      }
    }), headerGroup.headers.map(column => {
      var _tableSettings$sortin, _tableSettings$sortin2;
      return /*#__PURE__*/_react.default.createElement("th", _extends({}, column.getHeaderProps(), {
        style: {
          position: "relative"
        }
      }), !(column !== null && column !== void 0 && column.noAction) && /*#__PURE__*/_react.default.createElement(_HeaderActionList.default, {
        texts: texts,
        column: column,
        tableRef: tableRef,
        setHiddenColumns: setHiddenColumns
      }), /*#__PURE__*/_react.default.createElement("div", {
        className: _TableClientModule.default.headerSection
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: _TableClientModule.default.clampedText
      }, column.render("Header"), /*#__PURE__*/_react.default.createElement(_ConditionalComponent.default, {
        condition: column.field === "select"
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: _TableClientModule.default.checkboxContainer
      }, /*#__PURE__*/_react.default.createElement("input", {
        id: "allSelectInClientTable",
        type: "checkbox",
        className: _TableClientModule.default.simpleCheckbox,
        checked: selectAllRows,
        onChange: e => {
          const temp = [...tableSettings.selectedData, ...(dataLists === null || dataLists === void 0 ? void 0 : dataLists.inPageData.filter(item => !tableSettings.selectedData.map(value => value.id).includes(item.id) && !notSelectableRow.map(value => value.id).includes(item.id)))];
          if (e.target.checked) {
            setSelectAllRows(true);
            tableRef.current.setSelectedData(temp);
          } else {
            const temp = tableSettings.selectedData.filter(item => !(dataLists !== null && dataLists !== void 0 && dataLists.inPageData.map(value => value.id).includes(item.id)) && !notSelectableRow.map(value => value.id).includes(item.id));
            setSelectAllRows(false);
            tableRef.current.setSelectedData(temp);
          }
        }
      }), /*#__PURE__*/_react.default.createElement("label", {
        htmlFor: "allSelectInClientTable",
        className: checkboxClassName
      }, /*#__PURE__*/_react.default.createElement(_hi.HiCheck, null)))), /*#__PURE__*/_react.default.createElement(_ConditionalComponent.default, {
        condition: column.sortable !== false
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: computedSortingClassName,
        onClick: () => sortHandler(column)
      }, /*#__PURE__*/_react.default.createElement(ComputedUpSortIcon, {
        condition: !(tableSettings !== null && tableSettings !== void 0 && (_tableSettings$sortin = tableSettings.sortingSettings) !== null && _tableSettings$sortin !== void 0 && _tableSettings$sortin.includes("-")) && tableSettings.sortingSettings === column.field || tableSettings.sortingSettings === column.field,
        activeClassName: computedActiveSortIconClassName,
        disabledClassName: computedDisableSortIconClassName
      }), /*#__PURE__*/_react.default.createElement(ComputedDownSortIcon, {
        condition: (tableSettings === null || tableSettings === void 0 ? void 0 : (_tableSettings$sortin2 = tableSettings.sortingSettings) === null || _tableSettings$sortin2 === void 0 ? void 0 : _tableSettings$sortin2.includes("-")) && tableSettings.sortingSettings === "-" + column.field || tableSettings.sortingSettings === "-" + column.field,
        activeClassName: computedActiveSortIconClassName,
        disabledClassName: computedDisableSortIconClassName
      }))))));
    }));
  })), /*#__PURE__*/_react.default.createElement("tbody", getTableBodyProps(), rows.map((row, i) => {
    prepareRow(row);
    return /*#__PURE__*/_react.default.createElement("tr", _extends({}, row.getRowProps(), {
      className: tableSettings.selectedData.map(row => row.id).includes(row.original.id) ? selectabledRowsClassName : undefined,
      style: {
        height: "".concat(rowHeight, "px")
      }
    }), row.cells.map((cell, i) => {
      return /*#__PURE__*/_react.default.createElement("td", _extends({
        className: _TableClientModule.default.tdCell
      }, cell.getCellProps()), /*#__PURE__*/_react.default.createElement("div", {
        className: _TableClientModule.default.clampedCell
      }, cell.render("Cell"), cell.column.copyable && /*#__PURE__*/_react.default.createElement("div", {
        title: texts.copyToClipboard,
        className: _TableClientModule.default.copyFeature,
        onClick: e => {
          copyToClipboard(cell.value);
          const target = e.currentTarget.children[1];
          target.style.opacity = "1";
          setTimeout(() => {
            target.style.opacity = "0";
          }, 1000);
        }
      }, copyToClipboardIcon, /*#__PURE__*/_react.default.createElement("div", {
        className: tooltipClassName
      }, texts.copied))));
    }));
  }))) : /*#__PURE__*/_react.default.createElement("div", {
    className: emptyDataClassName
  }, emptyDataMessageComponent)), /*#__PURE__*/_react.default.createElement(_PaginationBar.default, {
    tableRef: tableRef,
    data: dataLists === null || dataLists === void 0 ? void 0 : dataLists.filteredData,
    tableSettings: tableSettings,
    texts: texts,
    paginationClassName: paginationClassName,
    enablePageSizeSelect: enablePageSizeSelect,
    pageSizes: pageSizes,
    toPageInputBaseClassName: toPageInputBaseClassName,
    toPageInputClassName: toPageInputClassName,
    paginationButtonClassName: paginationButtonClassName
  }))));
};
const TableClient = /*#__PURE__*/(0, _react.forwardRef)(TableClientComponent);
const IconUpComponent = _ref2 => {
  let {
    condition,
    activeClassName,
    disabledClassName
  } = _ref2;
  return /*#__PURE__*/_react.default.createElement("span", {
    className: condition ? activeClassName : disabledClassName
  }, /*#__PURE__*/_react.default.createElement("svg", {
    width: "6",
    height: "13",
    viewBox: "0 0 6 13",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, /*#__PURE__*/_react.default.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M0.552485 0.220199C0.845086 -0.0729861 1.31996 -0.0734596 1.61314 0.219141L4.95981 3.55914C5.253 3.85174 5.25347 4.32662 4.96087 4.6198C4.66827 4.91299 4.19339 4.91346 3.90021 4.62086L0.553542 1.28086C0.260357 0.988258 0.259884 0.513384 0.552485 0.220199Z",
    fill: "#84818A"
  }), /*#__PURE__*/_react.default.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M1.08334 0C1.49756 0 1.83334 0.335786 1.83334 0.75V12.0833C1.83334 12.4975 1.49756 12.8333 1.08334 12.8333C0.66913 12.8333 0.333344 12.4975 0.333344 12.0833V0.75C0.333344 0.335786 0.66913 0 1.08334 0Z",
    fill: "#84818A"
  })));
};
const IconDownComponent = _ref3 => {
  let {
    condition,
    activeClassName,
    disabledClassName
  } = _ref3;
  return /*#__PURE__*/_react.default.createElement("span", {
    className: condition ? activeClassName : disabledClassName
  }, /*#__PURE__*/_react.default.createElement("svg", {
    width: "5",
    height: "13",
    viewBox: "0 0 5 13",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, /*#__PURE__*/_react.default.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M0.219141 8.21361C0.511742 7.92042 0.986616 7.91995 1.2798 8.21255L4.62647 11.5525C4.91965 11.8452 4.92013 12.32 4.62753 12.6132C4.33492 12.9064 3.86005 12.9069 3.56687 12.6143L0.220199 9.27427C-0.0729862 8.98167 -0.0734596 8.50679 0.219141 8.21361Z",
    fill: "#84818A"
  }), /*#__PURE__*/_react.default.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M4.09665 0C4.51086 0 4.84665 0.335786 4.84665 0.75V12.0833C4.84665 12.4975 4.51086 12.8333 4.09665 12.8333C3.68244 12.8333 3.34665 12.4975 3.34665 12.0833V0.75C3.34665 0.335786 3.68244 0 4.09665 0Z",
    fill: "#84818A"
  })));
};
const EmptyDataMessageComponent = () => {
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("p", null, "No data available"));
};
TableClientComponent.propTypes = {
  pageSizes: _propTypes.default.arrayOf(_propTypes.default.number),
  columns: _propTypes.default.arrayOf(_propTypes.default.object).isRequired,
  height: _propTypes.default.string,
  Styles: _propTypes.default.string,
  endPoint: _propTypes.default.string.isRequired,
  emptyDataMessage: _propTypes.default.string,
  extraFilters: _propTypes.default.object,
  defaultPageSize: _propTypes.default.number,
  enablePageSizeSelect: _propTypes.default.bool,
  enableSearch: _propTypes.default.bool,
  enableSearchFieldSelect: _propTypes.default.bool,
  enableAllowedActions: _propTypes.default.bool,
  defaultSearchField: _propTypes.default.string,
  searchBarPlaceholder: _propTypes.default.string,
  onSuccess: _propTypes.default.func,
  onUnauthorized: _propTypes.default.func,
  onError: _propTypes.default.func,
  onSearch: _propTypes.default.func,
  onSearchFieldChange: _propTypes.default.func,
  onPageChange: _propTypes.default.func,
  onPageSizeChange: _propTypes.default.func,
  onSelectionChange: _propTypes.default.func,
  onSortChange: _propTypes.default.func
};
var _default = TableClient;
exports.default = _default;