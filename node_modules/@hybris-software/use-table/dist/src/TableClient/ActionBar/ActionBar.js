"use strict";

require("core-js/modules/es.weak-map.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("core-js/modules/web.dom-collections.iterator.js");
require("core-js/modules/es.regexp.exec.js");
require("core-js/modules/es.string.search.js");
var _react = _interopRequireWildcard(require("react"));
var _ConditionalComponent = _interopRequireDefault(require("../ConditionalComponent/ConditionalComponent"));
var _uiKit = require("@hybris-software/ui-kit");
var _ActionBarModule = _interopRequireDefault(require("./ActionBar.module.css"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
//Components

//Libraries

// Styles

function ActionBar(_ref) {
  var _tableSettings$search;
  let {
    tableRef,
    tableSettings,
    setTableSettings,
    texts,
    enableAllowedActions,
    allowedActions,
    enableSearch,
    enableSearchFieldSelect,
    computedColumns,
    updateObjectState,
    inputSearchBaseClassName = _ActionBarModule.default.inputSearchBaseClass,
    searchBarClassName = _ActionBarModule.default.searchBarClass
  } = _ref;
  const [selectedAction, setSelectedAction] = (0, _react.useState)("");
  const [searchValue, setSearchValue] = (0, _react.useState)(tableSettings.search.value);
  (0, _react.useEffect)(() => {
    setSearchValue(tableSettings.search.value);
  }, [tableSettings.search.value]);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: _ActionBarModule.default.filterRow
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: _ActionBarModule.default.leftSideFilter
  }, /*#__PURE__*/_react.default.createElement(_ConditionalComponent.default, {
    condition: enableAllowedActions
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: _ActionBarModule.default.actions
  }, /*#__PURE__*/_react.default.createElement(_uiKit.Select, {
    placeholder: texts.actionSelect,
    items: allowedActions,
    setValue: value => {
      setSelectedAction(value);
    },
    value: selectedAction
  }), /*#__PURE__*/_react.default.createElement(_uiKit.Button, {
    disabled: tableSettings.selectedData.length <= 0 || !selectedAction,
    onClick: () => selectedAction.action()
  }, texts.buttonAction)))), /*#__PURE__*/_react.default.createElement("div", {
    className: _ActionBarModule.default.rightSideFilter
  }, /*#__PURE__*/_react.default.createElement(_ConditionalComponent.default, {
    condition: enableSearchFieldSelect
  }, /*#__PURE__*/_react.default.createElement(_uiKit.Select, {
    items: computedColumns.filter(item => item.searchable !== false),
    placeholder: texts.columnsSelect,
    labelKey: "Header",
    value: tableSettings === null || tableSettings === void 0 ? void 0 : (_tableSettings$search = tableSettings.search) === null || _tableSettings$search === void 0 ? void 0 : _tableSettings$search.field,
    setValue: value => {
      updateObjectState("search", "field", value, setTableSettings);
    }
  })), /*#__PURE__*/_react.default.createElement(_ConditionalComponent.default, {
    condition: enableSearch
  }, /*#__PURE__*/_react.default.createElement(_uiKit.InputField, {
    baseClassName: inputSearchBaseClassName,
    showError: false,
    placeholder: texts.placeholderSearch,
    className: searchBarClassName,
    value: searchValue,
    onChange: e => {
      var _tableRef$current;
      tableRef === null || tableRef === void 0 ? void 0 : (_tableRef$current = tableRef.current) === null || _tableRef$current === void 0 ? void 0 : _tableRef$current.setSearchValue(e.target.value);
    }
  }))));
}
var _default = ActionBar;
exports.default = _default;