"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("core-js/modules/web.dom-collections.iterator.js");
var _react = _interopRequireWildcard(require("react"));
var _fi = require("react-icons/fi");
var _ai = require("react-icons/ai");
var _hi = require("react-icons/hi");
var _classNames = _interopRequireDefault(require("../../Utils/classNames"));
var _generateRandomCharacters = _interopRequireDefault(require("../../Utils/generateRandomCharacters"));
var _InputFieldModule = _interopRequireDefault(require("./InputField.module.css"));
var _ThemeContext = _interopRequireDefault(require("../../Contexts/ThemeContext"));
var _useWindowSize = _interopRequireDefault(require("../../Utils/useWindowSize"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
// Icons

// Utils

// Styles

// Contexts

/**
 * @param {Object} props - props
 * @param {string} props.autoComplete - Auto complete
 * @param {JSX.Element} props.icon - Icon
 * @param {string} props.className - Class name for the input field
 * @param {string} props.baseClassName - Base class name for the input field
 * @param {string} props.successClassName - Success class name for the input field
 * @param {string} props.errorMessageClassName - Error message class name for the input field
 * @param {string} props.errorClassName - Error class name for the input field
 * @param {string} props.labelClassName - Label class name for the input field
 * @param {boolean} props.isValid - Is valid
 * @param {string} props.errorDetails - Error details
 * @param {string} props.type - Type
 * @param {string} props.label - Label
 * @param {boolean} props.onPaste - On paste
 * @param {boolean} props.onCopy - On copy
 * @param {string} props.placeholder - Placeholder
 * @param {function} props.setValue - Set value
 * @param {function} props.setShowErrors - Set show errors
 * @param {Object} props.style - Style
 * @param {boolean} props.errorIconVisibility - Error icon visibility
 * @param {JSX.Element} props.errorIcon - Error icon
 * @param {boolean} props.successIconVisibility - Success icon visibility
 * @param {JSX.Element} props.successIcon - Success icon
 * @param {boolean} props.showPasswordIconVisibility - Show password icon visibility
 * @param {JSX.Element} props.showPasswordIcon - Show password icon
 * @param {JSX.Element} props.showPasswordIconOff - Show password icon off
 * @param {boolean} props.showPasswordIconAlwaysMobile - Show password icon Always Mobile
 * @param {number} props.mobileMaximumSize - Mobile Maximum Size
 * @param {boolean} props.showArrows - Show arrows
 * @param {string} props.value - Value
 * @param {boolean} props.showError - Show error
 * @param {number} props.maxLength - Max length
 * @param {function} props.onBlur - On blur
 * @param {function} props.onInput - On input
 * @param {function} props.onChange - On change
 * @param {boolean} props.readOnly - Read only
 * @param {string} props.inputId - Input id
 * @param {Object} props.inputRef - Input ref
 */

const InputFieldComponent = (_ref, ref) => {
  var _themeContext$theme, _themeContext$theme2, _themeContext$theme3, _themeContext$theme4, _themeContext$theme5, _themeContext$theme6, _themeContext$theme7, _themeContext$theme8, _themeContext$theme9, _themeContext$theme10, _themeContext$theme11, _themeContext$theme12, _themeContext$theme13, _themeContext$theme14, _themeContext$theme15, _themeContext$theme16, _themeContext$theme17, _themeContext$theme18, _themeContext$theme19, _themeContext$theme20;
  let {
    autoComplete = "new-password",
    icon = null,
    className,
    baseClassName,
    successClassName,
    errorMessageClassName,
    errorClassName,
    labelClassName,
    isValid,
    errorDetails,
    type,
    label,
    onPaste: _onPaste = true,
    onCopy: _onCopy = true,
    placeholder,
    setValue = () => {},
    setShowErrors = () => {},
    style,
    errorIconVisibility,
    errorIcon,
    successIconVisibility,
    successIcon,
    showPasswordIconVisibility = true,
    showPasswordIcon = /*#__PURE__*/_react.default.createElement(_hi.HiOutlineEye, null),
    showPasswordIconOff = /*#__PURE__*/_react.default.createElement(_hi.HiOutlineEyeOff, null),
    showPasswordIconAlwaysMobile = false,
    mobileMaximumSize = 767,
    showArrows = false,
    value,
    showError = true,
    maxLength,
    onBlur: _onBlur = () => {},
    onInput: _onInput = () => {},
    onChange = () => {},
    readOnly = false,
    inputId
  } = _ref;
  const defaultRef = (0, _react.useRef)(null);
  const computedInputRef = ref || defaultRef;

  // Variables
  const [inputType, setInputType] = (0, _react.useState)(type);
  const [eyeIconVisibility, setEyeIconVisibility] = (0, _react.useState)(false);
  const [eyeIcon, setEyeIcon] = (0, _react.useState)(showPasswordIcon);
  const computedInputId = inputId || (0, _generateRandomCharacters.default)();
  const themeContext = (0, _react.useContext)(_ThemeContext.default);
  const windowSize = (0, _useWindowSize.default)();
  const errorMessageString = errorDetails == null ? null : typeof errorDetails === "object" ? errorDetails.message : errorDetails;
  const computedBaseClassName = baseClassName || (themeContext === null || themeContext === void 0 ? void 0 : themeContext.theme) && (themeContext === null || themeContext === void 0 ? void 0 : (_themeContext$theme = themeContext.theme) === null || _themeContext$theme === void 0 ? void 0 : _themeContext$theme.inputField) && (themeContext === null || themeContext === void 0 ? void 0 : (_themeContext$theme2 = themeContext.theme) === null || _themeContext$theme2 === void 0 ? void 0 : _themeContext$theme2.inputField.baseClassName) || _InputFieldModule.default.inputFieldBase;
  const computedErrorClassName = errorClassName || (themeContext === null || themeContext === void 0 ? void 0 : themeContext.theme) && (themeContext === null || themeContext === void 0 ? void 0 : (_themeContext$theme3 = themeContext.theme) === null || _themeContext$theme3 === void 0 ? void 0 : _themeContext$theme3.inputField) && (themeContext === null || themeContext === void 0 ? void 0 : (_themeContext$theme4 = themeContext.theme) === null || _themeContext$theme4 === void 0 ? void 0 : _themeContext$theme4.inputField.errorClassName) || _InputFieldModule.default.inputFieldError;
  const computedSuccessClassName = successClassName || (themeContext === null || themeContext === void 0 ? void 0 : themeContext.theme) && (themeContext === null || themeContext === void 0 ? void 0 : (_themeContext$theme5 = themeContext.theme) === null || _themeContext$theme5 === void 0 ? void 0 : _themeContext$theme5.inputField) && (themeContext === null || themeContext === void 0 ? void 0 : (_themeContext$theme6 = themeContext.theme) === null || _themeContext$theme6 === void 0 ? void 0 : _themeContext$theme6.inputField.successClassName) || _InputFieldModule.default.inputFieldSuccess;
  const computedLabelClassName = labelClassName || (themeContext === null || themeContext === void 0 ? void 0 : themeContext.theme) && (themeContext === null || themeContext === void 0 ? void 0 : (_themeContext$theme7 = themeContext.theme) === null || _themeContext$theme7 === void 0 ? void 0 : _themeContext$theme7.inputField) && (themeContext === null || themeContext === void 0 ? void 0 : (_themeContext$theme8 = themeContext.theme) === null || _themeContext$theme8 === void 0 ? void 0 : _themeContext$theme8.inputField.labelClassName) || _InputFieldModule.default.label;
  const computedErrorMessageClassName = errorMessageClassName || (themeContext === null || themeContext === void 0 ? void 0 : themeContext.theme) && (themeContext === null || themeContext === void 0 ? void 0 : (_themeContext$theme9 = themeContext.theme) === null || _themeContext$theme9 === void 0 ? void 0 : _themeContext$theme9.inputField) && (themeContext === null || themeContext === void 0 ? void 0 : (_themeContext$theme10 = themeContext.theme) === null || _themeContext$theme10 === void 0 ? void 0 : _themeContext$theme10.inputField.errorMessageClassName) || _InputFieldModule.default.errorMessageClassName;
  const computedSuccessIcon = successIcon || (themeContext === null || themeContext === void 0 ? void 0 : themeContext.theme) && (themeContext === null || themeContext === void 0 ? void 0 : (_themeContext$theme11 = themeContext.theme) === null || _themeContext$theme11 === void 0 ? void 0 : _themeContext$theme11.inputField) && (themeContext === null || themeContext === void 0 ? void 0 : (_themeContext$theme12 = themeContext.theme) === null || _themeContext$theme12 === void 0 ? void 0 : _themeContext$theme12.inputField.succesIcon) || /*#__PURE__*/_react.default.createElement(_ai.AiOutlineCheck, {
    className: (0, _classNames.default)(_InputFieldModule.default.icon, _InputFieldModule.default.successIcon)
  });
  const computedErrorIcon = errorIcon || (themeContext === null || themeContext === void 0 ? void 0 : themeContext.theme) && (themeContext === null || themeContext === void 0 ? void 0 : (_themeContext$theme13 = themeContext.theme) === null || _themeContext$theme13 === void 0 ? void 0 : _themeContext$theme13.inputField) && (themeContext === null || themeContext === void 0 ? void 0 : (_themeContext$theme14 = themeContext.theme) === null || _themeContext$theme14 === void 0 ? void 0 : _themeContext$theme14.inputField.errorIcon) || /*#__PURE__*/_react.default.createElement(_fi.FiAlertTriangle, {
    className: (0, _classNames.default)(_InputFieldModule.default.icon, _InputFieldModule.default.alertIcon)
  });
  const computedErrorIconVisibility = errorIconVisibility !== undefined ? errorIconVisibility : ((themeContext === null || themeContext === void 0 ? void 0 : themeContext.theme) && (themeContext === null || themeContext === void 0 ? void 0 : (_themeContext$theme15 = themeContext.theme) === null || _themeContext$theme15 === void 0 ? void 0 : _themeContext$theme15.inputField) && (themeContext === null || themeContext === void 0 ? void 0 : (_themeContext$theme16 = themeContext.theme) === null || _themeContext$theme16 === void 0 ? void 0 : _themeContext$theme16.inputField.errorIconVisibility)) !== undefined ? themeContext === null || themeContext === void 0 ? void 0 : (_themeContext$theme17 = themeContext.theme) === null || _themeContext$theme17 === void 0 ? void 0 : _themeContext$theme17.inputField.errorIconVisibility : false;
  const computedSuccessIconVisibility = successIconVisibility !== undefined ? successIconVisibility : ((themeContext === null || themeContext === void 0 ? void 0 : themeContext.theme) && (themeContext === null || themeContext === void 0 ? void 0 : (_themeContext$theme18 = themeContext.theme) === null || _themeContext$theme18 === void 0 ? void 0 : _themeContext$theme18.inputField) && (themeContext === null || themeContext === void 0 ? void 0 : (_themeContext$theme19 = themeContext.theme) === null || _themeContext$theme19 === void 0 ? void 0 : _themeContext$theme19.inputField.successIconVisibility)) !== undefined ? themeContext === null || themeContext === void 0 ? void 0 : (_themeContext$theme20 = themeContext.theme) === null || _themeContext$theme20 === void 0 ? void 0 : _themeContext$theme20.inputField.successIconVisibility : false;
  return /*#__PURE__*/_react.default.createElement("div", {
    className: _InputFieldModule.default.componentContainer,
    onMouseOver: () => {
      setEyeIconVisibility(true);
    },
    onMouseLeave: () => {
      setEyeIconVisibility(false);
    }
  }, label && /*#__PURE__*/_react.default.createElement("label", {
    htmlFor: computedInputId,
    className: computedLabelClassName
  }, label), /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classNames.default)(_InputFieldModule.default.inputField, isValid === true ? computedSuccessClassName : isValid === false ? computedErrorClassName : computedBaseClassName, className),
    style: style
  }, /*#__PURE__*/_react.default.createElement("span", null, icon && icon), /*#__PURE__*/_react.default.createElement("input", {
    ref: computedInputRef,
    className: (0, _classNames.default)(_InputFieldModule.default.input, showArrows === false && _InputFieldModule.default.inputArrows),
    autoComplete: autoComplete,
    id: computedInputId,
    type: inputType,
    placeholder: placeholder,
    value: value,
    maxLength: maxLength,
    readOnly: readOnly
    // onInput Function
    ,
    onInput: e => {
      setValue(e.target.value);
      _onInput(e);
    },
    onChange: onChange
    // onBlur Function
    ,
    onBlur: e => {
      setShowErrors();
      _onBlur(e);
    }
    // onPaste Function
    ,
    onPaste: e => {
      if (!_onPaste) {
        e.preventDefault();
      }
    }
    // onCopy Function
    ,
    onCopy: e => {
      if (!_onCopy) {
        e.preventDefault();
      }
    }
  }), type === "password" && showPasswordIconVisibility === true && (eyeIconVisibility === true && windowSize.width >= mobileMaximumSize || showPasswordIconAlwaysMobile === true && windowSize.width < mobileMaximumSize) ? /*#__PURE__*/_react.default.createElement("span", {
    className: (0, _classNames.default)(_InputFieldModule.default.icon, _InputFieldModule.default.eyeIcon),
    onClick: () => {
      if (inputType === "password") {
        setInputType("text");
        setEyeIcon(showPasswordIconOff);
      } else {
        setInputType("password");
        setEyeIcon(showPasswordIcon);
      }
    }
  }, eyeIcon) : /*#__PURE__*/_react.default.createElement("span", {
    className: _InputFieldModule.default.icon
  }, isValid === true ? computedSuccessIconVisibility === true && computedSuccessIcon : isValid === false && computedErrorIconVisibility === true && computedErrorIcon)), showError && /*#__PURE__*/_react.default.createElement("div", {
    title: errorMessageString,
    className: computedErrorMessageClassName
  }, errorMessageString && errorMessageString));
};
const InputField = /*#__PURE__*/(0, _react.forwardRef)(InputFieldComponent);
var _default = InputField;
exports.default = _default;