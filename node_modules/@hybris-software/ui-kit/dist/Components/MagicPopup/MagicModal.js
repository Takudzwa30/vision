"use strict";

require("core-js/modules/es.symbol.description.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("core-js/modules/web.dom-collections.iterator.js");
var _react = _interopRequireWildcard(require("react"));
var _ai = require("react-icons/ai");
var _classNames = _interopRequireDefault(require("../../Utils/classNames"));
var _MagicModalModule = _interopRequireDefault(require("./MagicModal.module.css"));
var _ThemeContext = _interopRequireDefault(require("../../Contexts/ThemeContext"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
/**
 * @param {Object} props - props
 * @param {Object} props.body - Body
 * @param {Object} props.contentStyle - Style for the content
 * @param {string} props.contentClassName - Class name for the content
 * @param {Object} props.overlayStyle - Style for the overlay
 * @param {string} props.overlayClassName - Class name for the overlay
 * @param {Object} props.modalStyle - Style for the modal
 * @param {string} props.modalClassName - Class name for the modal
 * @param {Object} props.closeIconStyle - Style for the close icon
 * @param {string} props.closeIconClassName - Class name for the close icon
 * @param {JSX.Element} props.closeIcon - Close icon
 * @param {boolean} props.showCloseIcon - Show close icon
 * @param {boolean} props.destroyBodyOnClose - Destroy body on close
 * @param {function} props.onModalOpen - On modal open
 * @param {function} props.onModalHide - On modal close
 * @param {function} props.onBodyUpdate - On body update
 * @param {function} props.onModalDestroy - On modal destroy
 * @param {function} props.onCloseIconClick - On close icon click
 */

const ModalComponent = (_ref, ref) => {
  let {
    body,
    contentStyle,
    contentClassName = _MagicModalModule.default.content,
    overlayStyle,
    overlayClassName = _MagicModalModule.default.overlay,
    modalStyle,
    modalClassName = _MagicModalModule.default.modal,
    closeIconStyle,
    closeIconClassName = _MagicModalModule.default.hideModal,
    closeIcon = /*#__PURE__*/_react.default.createElement("span", {
      className: _MagicModalModule.default.hideButton
    }, /*#__PURE__*/_react.default.createElement(_ai.AiOutlineClose, null)),
    showCloseIcon = true,
    destroyBodyOnClose = true,
    onModalOpen = () => {},
    onModalHide = () => {},
    onBodyUpdate = () => {},
    onModalDestroy = () => {},
    onCloseIconClick = () => {}
  } = _ref;
  // Contexts
  const themeContext = (0, _react.useContext)(_ThemeContext.default);

  // States
  const [hide, setHide] = (0, _react.useState)(true);
  const [destroy, setDestroy] = (0, _react.useState)(true);
  const [computedBody, setComputedBody] = (0, _react.useState)(body);
  const [computedOptions, setComputedOptions] = (0, _react.useState)({});

  // Refs
  const defaultRef = (0, _react.useRef)(null);
  const modalRef = ref || defaultRef;

  // Computed options
  const computedModalOptions = (0, _react.useMemo)(() => {
    var _themeContext$theme, _themeContext$theme2, _themeContext$theme2$, _themeContext$theme3, _themeContext$theme4, _themeContext$theme4$, _themeContext$theme5, _themeContext$theme6, _themeContext$theme6$, _themeContext$theme7, _themeContext$theme8, _themeContext$theme8$;
    return {
      // Styles
      computedContentStyle: (computedOptions === null || computedOptions === void 0 ? void 0 : computedOptions.contentStyle) || contentStyle,
      computedOverlayStyle: (computedOptions === null || computedOptions === void 0 ? void 0 : computedOptions.overlayStyle) || overlayStyle,
      computedModalStyle: (computedOptions === null || computedOptions === void 0 ? void 0 : computedOptions.modalStyle) || modalStyle,
      computedCloseIconStyle: (computedOptions === null || computedOptions === void 0 ? void 0 : computedOptions.closeIconStyle) || closeIconStyle,
      // Classes
      computedContentClassName: (computedOptions === null || computedOptions === void 0 ? void 0 : computedOptions.contentClassName) || themeContext.theme && ((_themeContext$theme = themeContext.theme) === null || _themeContext$theme === void 0 ? void 0 : _themeContext$theme.magicModal) && ((_themeContext$theme2 = themeContext.theme) === null || _themeContext$theme2 === void 0 ? void 0 : (_themeContext$theme2$ = _themeContext$theme2.magicModal) === null || _themeContext$theme2$ === void 0 ? void 0 : _themeContext$theme2$.contentClassName) || contentClassName,
      computedOverlayClassName: (computedOptions === null || computedOptions === void 0 ? void 0 : computedOptions.overlayClassName) || themeContext.theme && ((_themeContext$theme3 = themeContext.theme) === null || _themeContext$theme3 === void 0 ? void 0 : _themeContext$theme3.magicModal) && ((_themeContext$theme4 = themeContext.theme) === null || _themeContext$theme4 === void 0 ? void 0 : (_themeContext$theme4$ = _themeContext$theme4.magicModal) === null || _themeContext$theme4$ === void 0 ? void 0 : _themeContext$theme4$.overlayClassName) || overlayClassName,
      computedModalClassName: (computedOptions === null || computedOptions === void 0 ? void 0 : computedOptions.modalClassName) || themeContext.theme && ((_themeContext$theme5 = themeContext.theme) === null || _themeContext$theme5 === void 0 ? void 0 : _themeContext$theme5.magicModal) && ((_themeContext$theme6 = themeContext.theme) === null || _themeContext$theme6 === void 0 ? void 0 : (_themeContext$theme6$ = _themeContext$theme6.magicModal) === null || _themeContext$theme6$ === void 0 ? void 0 : _themeContext$theme6$.modalClassName) || modalClassName,
      computedCloseIconClassName: (computedOptions === null || computedOptions === void 0 ? void 0 : computedOptions.closeIconClassName) || themeContext.theme && ((_themeContext$theme7 = themeContext.theme) === null || _themeContext$theme7 === void 0 ? void 0 : _themeContext$theme7.magicModal) && ((_themeContext$theme8 = themeContext.theme) === null || _themeContext$theme8 === void 0 ? void 0 : (_themeContext$theme8$ = _themeContext$theme8.magicModal) === null || _themeContext$theme8$ === void 0 ? void 0 : _themeContext$theme8$.closeIconClassName) || closeIconClassName,
      // Events
      computedOnModalHide: (computedOptions === null || computedOptions === void 0 ? void 0 : computedOptions.onModalHide) || onModalHide,
      computedOnModalOpen: (computedOptions === null || computedOptions === void 0 ? void 0 : computedOptions.onModalOpen) || onModalOpen,
      computedOnBodyUpdate: (computedOptions === null || computedOptions === void 0 ? void 0 : computedOptions.onBodyUpdate) || onBodyUpdate,
      computedOnModalDestroy: (computedOptions === null || computedOptions === void 0 ? void 0 : computedOptions.onModalDestroy) || onModalDestroy,
      computedOnCloseIconClick: (computedOptions === null || computedOptions === void 0 ? void 0 : computedOptions.onCloseIconClick) || onCloseIconClick,
      // Other
      computedCloseIcon: (computedOptions === null || computedOptions === void 0 ? void 0 : computedOptions.closeIcon) || closeIcon,
      computedShowCloseIcon: (computedOptions === null || computedOptions === void 0 ? void 0 : computedOptions.showCloseIcon) !== undefined ? computedOptions === null || computedOptions === void 0 ? void 0 : computedOptions.showCloseIcon : showCloseIcon,
      computedDestroyBodyOnClose: (computedOptions === null || computedOptions === void 0 ? void 0 : computedOptions.destroyBodyOnClose) !== undefined ? computedOptions === null || computedOptions === void 0 ? void 0 : computedOptions.destroyBodyOnClose : destroyBodyOnClose
    };
  }, [contentStyle, contentClassName, overlayStyle, overlayClassName, modalStyle, modalClassName, closeIconStyle, closeIconClassName, closeIcon, showCloseIcon, destroyBodyOnClose, onModalOpen, onModalHide, onBodyUpdate, onModalDestroy, onCloseIconClick, computedOptions]);

  // Methods
  (0, _react.useImperativeHandle)(modalRef, () => {
    return {
      open() {
        setDestroy(false);
        setHide(false);
        computedModalOptions.computedOnModalOpen();
      },
      hide() {
        setHide(true);
        computedModalOptions.computedOnModalHide();
      },
      updateBody(body, options) {
        computedModalOptions.computedOnModalOpen();
        computedModalOptions.computedOnBodyUpdate();
        setDestroy(false);
        setHide(false);
        setComputedBody(body);
        setComputedOptions(options);
      },
      destroy() {
        setDestroy(true);
        setComputedBody(null);
        computedModalOptions.computedOnModalDestroy();
      },
      isOpen() {
        return !hide;
      }
    };
  },
  // eslint-disable-next-line react-hooks/exhaustive-deps
  [onModalHide, onModalOpen, onBodyUpdate, onModalDestroy, computedModalOptions]);
  return !destroy && /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classNames.default)(_MagicModalModule.default.window, computedModalOptions.computedOverlayClassName),
    style: _objectSpread(_objectSpread({}, computedModalOptions.computedOverlayStyle), {}, {
      display: hide ? "none" : "block"
    })
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classNames.default)(computedModalOptions.computedModalClassName, _MagicModalModule.default.modalWindow),
    style: computedModalOptions.computedModalStyle
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classNames.default)(_MagicModalModule.default.content, computedModalOptions.computedContentClassName),
    style: computedModalOptions.computedContentStyle
  }, computedModalOptions.computedShowCloseIcon && /*#__PURE__*/_react.default.createElement("div", {
    style: computedModalOptions.computedCloseIconStyle,
    className: computedModalOptions.computedCloseIconClassName
  }, /*#__PURE__*/_react.default.createElement("span", {
    onClick: () => {
      computedModalOptions.computedOnCloseIconClick();
      computedModalOptions.computedOnModalHide();
      if (computedModalOptions.computedDestroyBodyOnClose) {
        modalRef.current.destroy();
      } else {
        modalRef.current.hide();
      }
    }
  }, computedModalOptions.computedCloseIcon)), computedBody)));
};
const MagicModal = /*#__PURE__*/(0, _react.forwardRef)(ModalComponent);
var _default = MagicModal;
exports.default = _default;