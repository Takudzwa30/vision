"use strict";

require("core-js/modules/web.dom-collections.iterator.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("core-js/modules/es.symbol.description.js");
var _react = _interopRequireWildcard(require("react"));
var _classNames = _interopRequireDefault(require("../../Utils/classNames"));
var _GridBasicModule = _interopRequireDefault(require("./GridBasic.module.css"));
var _ThemeContext = _interopRequireDefault(require("../../Contexts/ThemeContext"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
/**
 * @param {Object} props - props
 * @param {number} props.orderSm - Order for small screens
 * @param {number} props.orderMd - Order for medium screens
 * @param {number} props.orderLg - Order for large screens
 * @param {number} props.orderXl - Order for extra large screens
 * @param {number} props.orderXxl - Order for extra extra large screens
 * @param {string} props.className - Class name for the column
 * @param {JSX.Element} props.children - Children
 * @param {number} props.colsize - Column size
 * @param {number} props.marginbottom - Margin bottom
 * @param {Object} props.style - Style
 */

const Col = _ref => {
  var _themeContext$theme, _themeContext$theme2, _themeContext$theme2$;
  let {
    orderSm,
    orderMd,
    orderLg,
    orderXl,
    orderXxl,
    className,
    style,
    children,
    colsize,
    marginbottom
  } = _ref;
  const themeContext = (0, _react.useContext)(_ThemeContext.default);
  const columnStyle = (themeContext === null || themeContext === void 0 ? void 0 : themeContext.theme) && (themeContext === null || themeContext === void 0 ? void 0 : (_themeContext$theme = themeContext.theme) === null || _themeContext$theme === void 0 ? void 0 : _themeContext$theme.col) && (themeContext === null || themeContext === void 0 ? void 0 : (_themeContext$theme2 = themeContext.theme) === null || _themeContext$theme2 === void 0 ? void 0 : (_themeContext$theme2$ = _themeContext$theme2.col) === null || _themeContext$theme2$ === void 0 ? void 0 : _themeContext$theme2$.columnStyle) || "";
  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classNames.default)(orderSm && _GridBasicModule.default["order-sm-".concat(orderSm)], orderMd && _GridBasicModule.default["order-md-".concat(orderMd)], orderLg && _GridBasicModule.default["order-lg-".concat(orderLg)], orderXl && _GridBasicModule.default["order-xl-".concat(orderXl)], orderXxl && _GridBasicModule.default["order-xxl-".concat(orderXxl)], columnStyle, className),
    style: _objectSpread({
      flex: "0 0 auto",
      width: colsize,
      marginBottom: marginbottom
    }, style)
  }, children);
};
var _default = Col; // Language: javascript
// # sm: Set the width of the column for small screens (1 to 12)
// # md: Set the width of the column for medium screens (1 to 12)
// # lg: Set the width of the column for large screens (1 to 12)
// # xl: Set the width of the column for extra large screens (1 to 12)
// # xxl: Set the width of the column for extra extra large screens (1 to 12)
// # offsetSm: Set the offset of the column for small screens (1 to 12)
// # offsetMd: Set the offset of the column for medium screens (1 to 12)
// # offsetLg: Set the offset of the column for large screens (1 to 12)
// # offsetXl: Set the offset of the column for extra large screens (1 to 12)
// # offsetXxl: Set the offset of the column for extra extra large screens (1 to 12)
// # orderSm: Set the order of the column for small screens (first - 1 to 5 - last)
// # orderMd: Set the order of the column for medium screens (first - 1 to 5 - last)
// # orderLg: Set the order of the column for large screens (first - 1 to 5 - last)
// # orderXl: Set the order of the column for extra large screens (first - 1 to 5 - last)
// # orderXxl: Set the order of the column for extra extra large screens (first - 1 to 5 - last)
// # className, add one or more class names to the element
// # children: Rendered children
// # style: Add inline styles to the element
// # colSize: Change the width of the column
// # marginBottom: Change the margin bottom of the column
exports.default = _default;