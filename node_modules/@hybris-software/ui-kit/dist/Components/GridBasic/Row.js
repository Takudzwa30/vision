"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("core-js/modules/es.promise.js");
require("core-js/modules/web.dom-collections.iterator.js");
var _react = _interopRequireWildcard(require("react"));
var _classNames = _interopRequireDefault(require("../../Utils/classNames"));
var _GridBasicModule = _interopRequireDefault(require("./GridBasic.module.css"));
var _ThemeContext = _interopRequireDefault(require("../../Contexts/ThemeContext"));
var _bootstrapBreakPoint = _interopRequireDefault(require("../../Data/bootstrapBreakPoint"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
// Utils

// Styles

// Contexts

// Data

function getColWidth(childProps, windowSize) {
  let colWidth = 12;
  if (childProps.xs && windowSize.width >= _bootstrapBreakPoint.default.xs) {
    colWidth = childProps.xs;
  }
  if (childProps.sm && windowSize.width >= _bootstrapBreakPoint.default.sm) {
    colWidth = childProps.sm;
  }
  if (childProps.md && windowSize.width >= _bootstrapBreakPoint.default.md) {
    colWidth = childProps.md;
  }
  if (childProps.lg && windowSize.width >= _bootstrapBreakPoint.default.lg) {
    colWidth = childProps.lg;
  }
  if (childProps.xl && windowSize.width >= _bootstrapBreakPoint.default.xl) {
    colWidth = childProps.xl;
  }
  if (childProps.xxl && windowSize.width >= _bootstrapBreakPoint.default.xxl) {
    colWidth = childProps.xxl;
  }
  return colWidth;
}
function getColGap(gapBreakPoints, windowSize) {
  let colGap = 0;
  if (gapBreakPoints.xs && windowSize.width >= _bootstrapBreakPoint.default.xs) {
    colGap = gapBreakPoints.xs;
  }
  if (gapBreakPoints.sm && windowSize.width >= _bootstrapBreakPoint.default.sm) {
    colGap = gapBreakPoints.sm;
  }
  if (gapBreakPoints.md && windowSize.width >= _bootstrapBreakPoint.default.md) {
    colGap = gapBreakPoints.md;
  }
  if (gapBreakPoints.lg && windowSize.width >= _bootstrapBreakPoint.default.lg) {
    colGap = gapBreakPoints.lg;
  }
  if (gapBreakPoints.xl && windowSize.width >= _bootstrapBreakPoint.default.xl) {
    colGap = gapBreakPoints.xl;
  }
  if (gapBreakPoints.xxl && windowSize.width >= _bootstrapBreakPoint.default.xxl) {
    colGap = gapBreakPoints.xxl;
  }
  return colGap;
}

/**
 * @param {Object} props - props
 * @param {string} props.className - Class name for the row
 * @param {JSX.Element} props.children - Children
 * @param {Object} props.columnGap - Column gap
 * @param {boolean} props.useGap - Use gap
 */

const Row = _ref => {
  var _themeContext$theme, _themeContext$theme2, _themeContext$theme2$, _themeContext$theme3, _themeContext$theme3$;
  let {
    className,
    style,
    children,
    columnGap,
    useGap = true
  } = _ref;
  const childrenList = _react.Children.toArray(children);
  const [horizontalGaps, setHorizontalGaps] = (0, _react.useState)(Array(childrenList.length).fill(0));
  const [verticalGaps, setVerticalGaps] = (0, _react.useState)(Array(childrenList.length).fill(0));
  const themeContext = (0, _react.useContext)(_ThemeContext.default);
  const windowSize = themeContext.windowSize;
  const computedClassName = themeContext !== null && themeContext !== void 0 && themeContext.theme && themeContext !== null && themeContext !== void 0 && (_themeContext$theme = themeContext.theme) !== null && _themeContext$theme !== void 0 && _themeContext$theme.row && themeContext !== null && themeContext !== void 0 && (_themeContext$theme2 = themeContext.theme) !== null && _themeContext$theme2 !== void 0 && (_themeContext$theme2$ = _themeContext$theme2.row) !== null && _themeContext$theme2$ !== void 0 && _themeContext$theme2$.rowClassName ? themeContext === null || themeContext === void 0 ? void 0 : (_themeContext$theme3 = themeContext.theme) === null || _themeContext$theme3 === void 0 ? void 0 : (_themeContext$theme3$ = _themeContext$theme3.row) === null || _themeContext$theme3$ === void 0 ? void 0 : _themeContext$theme3$.rowClassName : "";
  (0, _react.useEffect)(() => {
    if (windowSize) {
      var _themeContext$theme4, _themeContext$theme5, _themeContext$theme5$, _themeContext$theme6, _themeContext$theme6$, _themeContext$theme6$2, _themeContext$theme7, _themeContext$theme7$, _themeContext$theme7$2, _themeContext$theme8, _themeContext$theme9, _themeContext$theme9$, _themeContext$theme10, _themeContext$theme11, _themeContext$theme12, _themeContext$theme13, _themeContext$theme14, _themeContext$theme15;
      const columnHorizontalGap = !useGap ? 0 : columnGap && columnGap !== null && columnGap !== void 0 && columnGap.horizontal ? getColGap(columnGap === null || columnGap === void 0 ? void 0 : columnGap.horizontal, windowSize) : themeContext.theme && (_themeContext$theme4 = themeContext.theme) !== null && _themeContext$theme4 !== void 0 && _themeContext$theme4.row && (_themeContext$theme5 = themeContext.theme) !== null && _themeContext$theme5 !== void 0 && (_themeContext$theme5$ = _themeContext$theme5.row) !== null && _themeContext$theme5$ !== void 0 && _themeContext$theme5$.columnGap && (_themeContext$theme6 = themeContext.theme) !== null && _themeContext$theme6 !== void 0 && (_themeContext$theme6$ = _themeContext$theme6.row) !== null && _themeContext$theme6$ !== void 0 && (_themeContext$theme6$2 = _themeContext$theme6$.columnGap) !== null && _themeContext$theme6$2 !== void 0 && _themeContext$theme6$2.horizontal ? getColGap((_themeContext$theme7 = themeContext.theme) === null || _themeContext$theme7 === void 0 ? void 0 : (_themeContext$theme7$ = _themeContext$theme7.row) === null || _themeContext$theme7$ === void 0 ? void 0 : (_themeContext$theme7$2 = _themeContext$theme7$.columnGap) === null || _themeContext$theme7$2 === void 0 ? void 0 : _themeContext$theme7$2.horizontal, windowSize) : 0;
      const columnVerticalGap = !useGap ? 0 : columnGap && columnGap !== null && columnGap !== void 0 && columnGap.vertical ? getColGap(columnGap === null || columnGap === void 0 ? void 0 : columnGap.vertical, windowSize) : themeContext.theme && (_themeContext$theme8 = themeContext.theme) !== null && _themeContext$theme8 !== void 0 && _themeContext$theme8.row && (_themeContext$theme9 = themeContext.theme) !== null && _themeContext$theme9 !== void 0 && (_themeContext$theme9$ = _themeContext$theme9.row) !== null && _themeContext$theme9$ !== void 0 && _themeContext$theme9$.columnGap && (_themeContext$theme10 = themeContext.theme) !== null && _themeContext$theme10 !== void 0 && (_themeContext$theme11 = _themeContext$theme10.row) !== null && _themeContext$theme11 !== void 0 && (_themeContext$theme12 = _themeContext$theme11.columnGap) !== null && _themeContext$theme12 !== void 0 && _themeContext$theme12.vertical ? getColGap((_themeContext$theme13 = themeContext.theme) === null || _themeContext$theme13 === void 0 ? void 0 : (_themeContext$theme14 = _themeContext$theme13.row) === null || _themeContext$theme14 === void 0 ? void 0 : (_themeContext$theme15 = _themeContext$theme14.columnGap) === null || _themeContext$theme15 === void 0 ? void 0 : _themeContext$theme15.vertical, windowSize) : 0;
      const newHorizontalGaps = [];
      const newVerticalGaps = [];
      let rowSize = 0;
      let rowElements = 0;
      let rowCount = 0;
      _react.Children.forEach(childrenList, child => {
        const colSize = getColWidth(child.props, windowSize);
        if (rowSize + colSize > 12) {
          newHorizontalGaps.push(...Array(rowElements).fill(columnHorizontalGap * (rowElements - 1)));
          newVerticalGaps.push(...Array(rowElements).fill(columnVerticalGap));
          rowCount += 1;
          rowSize = colSize;
          rowElements = 1;
        } else {
          rowSize += colSize;
          rowElements += 1;
        }
      });
      if (rowElements > 0) {
        newHorizontalGaps.push(...Array(rowElements).fill(columnHorizontalGap * (rowElements - 1)));
        newVerticalGaps.push(...Array(rowElements).fill(0));
      }
      setHorizontalGaps(newHorizontalGaps);
      setVerticalGaps(newVerticalGaps);
    }
  }, [windowSize, columnGap, children, useGap]);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classNames.default)(_GridBasicModule.default.row, computedClassName, className),
    style: style
  }, childrenList.map((child, index) => {
    if ( /*#__PURE__*/(0, _react.isValidElement)(child)) {
      const colWidth = getColWidth(child.props, windowSize);
      return /*#__PURE__*/(0, _react.cloneElement)(child, {
        colsize: "calc((100% - ".concat(horizontalGaps[index], "px) * ").concat(colWidth, " / 12)"),
        marginbottom: verticalGaps[index],
        key: index
      });
    }
    return child;
  }));
};
var _default = Row; // Language: javascript
// # style: Add inline styles to the element
// # className, add one or more class names to the element
// # children: Rendered children
exports.default = _default;