"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/material-react-table";
exports.ids = ["vendor-chunks/material-react-table"];
exports.modules = {

/***/ "(ssr)/./node_modules/material-react-table/dist/index.esm.js":
/*!*************************************************************!*\
  !*** ./node_modules/material-react-table/dist/index.esm.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MRT_AggregationFns: () => (/* binding */ MRT_AggregationFns),\n/* harmony export */   MRT_BottomToolbar: () => (/* binding */ MRT_BottomToolbar),\n/* harmony export */   MRT_ColumnActionMenu: () => (/* binding */ MRT_ColumnActionMenu),\n/* harmony export */   MRT_ColumnPinningButtons: () => (/* binding */ MRT_ColumnPinningButtons),\n/* harmony export */   MRT_CopyButton: () => (/* binding */ MRT_CopyButton),\n/* harmony export */   MRT_DefaultColumn: () => (/* binding */ MRT_DefaultColumn),\n/* harmony export */   MRT_DefaultDisplayColumn: () => (/* binding */ MRT_DefaultDisplayColumn),\n/* harmony export */   MRT_EditActionButtons: () => (/* binding */ MRT_EditActionButtons),\n/* harmony export */   MRT_EditCellTextField: () => (/* binding */ MRT_EditCellTextField),\n/* harmony export */   MRT_EditRowModal: () => (/* binding */ MRT_EditRowModal),\n/* harmony export */   MRT_ExpandAllButton: () => (/* binding */ MRT_ExpandAllButton),\n/* harmony export */   MRT_ExpandButton: () => (/* binding */ MRT_ExpandButton),\n/* harmony export */   MRT_FilterCheckbox: () => (/* binding */ MRT_FilterCheckbox),\n/* harmony export */   MRT_FilterFns: () => (/* binding */ MRT_FilterFns),\n/* harmony export */   MRT_FilterOptionMenu: () => (/* binding */ MRT_FilterOptionMenu),\n/* harmony export */   MRT_FilterRangeFields: () => (/* binding */ MRT_FilterRangeFields),\n/* harmony export */   MRT_FilterRangeSlider: () => (/* binding */ MRT_FilterRangeSlider),\n/* harmony export */   MRT_FilterTextField: () => (/* binding */ MRT_FilterTextField),\n/* harmony export */   MRT_GlobalFilterTextField: () => (/* binding */ MRT_GlobalFilterTextField),\n/* harmony export */   MRT_GrabHandleButton: () => (/* binding */ MRT_GrabHandleButton),\n/* harmony export */   MRT_LinearProgressBar: () => (/* binding */ MRT_LinearProgressBar),\n/* harmony export */   MRT_RowActionMenu: () => (/* binding */ MRT_RowActionMenu),\n/* harmony export */   MRT_RowPinButton: () => (/* binding */ MRT_RowPinButton),\n/* harmony export */   MRT_SelectCheckbox: () => (/* binding */ MRT_SelectCheckbox),\n/* harmony export */   MRT_ShowHideColumnsButton: () => (/* binding */ MRT_ShowHideColumnsButton),\n/* harmony export */   MRT_ShowHideColumnsMenu: () => (/* binding */ MRT_ShowHideColumnsMenu),\n/* harmony export */   MRT_ShowHideColumnsMenuItems: () => (/* binding */ MRT_ShowHideColumnsMenuItems),\n/* harmony export */   MRT_SortingFns: () => (/* binding */ MRT_SortingFns),\n/* harmony export */   MRT_Table: () => (/* binding */ MRT_Table),\n/* harmony export */   MRT_TableBody: () => (/* binding */ MRT_TableBody),\n/* harmony export */   MRT_TableBodyCell: () => (/* binding */ MRT_TableBodyCell),\n/* harmony export */   MRT_TableBodyCellValue: () => (/* binding */ MRT_TableBodyCellValue),\n/* harmony export */   MRT_TableBodyRow: () => (/* binding */ MRT_TableBodyRow),\n/* harmony export */   MRT_TableBodyRowGrabHandle: () => (/* binding */ MRT_TableBodyRowGrabHandle),\n/* harmony export */   MRT_TableBodyRowPinButton: () => (/* binding */ MRT_TableBodyRowPinButton),\n/* harmony export */   MRT_TableContainer: () => (/* binding */ MRT_TableContainer),\n/* harmony export */   MRT_TableDetailPanel: () => (/* binding */ MRT_TableDetailPanel),\n/* harmony export */   MRT_TableFooter: () => (/* binding */ MRT_TableFooter),\n/* harmony export */   MRT_TableFooterCell: () => (/* binding */ MRT_TableFooterCell),\n/* harmony export */   MRT_TableFooterRow: () => (/* binding */ MRT_TableFooterRow),\n/* harmony export */   MRT_TableHead: () => (/* binding */ MRT_TableHead),\n/* harmony export */   MRT_TableHeadCell: () => (/* binding */ MRT_TableHeadCell),\n/* harmony export */   MRT_TableHeadCellColumnActionsButton: () => (/* binding */ MRT_TableHeadCellColumnActionsButton),\n/* harmony export */   MRT_TableHeadCellFilterContainer: () => (/* binding */ MRT_TableHeadCellFilterContainer),\n/* harmony export */   MRT_TableHeadCellFilterLabel: () => (/* binding */ MRT_TableHeadCellFilterLabel),\n/* harmony export */   MRT_TableHeadCellGrabHandle: () => (/* binding */ MRT_TableHeadCellGrabHandle),\n/* harmony export */   MRT_TableHeadCellResizeHandle: () => (/* binding */ MRT_TableHeadCellResizeHandle),\n/* harmony export */   MRT_TableHeadCellSortLabel: () => (/* binding */ MRT_TableHeadCellSortLabel),\n/* harmony export */   MRT_TableHeadRow: () => (/* binding */ MRT_TableHeadRow),\n/* harmony export */   MRT_TableLoadingOverlay: () => (/* binding */ MRT_TableLoadingOverlay),\n/* harmony export */   MRT_TablePagination: () => (/* binding */ MRT_TablePagination),\n/* harmony export */   MRT_TablePaper: () => (/* binding */ MRT_TablePaper),\n/* harmony export */   MRT_ToggleDensePaddingButton: () => (/* binding */ MRT_ToggleDensePaddingButton),\n/* harmony export */   MRT_ToggleFiltersButton: () => (/* binding */ MRT_ToggleFiltersButton),\n/* harmony export */   MRT_ToggleFullScreenButton: () => (/* binding */ MRT_ToggleFullScreenButton),\n/* harmony export */   MRT_ToggleGlobalFilterButton: () => (/* binding */ MRT_ToggleGlobalFilterButton),\n/* harmony export */   MRT_ToggleRowActionMenuButton: () => (/* binding */ MRT_ToggleRowActionMenuButton),\n/* harmony export */   MRT_ToolbarAlertBanner: () => (/* binding */ MRT_ToolbarAlertBanner),\n/* harmony export */   MRT_ToolbarDropZone: () => (/* binding */ MRT_ToolbarDropZone),\n/* harmony export */   MRT_ToolbarInternalButtons: () => (/* binding */ MRT_ToolbarInternalButtons),\n/* harmony export */   MRT_TopToolbar: () => (/* binding */ MRT_TopToolbar),\n/* harmony export */   MaterialReactTable: () => (/* binding */ MaterialReactTable),\n/* harmony export */   Memo_MRT_TableBody: () => (/* binding */ Memo_MRT_TableBody),\n/* harmony export */   Memo_MRT_TableBodyCell: () => (/* binding */ Memo_MRT_TableBodyCell),\n/* harmony export */   Memo_MRT_TableBodyRow: () => (/* binding */ Memo_MRT_TableBodyRow),\n/* harmony export */   commonListItemStyles: () => (/* binding */ commonListItemStyles),\n/* harmony export */   commonMenuItemStyles: () => (/* binding */ commonMenuItemStyles),\n/* harmony export */   createMRTColumnHelper: () => (/* binding */ createMRTColumnHelper),\n/* harmony export */   createRow: () => (/* binding */ createRow),\n/* harmony export */   extraIndexRangeExtractor: () => (/* binding */ extraIndexRangeExtractor),\n/* harmony export */   flexRender: () => (/* binding */ flexRender),\n/* harmony export */   getAllLeafColumnDefs: () => (/* binding */ getAllLeafColumnDefs),\n/* harmony export */   getCanRankRows: () => (/* binding */ getCanRankRows),\n/* harmony export */   getColumnId: () => (/* binding */ getColumnId),\n/* harmony export */   getCommonMRTCellStyles: () => (/* binding */ getCommonMRTCellStyles),\n/* harmony export */   getCommonToolbarStyles: () => (/* binding */ getCommonToolbarStyles),\n/* harmony export */   getDefaultColumnFilterFn: () => (/* binding */ getDefaultColumnFilterFn),\n/* harmony export */   getDefaultColumnOrderIds: () => (/* binding */ getDefaultColumnOrderIds),\n/* harmony export */   getIsFirstColumn: () => (/* binding */ getIsFirstColumn),\n/* harmony export */   getIsFirstRightPinnedColumn: () => (/* binding */ getIsFirstRightPinnedColumn),\n/* harmony export */   getIsLastColumn: () => (/* binding */ getIsLastColumn),\n/* harmony export */   getIsLastLeftPinnedColumn: () => (/* binding */ getIsLastLeftPinnedColumn),\n/* harmony export */   getLeadingDisplayColumnIds: () => (/* binding */ getLeadingDisplayColumnIds),\n/* harmony export */   getMRTTheme: () => (/* binding */ getMRTTheme),\n/* harmony export */   getTotalRight: () => (/* binding */ getTotalRight),\n/* harmony export */   getTrailingDisplayColumnIds: () => (/* binding */ getTrailingDisplayColumnIds),\n/* harmony export */   getValueAndLabel: () => (/* binding */ getValueAndLabel),\n/* harmony export */   mrtFilterOptions: () => (/* binding */ mrtFilterOptions),\n/* harmony export */   parseCSSVarId: () => (/* binding */ parseCSSVarId),\n/* harmony export */   parseFromValuesOrFunc: () => (/* binding */ parseFromValuesOrFunc),\n/* harmony export */   prepareColumns: () => (/* binding */ prepareColumns),\n/* harmony export */   rankGlobalFuzzy: () => (/* binding */ rankGlobalFuzzy),\n/* harmony export */   reorderColumn: () => (/* binding */ reorderColumn),\n/* harmony export */   showExpandColumn: () => (/* binding */ showExpandColumn),\n/* harmony export */   useMRT_DisplayColumns: () => (/* binding */ useMRT_DisplayColumns),\n/* harmony export */   useMRT_Effects: () => (/* binding */ useMRT_Effects),\n/* harmony export */   useMRT_TableInstance: () => (/* binding */ useMRT_TableInstance),\n/* harmony export */   useMRT_TableOptions: () => (/* binding */ useMRT_TableOptions),\n/* harmony export */   useMaterialReactTable: () => (/* binding */ useMaterialReactTable)\n/* harmony export */ });\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _mui_material_Paper__WEBPACK_IMPORTED_MODULE_59__ = __webpack_require__(/*! @mui/material/Paper */ \"(ssr)/./node_modules/@mui/material/Paper/Paper.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _mui_material_TableContainer__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__(/*! @mui/material/TableContainer */ \"(ssr)/./node_modules/@mui/material/TableContainer/TableContainer.js\");\n/* harmony import */ var _tanstack_react_virtual__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @tanstack/react-virtual */ \"(ssr)/./node_modules/@tanstack/virtual-core/build/lib/index.mjs\");\n/* harmony import */ var _tanstack_react_virtual__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @tanstack/react-virtual */ \"(ssr)/./node_modules/@tanstack/react-virtual/build/lib/index.mjs\");\n/* harmony import */ var _mui_material_Table__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! @mui/material/Table */ \"(ssr)/./node_modules/@mui/material/Table/Table.js\");\n/* harmony import */ var _mui_material_TableBody__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @mui/material/TableBody */ \"(ssr)/./node_modules/@mui/material/TableBody/TableBody.js\");\n/* harmony import */ var _mui_material_Typography__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @mui/material/Typography */ \"(ssr)/./node_modules/@mui/material/Typography/Typography.js\");\n/* harmony import */ var _mui_material_TableRow__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @mui/material/TableRow */ \"(ssr)/./node_modules/@mui/material/TableRow/TableRow.js\");\n/* harmony import */ var _mui_material_styles__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! __barrel_optimize__?names=alpha,useTheme!=!@mui/material */ \"(ssr)/./node_modules/@mui/system/esm/colorManipulator.js\");\n/* harmony import */ var _mui_material_styles__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! __barrel_optimize__?names=alpha,useTheme!=!@mui/material */ \"(ssr)/./node_modules/@mui/material/styles/useTheme.js\");\n/* harmony import */ var _mui_material_Skeleton__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @mui/material/Skeleton */ \"(ssr)/./node_modules/@mui/material/Skeleton/Skeleton.js\");\n/* harmony import */ var _mui_material_TableCell__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @mui/material/TableCell */ \"(ssr)/./node_modules/@mui/material/TableCell/TableCell.js\");\n/* harmony import */ var _mui_material_Box__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @mui/material/Box */ \"(ssr)/./node_modules/@mui/material/Box/Box.js\");\n/* harmony import */ var _tanstack_react_table__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @tanstack/react-table */ \"(ssr)/./node_modules/@tanstack/react-table/build/lib/index.mjs\");\n/* harmony import */ var _tanstack_react_table__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @tanstack/react-table */ \"(ssr)/./node_modules/@tanstack/table-core/build/lib/index.mjs\");\n/* harmony import */ var highlight_words__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! highlight-words */ \"(ssr)/./node_modules/highlight-words/dist/highlight-words.mjs\");\n/* harmony import */ var _mui_material_IconButton__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @mui/material/IconButton */ \"(ssr)/./node_modules/@mui/material/IconButton/IconButton.js\");\n/* harmony import */ var _mui_material_Tooltip__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @mui/material/Tooltip */ \"(ssr)/./node_modules/@mui/material/Tooltip/Tooltip.js\");\n/* harmony import */ var _mui_material_Button__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @mui/material/Button */ \"(ssr)/./node_modules/@mui/material/Button/Button.js\");\n/* harmony import */ var _mui_material_MenuItem__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @mui/material/MenuItem */ \"(ssr)/./node_modules/@mui/material/MenuItem/MenuItem.js\");\n/* harmony import */ var _mui_material_TextField__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @mui/material/TextField */ \"(ssr)/./node_modules/@mui/material/TextField/TextField.js\");\n/* harmony import */ var _mui_material_Collapse__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @mui/material/Collapse */ \"(ssr)/./node_modules/@mui/material/Collapse/Collapse.js\");\n/* harmony import */ var _tanstack_match_sorter_utils__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @tanstack/match-sorter-utils */ \"(ssr)/./node_modules/@tanstack/match-sorter-utils/build/lib/index.mjs\");\n/* harmony import */ var _mui_material_TableFooter__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @mui/material/TableFooter */ \"(ssr)/./node_modules/@mui/material/TableFooter/TableFooter.js\");\n/* harmony import */ var _mui_material_TableHead__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! @mui/material/TableHead */ \"(ssr)/./node_modules/@mui/material/TableHead/TableHead.js\");\n/* harmony import */ var _mui_material_ListItemIcon__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! @mui/material/ListItemIcon */ \"(ssr)/./node_modules/@mui/material/ListItemIcon/ListItemIcon.js\");\n/* harmony import */ var _mui_material_Menu__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! @mui/material/Menu */ \"(ssr)/./node_modules/@mui/material/Menu/Menu.js\");\n/* harmony import */ var _mui_material_Checkbox__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! @mui/material/Checkbox */ \"(ssr)/./node_modules/@mui/material/Checkbox/Checkbox.js\");\n/* harmony import */ var _mui_material_FormControlLabel__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! @mui/material/FormControlLabel */ \"(ssr)/./node_modules/@mui/material/FormControlLabel/FormControlLabel.js\");\n/* harmony import */ var _mui_material_Autocomplete__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! @mui/material/Autocomplete */ \"(ssr)/./node_modules/@mui/material/Autocomplete/Autocomplete.js\");\n/* harmony import */ var _mui_material_Chip__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! @mui/material/Chip */ \"(ssr)/./node_modules/@mui/material/Chip/Chip.js\");\n/* harmony import */ var _mui_material_InputAdornment__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! @mui/material/InputAdornment */ \"(ssr)/./node_modules/@mui/material/InputAdornment/InputAdornment.js\");\n/* harmony import */ var _mui_material_utils__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! @mui/material/utils */ \"(ssr)/./node_modules/@mui/material/utils/debounce.js\");\n/* harmony import */ var _mui_x_date_pickers_DatePicker__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! @mui/x-date-pickers/DatePicker */ \"(ssr)/./node_modules/@mui/x-date-pickers/DatePicker/DatePicker.js\");\n/* harmony import */ var _mui_material_FormHelperText__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! @mui/material/FormHelperText */ \"(ssr)/./node_modules/@mui/material/FormHelperText/FormHelperText.js\");\n/* harmony import */ var _mui_material_Slider__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! @mui/material/Slider */ \"(ssr)/./node_modules/@mui/material/Slider/Slider.js\");\n/* harmony import */ var _mui_material_Stack__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! @mui/material/Stack */ \"(ssr)/./node_modules/@mui/material/Stack/Stack.js\");\n/* harmony import */ var _mui_material_Grow__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! @mui/material/Grow */ \"(ssr)/./node_modules/@mui/material/Grow/Grow.js\");\n/* harmony import */ var _mui_material_Popover__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! @mui/material/Popover */ \"(ssr)/./node_modules/@mui/material/Popover/Popover.js\");\n/* harmony import */ var _mui_material_Divider__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! @mui/material/Divider */ \"(ssr)/./node_modules/@mui/material/Divider/Divider.js\");\n/* harmony import */ var _mui_material_Badge__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! @mui/material/Badge */ \"(ssr)/./node_modules/@mui/material/Badge/Badge.js\");\n/* harmony import */ var _mui_material_TableSortLabel__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! @mui/material/TableSortLabel */ \"(ssr)/./node_modules/@mui/material/TableSortLabel/TableSortLabel.js\");\n/* harmony import */ var _mui_material_useMediaQuery__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! @mui/material/useMediaQuery */ \"(ssr)/./node_modules/@mui/material/useMediaQuery/useMediaQuery.js\");\n/* harmony import */ var _mui_material_LinearProgress__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! @mui/material/LinearProgress */ \"(ssr)/./node_modules/@mui/material/LinearProgress/LinearProgress.js\");\n/* harmony import */ var _mui_material_InputLabel__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! @mui/material/InputLabel */ \"(ssr)/./node_modules/@mui/material/InputLabel/InputLabel.js\");\n/* harmony import */ var _mui_material_Pagination__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! @mui/material/Pagination */ \"(ssr)/./node_modules/@mui/material/Pagination/Pagination.js\");\n/* harmony import */ var _mui_material_PaginationItem__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! @mui/material/PaginationItem */ \"(ssr)/./node_modules/@mui/material/PaginationItem/PaginationItem.js\");\n/* harmony import */ var _mui_material_Select__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! @mui/material/Select */ \"(ssr)/./node_modules/@mui/material/Select/Select.js\");\n/* harmony import */ var _mui_material_Alert__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! @mui/material/Alert */ \"(ssr)/./node_modules/@mui/material/Alert/Alert.js\");\n/* harmony import */ var _mui_material_AlertTitle__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! @mui/material/AlertTitle */ \"(ssr)/./node_modules/@mui/material/AlertTitle/AlertTitle.js\");\n/* harmony import */ var _mui_material_Radio__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! @mui/material/Radio */ \"(ssr)/./node_modules/@mui/material/Radio/Radio.js\");\n/* harmony import */ var _mui_material_Fade__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! @mui/material/Fade */ \"(ssr)/./node_modules/@mui/material/Fade/Fade.js\");\n/* harmony import */ var _mui_material_Switch__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! @mui/material/Switch */ \"(ssr)/./node_modules/@mui/material/Switch/Switch.js\");\n/* harmony import */ var _mui_material_CircularProgress__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(/*! @mui/material/CircularProgress */ \"(ssr)/./node_modules/@mui/material/CircularProgress/CircularProgress.js\");\n/* harmony import */ var _mui_material_Dialog__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(/*! @mui/material/Dialog */ \"(ssr)/./node_modules/@mui/material/Dialog/Dialog.js\");\n/* harmony import */ var _mui_material_DialogActions__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(/*! @mui/material/DialogActions */ \"(ssr)/./node_modules/@mui/material/DialogActions/DialogActions.js\");\n/* harmony import */ var _mui_material_DialogContent__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(/*! @mui/material/DialogContent */ \"(ssr)/./node_modules/@mui/material/DialogContent/DialogContent.js\");\n/* harmony import */ var _mui_material_DialogTitle__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(/*! @mui/material/DialogTitle */ \"(ssr)/./node_modules/@mui/material/DialogTitle/DialogTitle.js\");\n/* harmony import */ var _mui_icons_material_ArrowDownward__WEBPACK_IMPORTED_MODULE_60__ = __webpack_require__(/*! @mui/icons-material/ArrowDownward */ \"(ssr)/./node_modules/@mui/icons-material/ArrowDownward.js\");\n/* harmony import */ var _mui_icons_material_ArrowRight__WEBPACK_IMPORTED_MODULE_61__ = __webpack_require__(/*! @mui/icons-material/ArrowRight */ \"(ssr)/./node_modules/@mui/icons-material/ArrowRight.js\");\n/* harmony import */ var _mui_icons_material_Cancel__WEBPACK_IMPORTED_MODULE_62__ = __webpack_require__(/*! @mui/icons-material/Cancel */ \"(ssr)/./node_modules/@mui/icons-material/Cancel.js\");\n/* harmony import */ var _mui_icons_material_ChevronLeft__WEBPACK_IMPORTED_MODULE_63__ = __webpack_require__(/*! @mui/icons-material/ChevronLeft */ \"(ssr)/./node_modules/@mui/icons-material/ChevronLeft.js\");\n/* harmony import */ var _mui_icons_material_ChevronRight__WEBPACK_IMPORTED_MODULE_64__ = __webpack_require__(/*! @mui/icons-material/ChevronRight */ \"(ssr)/./node_modules/@mui/icons-material/ChevronRight.js\");\n/* harmony import */ var _mui_icons_material_ClearAll__WEBPACK_IMPORTED_MODULE_65__ = __webpack_require__(/*! @mui/icons-material/ClearAll */ \"(ssr)/./node_modules/@mui/icons-material/ClearAll.js\");\n/* harmony import */ var _mui_icons_material_Close__WEBPACK_IMPORTED_MODULE_66__ = __webpack_require__(/*! @mui/icons-material/Close */ \"(ssr)/./node_modules/@mui/icons-material/Close.js\");\n/* harmony import */ var _mui_icons_material_DensityLarge__WEBPACK_IMPORTED_MODULE_67__ = __webpack_require__(/*! @mui/icons-material/DensityLarge */ \"(ssr)/./node_modules/@mui/icons-material/DensityLarge.js\");\n/* harmony import */ var _mui_icons_material_DensityMedium__WEBPACK_IMPORTED_MODULE_68__ = __webpack_require__(/*! @mui/icons-material/DensityMedium */ \"(ssr)/./node_modules/@mui/icons-material/DensityMedium.js\");\n/* harmony import */ var _mui_icons_material_DensitySmall__WEBPACK_IMPORTED_MODULE_69__ = __webpack_require__(/*! @mui/icons-material/DensitySmall */ \"(ssr)/./node_modules/@mui/icons-material/DensitySmall.js\");\n/* harmony import */ var _mui_icons_material_DragHandle__WEBPACK_IMPORTED_MODULE_70__ = __webpack_require__(/*! @mui/icons-material/DragHandle */ \"(ssr)/./node_modules/@mui/icons-material/DragHandle.js\");\n/* harmony import */ var _mui_icons_material_DynamicFeed__WEBPACK_IMPORTED_MODULE_71__ = __webpack_require__(/*! @mui/icons-material/DynamicFeed */ \"(ssr)/./node_modules/@mui/icons-material/DynamicFeed.js\");\n/* harmony import */ var _mui_icons_material_Edit__WEBPACK_IMPORTED_MODULE_72__ = __webpack_require__(/*! @mui/icons-material/Edit */ \"(ssr)/./node_modules/@mui/icons-material/Edit.js\");\n/* harmony import */ var _mui_icons_material_ExpandMore__WEBPACK_IMPORTED_MODULE_73__ = __webpack_require__(/*! @mui/icons-material/ExpandMore */ \"(ssr)/./node_modules/@mui/icons-material/ExpandMore.js\");\n/* harmony import */ var _mui_icons_material_FilterAlt__WEBPACK_IMPORTED_MODULE_74__ = __webpack_require__(/*! @mui/icons-material/FilterAlt */ \"(ssr)/./node_modules/@mui/icons-material/FilterAlt.js\");\n/* harmony import */ var _mui_icons_material_FilterList__WEBPACK_IMPORTED_MODULE_75__ = __webpack_require__(/*! @mui/icons-material/FilterList */ \"(ssr)/./node_modules/@mui/icons-material/FilterList.js\");\n/* harmony import */ var _mui_icons_material_FilterListOff__WEBPACK_IMPORTED_MODULE_76__ = __webpack_require__(/*! @mui/icons-material/FilterListOff */ \"(ssr)/./node_modules/@mui/icons-material/FilterListOff.js\");\n/* harmony import */ var _mui_icons_material_FirstPage__WEBPACK_IMPORTED_MODULE_77__ = __webpack_require__(/*! @mui/icons-material/FirstPage */ \"(ssr)/./node_modules/@mui/icons-material/FirstPage.js\");\n/* harmony import */ var _mui_icons_material_Fullscreen__WEBPACK_IMPORTED_MODULE_79__ = __webpack_require__(/*! @mui/icons-material/Fullscreen */ \"(ssr)/./node_modules/@mui/icons-material/Fullscreen.js\");\n/* harmony import */ var _mui_icons_material_FullscreenExit__WEBPACK_IMPORTED_MODULE_78__ = __webpack_require__(/*! @mui/icons-material/FullscreenExit */ \"(ssr)/./node_modules/@mui/icons-material/FullscreenExit.js\");\n/* harmony import */ var _mui_icons_material_KeyboardDoubleArrowDown__WEBPACK_IMPORTED_MODULE_80__ = __webpack_require__(/*! @mui/icons-material/KeyboardDoubleArrowDown */ \"(ssr)/./node_modules/@mui/icons-material/KeyboardDoubleArrowDown.js\");\n/* harmony import */ var _mui_icons_material_LastPage__WEBPACK_IMPORTED_MODULE_81__ = __webpack_require__(/*! @mui/icons-material/LastPage */ \"(ssr)/./node_modules/@mui/icons-material/LastPage.js\");\n/* harmony import */ var _mui_icons_material_MoreHoriz__WEBPACK_IMPORTED_MODULE_82__ = __webpack_require__(/*! @mui/icons-material/MoreHoriz */ \"(ssr)/./node_modules/@mui/icons-material/MoreHoriz.js\");\n/* harmony import */ var _mui_icons_material_MoreVert__WEBPACK_IMPORTED_MODULE_83__ = __webpack_require__(/*! @mui/icons-material/MoreVert */ \"(ssr)/./node_modules/@mui/icons-material/MoreVert.js\");\n/* harmony import */ var _mui_icons_material_PushPin__WEBPACK_IMPORTED_MODULE_84__ = __webpack_require__(/*! @mui/icons-material/PushPin */ \"(ssr)/./node_modules/@mui/icons-material/PushPin.js\");\n/* harmony import */ var _mui_icons_material_RestartAlt__WEBPACK_IMPORTED_MODULE_85__ = __webpack_require__(/*! @mui/icons-material/RestartAlt */ \"(ssr)/./node_modules/@mui/icons-material/RestartAlt.js\");\n/* harmony import */ var _mui_icons_material_Save__WEBPACK_IMPORTED_MODULE_86__ = __webpack_require__(/*! @mui/icons-material/Save */ \"(ssr)/./node_modules/@mui/icons-material/Save.js\");\n/* harmony import */ var _mui_icons_material_Search__WEBPACK_IMPORTED_MODULE_87__ = __webpack_require__(/*! @mui/icons-material/Search */ \"(ssr)/./node_modules/@mui/icons-material/Search.js\");\n/* harmony import */ var _mui_icons_material_SearchOff__WEBPACK_IMPORTED_MODULE_88__ = __webpack_require__(/*! @mui/icons-material/SearchOff */ \"(ssr)/./node_modules/@mui/icons-material/SearchOff.js\");\n/* harmony import */ var _mui_icons_material_Sort__WEBPACK_IMPORTED_MODULE_89__ = __webpack_require__(/*! @mui/icons-material/Sort */ \"(ssr)/./node_modules/@mui/icons-material/Sort.js\");\n/* harmony import */ var _mui_icons_material_SyncAlt__WEBPACK_IMPORTED_MODULE_90__ = __webpack_require__(/*! @mui/icons-material/SyncAlt */ \"(ssr)/./node_modules/@mui/icons-material/SyncAlt.js\");\n/* harmony import */ var _mui_icons_material_ViewColumn__WEBPACK_IMPORTED_MODULE_91__ = __webpack_require__(/*! @mui/icons-material/ViewColumn */ \"(ssr)/./node_modules/@mui/icons-material/ViewColumn.js\");\n/* harmony import */ var _mui_icons_material_VisibilityOff__WEBPACK_IMPORTED_MODULE_92__ = __webpack_require__(/*! @mui/icons-material/VisibilityOff */ \"(ssr)/./node_modules/@mui/icons-material/VisibilityOff.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */ function __rest(s, e) {\n    var t = {};\n    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++){\n        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n    }\n    return t;\n}\ntypeof SuppressedError === \"function\" ? SuppressedError : function(error, suppressed, message) {\n    var e = new Error(message);\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\nconst getColumnId = (columnDef)=>{\n    var _a, _b, _c, _d;\n    return (_d = (_a = columnDef.id) !== null && _a !== void 0 ? _a : (_c = (_b = columnDef.accessorKey) === null || _b === void 0 ? void 0 : _b.toString) === null || _c === void 0 ? void 0 : _c.call(_b)) !== null && _d !== void 0 ? _d : columnDef.header;\n};\nconst getAllLeafColumnDefs = (columns)=>{\n    const allLeafColumnDefs = [];\n    const getLeafColumns = (cols)=>{\n        cols.forEach((col)=>{\n            if (col.columns) {\n                getLeafColumns(col.columns);\n            } else {\n                allLeafColumnDefs.push(col);\n            }\n        });\n    };\n    getLeafColumns(columns);\n    return allLeafColumnDefs;\n};\nconst prepareColumns = ({ aggregationFns, columnDefs, columnFilterFns, defaultDisplayColumn, filterFns, sortingFns })=>columnDefs.map((columnDef)=>{\n        var _a, _b;\n        //assign columnId\n        if (!columnDef.id) columnDef.id = getColumnId(columnDef);\n        if ( true && !columnDef.id) {\n            console.error(\"Column definitions must have a valid `accessorKey` or `id` property\");\n        }\n        //assign columnDefType\n        if (!columnDef.columnDefType) columnDef.columnDefType = \"data\";\n        if ((_a = columnDef.columns) === null || _a === void 0 ? void 0 : _a.length) {\n            columnDef.columnDefType = \"group\";\n            //recursively prepare columns if this is a group column\n            columnDef.columns = prepareColumns({\n                aggregationFns,\n                columnDefs: columnDef.columns,\n                columnFilterFns,\n                defaultDisplayColumn,\n                filterFns,\n                sortingFns\n            });\n        } else if (columnDef.columnDefType === \"data\") {\n            //assign aggregationFns if multiple aggregationFns are provided\n            if (Array.isArray(columnDef.aggregationFn)) {\n                const aggFns = columnDef.aggregationFn;\n                columnDef.aggregationFn = (columnId, leafRows, childRows)=>aggFns.map((fn)=>{\n                        var _a;\n                        return (_a = aggregationFns[fn]) === null || _a === void 0 ? void 0 : _a.call(aggregationFns, columnId, leafRows, childRows);\n                    });\n            }\n            //assign filterFns\n            if (Object.keys(filterFns).includes(columnFilterFns[columnDef.id])) {\n                columnDef.filterFn = (_b = filterFns[columnFilterFns[columnDef.id]]) !== null && _b !== void 0 ? _b : filterFns.fuzzy;\n                columnDef._filterFn = columnFilterFns[columnDef.id];\n            }\n            //assign sortingFns\n            if (Object.keys(sortingFns).includes(columnDef.sortingFn)) {\n                // @ts-ignore\n                columnDef.sortingFn = sortingFns[columnDef.sortingFn];\n            }\n        } else if (columnDef.columnDefType === \"display\") {\n            columnDef = Object.assign(Object.assign({}, defaultDisplayColumn), columnDef);\n        }\n        return columnDef;\n    });\nconst reorderColumn = (draggedColumn, targetColumn, columnOrder)=>{\n    if (draggedColumn.getCanPin()) {\n        draggedColumn.pin(targetColumn.getIsPinned());\n    }\n    const newColumnOrder = [\n        ...columnOrder\n    ];\n    newColumnOrder.splice(newColumnOrder.indexOf(targetColumn.id), 0, newColumnOrder.splice(newColumnOrder.indexOf(draggedColumn.id), 1)[0]);\n    return newColumnOrder;\n};\nconst showExpandColumn = (props, grouping)=>!!(props.enableExpanding || props.enableGrouping && (grouping === undefined || (grouping === null || grouping === void 0 ? void 0 : grouping.length)) || props.renderDetailPanel);\nconst getLeadingDisplayColumnIds = (props)=>{\n    var _a, _b;\n    return [\n        props.enableRowPinning && !((_a = props.rowPinningDisplayMode) === null || _a === void 0 ? void 0 : _a.startsWith(\"select\")) && \"mrt-row-pin\",\n        (props.enableRowDragging || props.enableRowOrdering) && \"mrt-row-drag\",\n        props.positionActionsColumn === \"first\" && (props.enableRowActions || props.enableEditing && [\n            \"modal\",\n            \"row\"\n        ].includes((_b = props.editDisplayMode) !== null && _b !== void 0 ? _b : \"\")) && \"mrt-row-actions\",\n        props.positionExpandColumn === \"first\" && showExpandColumn(props) && \"mrt-row-expand\",\n        props.enableRowSelection && \"mrt-row-select\",\n        props.enableRowNumbers && \"mrt-row-numbers\"\n    ].filter(Boolean);\n};\nconst getTrailingDisplayColumnIds = (props)=>{\n    var _a;\n    return [\n        props.positionActionsColumn === \"last\" && (props.enableRowActions || props.enableEditing && [\n            \"modal\",\n            \"row\"\n        ].includes((_a = props.editDisplayMode) !== null && _a !== void 0 ? _a : \"\")) && \"mrt-row-actions\",\n        props.positionExpandColumn === \"last\" && showExpandColumn(props) && \"mrt-row-expand\",\n        props.layoutMode === \"grid-no-grow\" && \"mrt-row-spacer\"\n    ].filter(Boolean);\n};\nconst getDefaultColumnOrderIds = (props)=>{\n    const leadingDisplayCols = getLeadingDisplayColumnIds(props);\n    const trailingDisplayCols = getTrailingDisplayColumnIds(props);\n    const allLeafColumnDefs = getAllLeafColumnDefs(props.columns).map((columnDef)=>getColumnId(columnDef)).filter((columnId)=>!leadingDisplayCols.includes(columnId) && !trailingDisplayCols.includes(columnId));\n    return [\n        ...leadingDisplayCols,\n        ...allLeafColumnDefs,\n        ...trailingDisplayCols\n    ];\n};\nconst getDefaultColumnFilterFn = (columnDef)=>{\n    var _a;\n    if (columnDef.filterVariant === \"multi-select\") return \"arrIncludesSome\";\n    if ((_a = columnDef.filterVariant) === null || _a === void 0 ? void 0 : _a.includes(\"range\")) return \"betweenInclusive\";\n    if (columnDef.filterVariant === \"select\" || columnDef.filterVariant === \"checkbox\") return \"equals\";\n    return \"fuzzy\";\n};\nconst getIsFirstColumn = (column, table)=>{\n    const leftColumns = table.getLeftVisibleLeafColumns();\n    return leftColumns.length ? leftColumns[0].id === column.id : table.getVisibleLeafColumns()[0].id === column.id;\n};\nconst getIsLastColumn = (column, table)=>{\n    const rightColumns = table.getRightVisibleLeafColumns();\n    const columns = table.getVisibleLeafColumns();\n    return rightColumns.length ? rightColumns[rightColumns.length - 1].id === column.id : columns[columns.length - 1].id === column.id;\n};\nconst getIsLastLeftPinnedColumn = (table, column)=>{\n    return column.getIsPinned() === \"left\" && table.getLeftLeafHeaders().length - 1 === column.getPinnedIndex();\n};\nconst getIsFirstRightPinnedColumn = (column)=>{\n    return column.getIsPinned() === \"right\" && column.getPinnedIndex() === 0;\n};\nconst getTotalRight = (table, column)=>{\n    return table.getRightLeafHeaders().slice(column.getPinnedIndex() + 1).reduce((acc, col)=>acc + col.getSize(), 0);\n};\nconst getCanRankRows = (table)=>{\n    const { getState, options } = table;\n    const { enableGlobalFilterRankedResults, manualExpanding, manualFiltering, manualGrouping, manualSorting } = options;\n    const { expanded, globalFilterFn } = getState();\n    return !manualExpanding && !manualFiltering && !manualGrouping && !manualSorting && enableGlobalFilterRankedResults && globalFilterFn === \"fuzzy\" && expanded !== true && !Object.values(expanded).some(Boolean);\n};\nconst parseFromValuesOrFunc = (fn, arg)=>fn instanceof Function ? fn(arg) : fn;\nconst flexRender = _tanstack_react_table__WEBPACK_IMPORTED_MODULE_3__.flexRender;\nconst createRow = (table, originalRow)=>(0,_tanstack_react_table__WEBPACK_IMPORTED_MODULE_4__.createRow)(table, \"mrt-row-create\", originalRow !== null && originalRow !== void 0 ? originalRow : Object.assign({}, ...getAllLeafColumnDefs(table.options.columns).map((col)=>({\n            [getColumnId(col)]: \"\"\n        }))), -1, 0);\nconst extraIndexRangeExtractor = (range, draggingIndex)=>{\n    const newIndexes = (0,_tanstack_react_virtual__WEBPACK_IMPORTED_MODULE_5__.defaultRangeExtractor)(range);\n    if (draggingIndex >= 0 && draggingIndex < Math.max(range.startIndex - range.overscan, 0)) {\n        newIndexes.unshift(draggingIndex);\n    }\n    if (draggingIndex >= 0 && draggingIndex > range.endIndex + range.overscan) {\n        newIndexes.push(draggingIndex);\n    }\n    return newIndexes;\n};\nfunction createMRTColumnHelper() {\n    return {\n        accessor: (accessor, column)=>{\n            return typeof accessor === \"function\" ? Object.assign(Object.assign({}, column), {\n                accessorFn: accessor\n            }) : Object.assign(Object.assign({}, column), {\n                accessorKey: accessor\n            });\n        },\n        display: (column)=>column,\n        group: (column)=>column\n    };\n}\nconst getValueAndLabel = (option)=>{\n    var _a, _b, _c;\n    let label = \"\";\n    let value = \"\";\n    if (option) {\n        if (typeof option !== \"object\") {\n            label = option;\n            value = option;\n        } else {\n            label = (_b = (_a = option.label) !== null && _a !== void 0 ? _a : option.text) !== null && _b !== void 0 ? _b : option.value;\n            value = (_c = option.value) !== null && _c !== void 0 ? _c : label;\n        }\n    }\n    return {\n        label,\n        value\n    };\n};\nconst parseCSSVarId = (id)=>id.replace(/[^a-zA-Z0-9]/g, \"_\");\nconst getMRTTheme = (table, theme)=>Object.assign({\n        baseBackgroundColor: theme.palette.mode === \"dark\" ? (0,_mui_material_styles__WEBPACK_IMPORTED_MODULE_6__.lighten)(theme.palette.background.default, 0.05) : theme.palette.background.default,\n        draggingBorderColor: theme.palette.primary.main,\n        matchHighlightColor: theme.palette.mode === \"dark\" ? (0,_mui_material_styles__WEBPACK_IMPORTED_MODULE_6__.darken)(theme.palette.warning.dark, 0.25) : (0,_mui_material_styles__WEBPACK_IMPORTED_MODULE_6__.lighten)(theme.palette.warning.light, 0.5),\n        pinnedRowBackgroundColor: (0,_mui_material_styles__WEBPACK_IMPORTED_MODULE_6__.alpha)(theme.palette.primary.main, 0.1),\n        selectedRowBackgroundColor: (0,_mui_material_styles__WEBPACK_IMPORTED_MODULE_6__.alpha)(theme.palette.primary.main, 0.2)\n    }, parseFromValuesOrFunc(table.options.mrtTheme, theme));\nconst getCommonMRTCellStyles = ({ column, header, table, tableCellProps, theme })=>{\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n    const { options: { layoutMode } } = table;\n    const widthStyles = {\n        minWidth: `max(calc(var(--${header ? \"header\" : \"col\"}-${parseCSSVarId((_a = header === null || header === void 0 ? void 0 : header.id) !== null && _a !== void 0 ? _a : column.id)}-size) * 1px), ${(_b = column.columnDef.minSize) !== null && _b !== void 0 ? _b : 30}px)`,\n        width: `calc(var(--${header ? \"header\" : \"col\"}-${parseCSSVarId((_c = header === null || header === void 0 ? void 0 : header.id) !== null && _c !== void 0 ? _c : column.id)}-size) * 1px)`\n    };\n    if (layoutMode === \"grid\") {\n        widthStyles.flex = `var(--${header ? \"header\" : \"col\"}-${parseCSSVarId((_d = header === null || header === void 0 ? void 0 : header.id) !== null && _d !== void 0 ? _d : column.id)}-size) 0 auto`;\n    } else if (layoutMode === \"grid-no-grow\") {\n        widthStyles.flex = \"0 0 auto\";\n    }\n    return Object.assign(Object.assign({\n        backgroundColor: column.getIsPinned() && column.columnDef.columnDefType !== \"group\" ? (0,_mui_material_styles__WEBPACK_IMPORTED_MODULE_6__.alpha)((0,_mui_material_styles__WEBPACK_IMPORTED_MODULE_6__.darken)(getMRTTheme(table, theme).baseBackgroundColor, theme.palette.mode === \"dark\" ? 0.05 : 0.01), 0.97) : \"inherit\",\n        backgroundImage: \"inherit\",\n        boxShadow: getIsLastLeftPinnedColumn(table, column) ? `-4px 0 8px -6px ${(0,_mui_material_styles__WEBPACK_IMPORTED_MODULE_6__.alpha)(theme.palette.grey[700], 0.5)} inset` : getIsFirstRightPinnedColumn(column) ? `4px 0 8px -6px ${(0,_mui_material_styles__WEBPACK_IMPORTED_MODULE_6__.alpha)(theme.palette.grey[700], 0.5)} inset` : undefined,\n        display: (layoutMode === null || layoutMode === void 0 ? void 0 : layoutMode.startsWith(\"grid\")) ? \"flex\" : undefined,\n        left: column.getIsPinned() === \"left\" ? `${column.getStart(\"left\")}px` : undefined,\n        ml: table.options.enableColumnVirtualization && column.getIsPinned() === \"left\" && column.getPinnedIndex() === 0 ? `-${column.getSize() * ((_f = (_e = table.getState().columnPinning.left) === null || _e === void 0 ? void 0 : _e.length) !== null && _f !== void 0 ? _f : 1)}px` : undefined,\n        mr: table.options.enableColumnVirtualization && column.getIsPinned() === \"right\" && column.getPinnedIndex() === table.getVisibleLeafColumns().length - 1 ? `-${column.getSize() * ((_h = (_g = table.getState().columnPinning.right) === null || _g === void 0 ? void 0 : _g.length) !== null && _h !== void 0 ? _h : 1) * 1.2}px` : undefined,\n        opacity: ((_j = table.getState().draggingColumn) === null || _j === void 0 ? void 0 : _j.id) === column.id || ((_k = table.getState().hoveredColumn) === null || _k === void 0 ? void 0 : _k.id) === column.id ? 0.5 : 1,\n        position: column.getIsPinned() && column.columnDef.columnDefType !== \"group\" ? \"sticky\" : undefined,\n        right: column.getIsPinned() === \"right\" ? `${getTotalRight(table, column)}px` : undefined,\n        transition: table.options.enableColumnVirtualization ? \"none\" : `padding 150ms ease-in-out`\n    }, widthStyles), parseFromValuesOrFunc(tableCellProps === null || tableCellProps === void 0 ? void 0 : tableCellProps.sx, theme));\n};\nconst getCommonToolbarStyles = ({ table, theme })=>({\n        alignItems: \"flex-start\",\n        backgroundColor: getMRTTheme(table, theme).baseBackgroundColor,\n        display: \"grid\",\n        flexWrap: \"wrap-reverse\",\n        minHeight: \"3.5rem\",\n        overflow: \"hidden\",\n        position: \"relative\",\n        transition: \"all 150ms ease-in-out\",\n        zIndex: 1\n    });\nconst allowedTypes = [\n    \"string\",\n    \"number\"\n];\nconst MRT_TableBodyCellValue = ({ cell, table })=>{\n    var _a, _b, _c;\n    const { getState, options: { enableFilterMatchHighlighting } } = table;\n    const { column, row } = cell;\n    const { columnDef } = column;\n    const { globalFilter, globalFilterFn } = getState();\n    const filterValue = column.getFilterValue();\n    let renderedCellValue = cell.getIsAggregated() && columnDef.AggregatedCell ? columnDef.AggregatedCell({\n        cell,\n        column,\n        row,\n        table\n    }) : row.getIsGrouped() && !cell.getIsGrouped() ? null : cell.getIsGrouped() && columnDef.GroupedCell ? columnDef.GroupedCell({\n        cell,\n        column,\n        row,\n        table\n    }) : undefined;\n    const isGroupedValue = renderedCellValue !== undefined;\n    if (!isGroupedValue) {\n        renderedCellValue = cell.renderValue();\n    }\n    if (enableFilterMatchHighlighting && columnDef.enableFilterMatchHighlighting !== false && String(renderedCellValue) && allowedTypes.includes(typeof renderedCellValue) && (filterValue && allowedTypes.includes(typeof filterValue) && [\n        \"autocomplete\",\n        \"text\"\n    ].includes(columnDef.filterVariant) || globalFilter && allowedTypes.includes(typeof globalFilter) && column.getCanGlobalFilter())) {\n        const chunks = highlight_words__WEBPACK_IMPORTED_MODULE_2__[\"default\"] === null || highlight_words__WEBPACK_IMPORTED_MODULE_2__[\"default\"] === void 0 ? void 0 : (0,highlight_words__WEBPACK_IMPORTED_MODULE_2__[\"default\"])({\n            matchExactly: (filterValue ? columnDef._filterFn : globalFilterFn) !== \"fuzzy\",\n            query: ((_a = filterValue !== null && filterValue !== void 0 ? filterValue : globalFilter) !== null && _a !== void 0 ? _a : \"\").toString(),\n            text: renderedCellValue === null || renderedCellValue === void 0 ? void 0 : renderedCellValue.toString()\n        });\n        if ((chunks === null || chunks === void 0 ? void 0 : chunks.length) > 1 || ((_b = chunks === null || chunks === void 0 ? void 0 : chunks[0]) === null || _b === void 0 ? void 0 : _b.match)) {\n            renderedCellValue = (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n                \"aria-label\": renderedCellValue,\n                role: \"note\",\n                children: (_c = chunks === null || chunks === void 0 ? void 0 : chunks.map(({ key, match, text })=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Box__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n                        \"aria-hidden\": \"true\",\n                        component: \"span\",\n                        sx: match ? {\n                            backgroundColor: (theme)=>getMRTTheme(table, theme).matchHighlightColor,\n                            borderRadius: \"2px\",\n                            color: (theme)=>theme.palette.mode === \"dark\" ? theme.palette.common.white : theme.palette.common.black,\n                            padding: \"2px 1px\"\n                        } : undefined,\n                        children: text\n                    }, key))) !== null && _c !== void 0 ? _c : renderedCellValue\n            });\n        }\n    }\n    if (columnDef.Cell && !isGroupedValue) {\n        renderedCellValue = columnDef.Cell({\n            cell,\n            column,\n            renderedCellValue,\n            row,\n            table\n        });\n    }\n    return renderedCellValue;\n};\nconst MRT_GrabHandleButton = (_a)=>{\n    var _b, _c;\n    var { iconButtonProps, location, onDragEnd, onDragStart, table } = _a, rest = __rest(_a, [\n        \"iconButtonProps\",\n        \"location\",\n        \"onDragEnd\",\n        \"onDragStart\",\n        \"table\"\n    ]);\n    const { options: { icons: { DragHandleIcon }, localization } } = table;\n    const _iconButtonProps = Object.assign(Object.assign({}, iconButtonProps), rest);\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Tooltip__WEBPACK_IMPORTED_MODULE_8__[\"default\"], {\n        enterDelay: 1000,\n        enterNextDelay: 1000,\n        placement: \"top\",\n        title: (_b = _iconButtonProps === null || _iconButtonProps === void 0 ? void 0 : _iconButtonProps.title) !== null && _b !== void 0 ? _b : localization.move,\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_IconButton__WEBPACK_IMPORTED_MODULE_9__[\"default\"], Object.assign({\n            \"aria-label\": (_c = _iconButtonProps.title) !== null && _c !== void 0 ? _c : localization.move,\n            disableRipple: true,\n            draggable: \"true\",\n            size: \"small\"\n        }, _iconButtonProps, {\n            onClick: (e)=>{\n                var _a;\n                e.stopPropagation();\n                (_a = _iconButtonProps === null || _iconButtonProps === void 0 ? void 0 : _iconButtonProps.onClick) === null || _a === void 0 ? void 0 : _a.call(_iconButtonProps, e);\n            },\n            onDragEnd: onDragEnd,\n            onDragStart: onDragStart,\n            sx: (theme)=>Object.assign({\n                    \"&:active\": {\n                        cursor: \"grabbing\"\n                    },\n                    \"&:hover\": {\n                        backgroundColor: \"transparent\",\n                        opacity: 1\n                    },\n                    cursor: \"grab\",\n                    m: \"0 -0.1rem\",\n                    opacity: location === \"row\" ? 1 : 0.3,\n                    p: \"2px\",\n                    transition: \"all 150ms ease-in-out\"\n                }, parseFromValuesOrFunc(_iconButtonProps === null || _iconButtonProps === void 0 ? void 0 : _iconButtonProps.sx, theme)),\n            title: undefined,\n            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(DragHandleIcon, {})\n        }))\n    });\n};\nconst MRT_TableBodyRowGrabHandle = (_a)=>{\n    var { row, rowRef, table } = _a, rest = __rest(_a, [\n        \"row\",\n        \"rowRef\",\n        \"table\"\n    ]);\n    const { options: { muiRowDragHandleProps } } = table;\n    const iconButtonProps = Object.assign(Object.assign({}, parseFromValuesOrFunc(muiRowDragHandleProps, {\n        row,\n        table\n    })), rest);\n    const handleDragStart = (event)=>{\n        var _a;\n        (_a = iconButtonProps === null || iconButtonProps === void 0 ? void 0 : iconButtonProps.onDragStart) === null || _a === void 0 ? void 0 : _a.call(iconButtonProps, event);\n        event.dataTransfer.setDragImage(rowRef.current, 0, 0);\n        table.setDraggingRow(row);\n    };\n    const handleDragEnd = (event)=>{\n        var _a;\n        (_a = iconButtonProps === null || iconButtonProps === void 0 ? void 0 : iconButtonProps.onDragEnd) === null || _a === void 0 ? void 0 : _a.call(iconButtonProps, event);\n        table.setDraggingRow(null);\n        table.setHoveredRow(null);\n    };\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MRT_GrabHandleButton, {\n        iconButtonProps: iconButtonProps,\n        location: \"row\",\n        onDragEnd: handleDragEnd,\n        onDragStart: handleDragStart,\n        table: table\n    });\n};\nconst MRT_CopyButton = (_a)=>{\n    var _b;\n    var { cell, table } = _a, rest = __rest(_a, [\n        \"cell\",\n        \"table\"\n    ]);\n    const { options: { localization, muiCopyButtonProps } } = table;\n    const { column, row } = cell;\n    const { columnDef } = column;\n    const [copied, setCopied] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const handleCopy = (event, text)=>{\n        event.stopPropagation();\n        navigator.clipboard.writeText(text);\n        setCopied(true);\n        setTimeout(()=>setCopied(false), 4000);\n    };\n    const buttonProps = Object.assign(Object.assign(Object.assign({}, parseFromValuesOrFunc(muiCopyButtonProps, {\n        cell,\n        column,\n        row,\n        table\n    })), parseFromValuesOrFunc(columnDef.muiCopyButtonProps, {\n        cell,\n        column,\n        row,\n        table\n    })), rest);\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Tooltip__WEBPACK_IMPORTED_MODULE_8__[\"default\"], {\n        enterDelay: 1000,\n        enterNextDelay: 1000,\n        placement: \"top\",\n        title: (_b = buttonProps === null || buttonProps === void 0 ? void 0 : buttonProps.title) !== null && _b !== void 0 ? _b : copied ? localization.copiedToClipboard : localization.clickToCopy,\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Button__WEBPACK_IMPORTED_MODULE_10__[\"default\"], Object.assign({\n            onClick: (e)=>handleCopy(e, cell.getValue()),\n            size: \"small\",\n            type: \"button\",\n            variant: \"text\"\n        }, buttonProps, {\n            sx: (theme)=>Object.assign({\n                    backgroundColor: \"transparent\",\n                    border: \"none\",\n                    color: \"inherit\",\n                    cursor: \"copy\",\n                    fontFamily: \"inherit\",\n                    fontSize: \"inherit\",\n                    letterSpacing: \"inherit\",\n                    m: \"-0.25rem\",\n                    minWidth: \"unset\",\n                    textAlign: \"inherit\",\n                    textTransform: \"inherit\"\n                }, parseFromValuesOrFunc(buttonProps === null || buttonProps === void 0 ? void 0 : buttonProps.sx, theme)),\n            title: undefined\n        }))\n    });\n};\nconst MRT_EditCellTextField = (_a)=>{\n    var _b, _c, _d;\n    var { cell, table } = _a, rest = __rest(_a, [\n        \"cell\",\n        \"table\"\n    ]);\n    const { getState, options: { createDisplayMode, editDisplayMode, muiEditTextFieldProps }, refs: { editInputRefs }, setCreatingRow, setEditingCell, setEditingRow } = table;\n    const { column, row } = cell;\n    const { columnDef } = column;\n    const { creatingRow, editingRow } = getState();\n    const isCreating = (creatingRow === null || creatingRow === void 0 ? void 0 : creatingRow.id) === row.id;\n    const isEditing = (editingRow === null || editingRow === void 0 ? void 0 : editingRow.id) === row.id;\n    const isSelectEdit = columnDef.editVariant === \"select\";\n    const [value, setValue] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(()=>cell.getValue());\n    const textFieldProps = Object.assign(Object.assign(Object.assign({}, parseFromValuesOrFunc(muiEditTextFieldProps, {\n        cell,\n        column,\n        row,\n        table\n    })), parseFromValuesOrFunc(columnDef.muiEditTextFieldProps, {\n        cell,\n        column,\n        row,\n        table\n    })), rest);\n    const saveInputValueToRowCache = (newValue)=>{\n        //@ts-ignore\n        row._valuesCache[column.id] = newValue;\n        if (isCreating) {\n            setCreatingRow(row);\n        } else if (isEditing) {\n            setEditingRow(row);\n        }\n    };\n    const handleChange = (event)=>{\n        var _a;\n        (_a = textFieldProps.onChange) === null || _a === void 0 ? void 0 : _a.call(textFieldProps, event);\n        setValue(event.target.value);\n        if (textFieldProps === null || textFieldProps === void 0 ? void 0 : textFieldProps.select) {\n            saveInputValueToRowCache(event.target.value);\n        }\n    };\n    const handleBlur = (event)=>{\n        var _a;\n        (_a = textFieldProps.onBlur) === null || _a === void 0 ? void 0 : _a.call(textFieldProps, event);\n        saveInputValueToRowCache(value);\n        setEditingCell(null);\n    };\n    const handleEnterKeyDown = (event)=>{\n        var _a, _b;\n        (_a = textFieldProps.onKeyDown) === null || _a === void 0 ? void 0 : _a.call(textFieldProps, event);\n        if (event.key === \"Enter\" && !event.shiftKey) {\n            (_b = editInputRefs.current[column.id]) === null || _b === void 0 ? void 0 : _b.blur();\n        }\n    };\n    if (columnDef.Edit) {\n        return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n            children: (_b = columnDef.Edit) === null || _b === void 0 ? void 0 : _b.call(columnDef, {\n                cell,\n                column,\n                row,\n                table\n            })\n        });\n    }\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_TextField__WEBPACK_IMPORTED_MODULE_11__[\"default\"], Object.assign({\n        disabled: parseFromValuesOrFunc(columnDef.enableEditing, row) === false,\n        fullWidth: true,\n        inputRef: (inputRef)=>{\n            if (inputRef) {\n                editInputRefs.current[column.id] = inputRef;\n                if (textFieldProps.inputRef) {\n                    textFieldProps.inputRef = inputRef;\n                }\n            }\n        },\n        label: [\n            \"custom\",\n            \"modal\"\n        ].includes(isCreating ? createDisplayMode : editDisplayMode) ? columnDef.header : undefined,\n        margin: \"none\",\n        name: column.id,\n        placeholder: ![\n            \"custom\",\n            \"modal\"\n        ].includes(isCreating ? createDisplayMode : editDisplayMode) ? columnDef.header : undefined,\n        select: isSelectEdit,\n        size: \"small\",\n        value: value,\n        variant: \"standard\"\n    }, textFieldProps, {\n        InputProps: Object.assign(Object.assign(Object.assign({}, textFieldProps.variant !== \"outlined\" ? {\n            disableUnderline: editDisplayMode === \"table\"\n        } : {}), textFieldProps.InputProps), {\n            sx: (theme)=>{\n                var _a;\n                return Object.assign({\n                    mb: 0\n                }, parseFromValuesOrFunc((_a = textFieldProps === null || textFieldProps === void 0 ? void 0 : textFieldProps.InputProps) === null || _a === void 0 ? void 0 : _a.sx, theme));\n            }\n        }),\n        inputProps: Object.assign({\n            autoComplete: \"new-password\"\n        }, textFieldProps.inputProps),\n        onBlur: handleBlur,\n        onChange: handleChange,\n        onClick: (e)=>{\n            var _a;\n            e.stopPropagation();\n            (_a = textFieldProps === null || textFieldProps === void 0 ? void 0 : textFieldProps.onClick) === null || _a === void 0 ? void 0 : _a.call(textFieldProps, e);\n        },\n        onKeyDown: handleEnterKeyDown,\n        children: (_c = textFieldProps.children) !== null && _c !== void 0 ? _c : (_d = columnDef === null || columnDef === void 0 ? void 0 : columnDef.editSelectOptions) === null || _d === void 0 ? void 0 : _d.map((option)=>{\n            const { label, value } = getValueAndLabel(option);\n            return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_MenuItem__WEBPACK_IMPORTED_MODULE_12__[\"default\"], {\n                sx: {\n                    alignItems: \"center\",\n                    display: \"flex\",\n                    gap: \"0.5rem\",\n                    m: 0\n                },\n                value: value,\n                children: label\n            }, value);\n        })\n    }));\n};\nconst MRT_TableBodyCell = (_a)=>{\n    var _b, _c, _d, _e, _f;\n    var { cell, measureElement, numRows, rowIndex, rowRef, table, virtualIndex } = _a, rest = __rest(_a, [\n        \"cell\",\n        \"measureElement\",\n        \"numRows\",\n        \"rowIndex\",\n        \"rowRef\",\n        \"table\",\n        \"virtualIndex\"\n    ]);\n    const theme = (0,_mui_material_styles__WEBPACK_IMPORTED_MODULE_13__[\"default\"])();\n    const { getState, options: { columnResizeDirection, columnResizeMode, createDisplayMode, editDisplayMode, enableClickToCopy, enableColumnOrdering, enableEditing, enableGrouping, enableRowNumbers, layoutMode, muiSkeletonProps, muiTableBodyCellProps, rowNumberDisplayMode }, refs: { editInputRefs }, setEditingCell, setHoveredColumn } = table;\n    const { columnSizingInfo, creatingRow, density, draggingColumn, draggingRow, editingCell, editingRow, hoveredColumn, hoveredRow, isLoading, showSkeletons } = getState();\n    const { column, row } = cell;\n    const { columnDef } = column;\n    const { columnDefType } = columnDef;\n    const args = {\n        cell,\n        column,\n        row,\n        table\n    };\n    const tableCellProps = Object.assign(Object.assign(Object.assign({}, parseFromValuesOrFunc(muiTableBodyCellProps, args)), parseFromValuesOrFunc(columnDef.muiTableBodyCellProps, args)), rest);\n    const skeletonProps = parseFromValuesOrFunc(muiSkeletonProps, {\n        cell,\n        column,\n        row,\n        table\n    });\n    const { draggingBorderColor } = getMRTTheme(table, theme);\n    const [skeletonWidth, setSkeletonWidth] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(100);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!isLoading && !showSkeletons || skeletonWidth !== 100) return;\n        const size = column.getSize();\n        setSkeletonWidth(columnDefType === \"display\" ? size / 2 : Math.round(Math.random() * (size - size / 3) + size / 3));\n    }, [\n        isLoading,\n        showSkeletons\n    ]);\n    const draggingBorders = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        const isDraggingColumn = (draggingColumn === null || draggingColumn === void 0 ? void 0 : draggingColumn.id) === column.id;\n        const isHoveredColumn = (hoveredColumn === null || hoveredColumn === void 0 ? void 0 : hoveredColumn.id) === column.id;\n        const isDraggingRow = (draggingRow === null || draggingRow === void 0 ? void 0 : draggingRow.id) === row.id;\n        const isHoveredRow = (hoveredRow === null || hoveredRow === void 0 ? void 0 : hoveredRow.id) === row.id;\n        const isFirstColumn = getIsFirstColumn(column, table);\n        const isLastColumn = getIsLastColumn(column, table);\n        const isLastRow = numRows && rowIndex === numRows - 1;\n        const isResizingColumn = columnSizingInfo.isResizingColumn === column.id;\n        const showResizeBorder = isResizingColumn && columnResizeMode === \"onChange\";\n        const borderStyle = showResizeBorder ? `2px solid ${draggingBorderColor} !important` : isDraggingColumn || isDraggingRow ? `1px dashed ${theme.palette.grey[500]} !important` : isHoveredColumn || isHoveredRow || isResizingColumn ? `2px dashed ${draggingBorderColor} !important` : undefined;\n        if (showResizeBorder) {\n            return columnResizeDirection === \"ltr\" ? {\n                borderRight: borderStyle\n            } : {\n                borderLeft: borderStyle\n            };\n        }\n        return borderStyle ? {\n            borderBottom: isDraggingRow || isHoveredRow || isLastRow && !isResizingColumn ? borderStyle : undefined,\n            borderLeft: isDraggingColumn || isHoveredColumn || (isDraggingRow || isHoveredRow) && isFirstColumn ? borderStyle : undefined,\n            borderRight: isDraggingColumn || isHoveredColumn || (isDraggingRow || isHoveredRow) && isLastColumn ? borderStyle : undefined,\n            borderTop: isDraggingRow || isHoveredRow ? borderStyle : undefined\n        } : undefined;\n    }, [\n        columnSizingInfo.isResizingColumn,\n        draggingColumn,\n        draggingRow,\n        hoveredColumn,\n        hoveredRow,\n        rowIndex\n    ]);\n    const isEditable = !cell.getIsPlaceholder() && parseFromValuesOrFunc(enableEditing, row) && parseFromValuesOrFunc(columnDef.enableEditing, row) !== false;\n    const isEditing = isEditable && ![\n        \"custom\",\n        \"modal\"\n    ].includes(editDisplayMode) && (editDisplayMode === \"table\" || (editingRow === null || editingRow === void 0 ? void 0 : editingRow.id) === row.id || (editingCell === null || editingCell === void 0 ? void 0 : editingCell.id) === cell.id) && !row.getIsGrouped();\n    const isCreating = isEditable && createDisplayMode === \"row\" && (creatingRow === null || creatingRow === void 0 ? void 0 : creatingRow.id) === row.id;\n    const handleDoubleClick = (event)=>{\n        var _a;\n        (_a = tableCellProps === null || tableCellProps === void 0 ? void 0 : tableCellProps.onDoubleClick) === null || _a === void 0 ? void 0 : _a.call(tableCellProps, event);\n        if (isEditable && editDisplayMode === \"cell\") {\n            setEditingCell(cell);\n            queueMicrotask(()=>{\n                var _a;\n                const textField = editInputRefs.current[column.id];\n                if (textField) {\n                    textField.focus();\n                    (_a = textField.select) === null || _a === void 0 ? void 0 : _a.call(textField);\n                }\n            });\n        }\n    };\n    const handleDragEnter = (e)=>{\n        var _a;\n        (_a = tableCellProps === null || tableCellProps === void 0 ? void 0 : tableCellProps.onDragEnter) === null || _a === void 0 ? void 0 : _a.call(tableCellProps, e);\n        if (enableGrouping && (hoveredColumn === null || hoveredColumn === void 0 ? void 0 : hoveredColumn.id) === \"drop-zone\") {\n            setHoveredColumn(null);\n        }\n        if (enableColumnOrdering && draggingColumn) {\n            setHoveredColumn(columnDef.enableColumnOrdering !== false ? column : null);\n        }\n    };\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_TableCell__WEBPACK_IMPORTED_MODULE_14__[\"default\"], Object.assign({\n        \"data-index\": virtualIndex,\n        ref: (node)=>{\n            if (node) {\n                measureElement === null || measureElement === void 0 ? void 0 : measureElement(node);\n            }\n        }\n    }, tableCellProps, {\n        onDoubleClick: handleDoubleClick,\n        onDragEnter: handleDragEnter,\n        sx: (theme)=>Object.assign(Object.assign({\n                \"&:hover\": {\n                    outline: editDisplayMode === \"cell\" && isEditable || editDisplayMode === \"table\" && (isCreating || isEditing) ? `1px solid ${theme.palette.grey[500]}` : undefined,\n                    outlineOffset: \"-1px\",\n                    textOverflow: \"clip\"\n                },\n                alignItems: (layoutMode === null || layoutMode === void 0 ? void 0 : layoutMode.startsWith(\"grid\")) ? \"center\" : undefined,\n                cursor: isEditable && editDisplayMode === \"cell\" ? \"pointer\" : \"inherit\",\n                justifyContent: (layoutMode === null || layoutMode === void 0 ? void 0 : layoutMode.startsWith(\"grid\")) ? tableCellProps.align : undefined,\n                overflow: \"hidden\",\n                p: density === \"compact\" ? columnDefType === \"display\" ? \"0 0.5rem\" : \"0.5rem\" : density === \"comfortable\" ? columnDefType === \"display\" ? \"0.5rem 0.75rem\" : \"1rem\" : columnDefType === \"display\" ? \"1rem 1.25rem\" : \"1.5rem\",\n                textOverflow: columnDefType !== \"display\" ? \"ellipsis\" : undefined,\n                [theme.direction === \"rtl\" ? \"pr\" : \"pl\"]: column.id === \"mrt-row-expand\" ? `${row.depth + (density === \"compact\" ? 0.5 : density === \"comfortable\" ? 0.75 : 1.25)}rem` : undefined,\n                whiteSpace: row.getIsPinned() || density === \"compact\" ? \"nowrap\" : \"normal\",\n                zIndex: (draggingColumn === null || draggingColumn === void 0 ? void 0 : draggingColumn.id) === column.id ? 2 : column.getIsPinned() ? 1 : 0\n            }, getCommonMRTCellStyles({\n                column,\n                table,\n                tableCellProps,\n                theme\n            })), draggingBorders),\n        children: (_b = tableCellProps.children) !== null && _b !== void 0 ? _b : (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n            children: [\n                cell.getIsPlaceholder() ? (_d = (_c = columnDef.PlaceholderCell) === null || _c === void 0 ? void 0 : _c.call(columnDef, {\n                    cell,\n                    column,\n                    row,\n                    table\n                })) !== null && _d !== void 0 ? _d : null : showSkeletons !== false && (isLoading || showSkeletons) ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Skeleton__WEBPACK_IMPORTED_MODULE_15__[\"default\"], Object.assign({\n                    animation: \"wave\",\n                    height: 20,\n                    width: skeletonWidth\n                }, skeletonProps)) : enableRowNumbers && rowNumberDisplayMode === \"static\" && column.id === \"mrt-row-numbers\" ? rowIndex + 1 : column.id === \"mrt-row-drag\" ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MRT_TableBodyRowGrabHandle, {\n                    row: row,\n                    rowRef: rowRef,\n                    table: table\n                }) : columnDefType === \"display\" && (column.id === \"mrt-row-select\" || column.id === \"mrt-row-expand\" || !row.getIsGrouped()) ? (_e = columnDef.Cell) === null || _e === void 0 ? void 0 : _e.call(columnDef, {\n                    cell,\n                    column,\n                    renderedCellValue: cell.renderValue(),\n                    row,\n                    table\n                }) : isCreating || isEditing ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MRT_EditCellTextField, {\n                    cell: cell,\n                    table: table\n                }) : (enableClickToCopy || columnDef.enableClickToCopy) && columnDef.enableClickToCopy !== false ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MRT_CopyButton, {\n                    cell: cell,\n                    table: table,\n                    children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MRT_TableBodyCellValue, {\n                        cell: cell,\n                        table: table\n                    })\n                }) : (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MRT_TableBodyCellValue, {\n                    cell: cell,\n                    table: table\n                }),\n                cell.getIsGrouped() && !columnDef.GroupedCell && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n                    children: [\n                        \" (\",\n                        (_f = row.subRows) === null || _f === void 0 ? void 0 : _f.length,\n                        \")\"\n                    ]\n                })\n            ]\n        })\n    }));\n};\nconst Memo_MRT_TableBodyCell = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.memo)(MRT_TableBodyCell, (prev, next)=>next.cell === prev.cell);\nconst MRT_TableDetailPanel = (_a)=>{\n    var { parentRowRef, row, rowIndex, table, virtualRow } = _a, rest = __rest(_a, [\n        \"parentRowRef\",\n        \"row\",\n        \"rowIndex\",\n        \"table\",\n        \"virtualRow\"\n    ]);\n    const { getState, getVisibleLeafColumns, options: { layoutMode, muiDetailPanelProps, muiTableBodyRowProps, renderDetailPanel } } = table;\n    const { isLoading } = getState();\n    const tableRowProps = parseFromValuesOrFunc(muiTableBodyRowProps, {\n        isDetailPanel: true,\n        row,\n        staticRowIndex: rowIndex,\n        table\n    });\n    const tableCellProps = Object.assign(Object.assign({}, parseFromValuesOrFunc(muiDetailPanelProps, {\n        row,\n        table\n    })), rest);\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_TableRow__WEBPACK_IMPORTED_MODULE_16__[\"default\"], Object.assign({\n        className: \"Mui-TableBodyCell-DetailPanel\"\n    }, tableRowProps, {\n        sx: (theme)=>{\n            var _a, _b;\n            return Object.assign({\n                display: (layoutMode === null || layoutMode === void 0 ? void 0 : layoutMode.startsWith(\"grid\")) ? \"flex\" : undefined,\n                position: virtualRow ? \"absolute\" : undefined,\n                top: virtualRow ? `${(_b = (_a = parentRowRef.current) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect()) === null || _b === void 0 ? void 0 : _b.height}px` : undefined,\n                transform: virtualRow ? `translateY(${virtualRow === null || virtualRow === void 0 ? void 0 : virtualRow.start}px)` : undefined,\n                width: \"100%\",\n                zIndex: virtualRow ? 2 : undefined\n            }, parseFromValuesOrFunc(tableRowProps === null || tableRowProps === void 0 ? void 0 : tableRowProps.sx, theme));\n        },\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_TableCell__WEBPACK_IMPORTED_MODULE_14__[\"default\"], Object.assign({\n            className: \"Mui-TableBodyCell-DetailPanel\",\n            colSpan: getVisibleLeafColumns().length\n        }, tableCellProps, {\n            sx: (theme)=>Object.assign({\n                    backgroundColor: virtualRow ? getMRTTheme(table, theme).baseBackgroundColor : undefined,\n                    borderBottom: !row.getIsExpanded() ? \"none\" : undefined,\n                    display: (layoutMode === null || layoutMode === void 0 ? void 0 : layoutMode.startsWith(\"grid\")) ? \"flex\" : undefined,\n                    py: row.getIsExpanded() ? \"1rem\" : 0,\n                    transition: \"all 150ms ease-in-out\",\n                    width: `${table.getTotalSize()}px`\n                }, parseFromValuesOrFunc(tableCellProps === null || tableCellProps === void 0 ? void 0 : tableCellProps.sx, theme)),\n            children: renderDetailPanel && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Collapse__WEBPACK_IMPORTED_MODULE_17__[\"default\"], {\n                in: row.getIsExpanded(),\n                mountOnEnter: true,\n                unmountOnExit: true,\n                children: !isLoading && renderDetailPanel({\n                    row,\n                    table\n                })\n            })\n        }))\n    }));\n};\nconst MRT_TableBodyRow = ({ columnVirtualizer, measureElement, numRows, pinnedRowIds, row, rowIndex, table, virtualColumns, virtualPaddingLeft, virtualPaddingRight, virtualRow })=>{\n    var _a, _b, _c, _d;\n    const theme = (0,_mui_material_styles__WEBPACK_IMPORTED_MODULE_13__[\"default\"])();\n    const { getState, options: { enableRowOrdering, enableRowPinning, enableStickyFooter, enableStickyHeader, layoutMode, memoMode, muiTableBodyRowProps, renderDetailPanel, rowPinningDisplayMode }, refs: { tableFooterRef, tableHeadRef }, setHoveredRow } = table;\n    const { density, draggingColumn, draggingRow, editingCell, editingRow, hoveredRow, isFullScreen, rowPinning } = getState();\n    const isPinned = enableRowPinning && row.getIsPinned();\n    const tableRowProps = parseFromValuesOrFunc(muiTableBodyRowProps, {\n        row,\n        staticRowIndex: rowIndex,\n        table\n    });\n    const [bottomPinnedIndex, topPinnedIndex] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        if (!enableRowPinning || !(rowPinningDisplayMode === null || rowPinningDisplayMode === void 0 ? void 0 : rowPinningDisplayMode.includes(\"sticky\")) || !pinnedRowIds || !row.getIsPinned()) return [];\n        return [\n            [\n                ...pinnedRowIds\n            ].reverse().indexOf(row.id),\n            pinnedRowIds.indexOf(row.id)\n        ];\n    }, [\n        pinnedRowIds,\n        rowPinning\n    ]);\n    const tableHeadHeight = (enableStickyHeader || isFullScreen) && ((_a = tableHeadRef.current) === null || _a === void 0 ? void 0 : _a.clientHeight) || 0;\n    const tableFooterHeight = enableStickyFooter && ((_b = tableFooterRef.current) === null || _b === void 0 ? void 0 : _b.clientHeight) || 0;\n    const sx = parseFromValuesOrFunc(tableRowProps === null || tableRowProps === void 0 ? void 0 : tableRowProps.sx, theme);\n    const rowHeight = // @ts-ignore\n    parseInt((_d = (_c = tableRowProps === null || tableRowProps === void 0 ? void 0 : tableRowProps.style) === null || _c === void 0 ? void 0 : _c.height) !== null && _d !== void 0 ? _d : sx === null || sx === void 0 ? void 0 : sx.height, 10) || (density === \"compact\" ? 37 : density === \"comfortable\" ? 53 : 69);\n    const handleDragEnter = (_e)=>{\n        if (enableRowOrdering && draggingRow) {\n            setHoveredRow(row);\n        }\n    };\n    const rowRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const { baseBackgroundColor, pinnedRowBackgroundColor, selectedRowBackgroundColor } = getMRTTheme(table, theme);\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(_mui_material_TableRow__WEBPACK_IMPORTED_MODULE_16__[\"default\"], Object.assign({\n                \"data-index\": virtualRow === null || virtualRow === void 0 ? void 0 : virtualRow.index,\n                \"data-pinned\": !!isPinned || undefined,\n                \"data-selected\": row.getIsSelected() || undefined,\n                onDragEnter: handleDragEnter,\n                ref: (node)=>{\n                    if (node) {\n                        rowRef.current = node;\n                        measureElement === null || measureElement === void 0 ? void 0 : measureElement(node);\n                    }\n                },\n                selected: row.getIsSelected()\n            }, tableRowProps, {\n                style: Object.assign({\n                    transform: virtualRow ? `translateY(${virtualRow === null || virtualRow === void 0 ? void 0 : virtualRow.start}px)` : undefined\n                }, tableRowProps === null || tableRowProps === void 0 ? void 0 : tableRowProps.style),\n                sx: (theme)=>Object.assign({\n                        \"&:hover td\": {\n                            backgroundColor: (tableRowProps === null || tableRowProps === void 0 ? void 0 : tableRowProps.hover) !== false ? row.getIsSelected() ? `${(0,_mui_material_styles__WEBPACK_IMPORTED_MODULE_6__.alpha)(selectedRowBackgroundColor, 0.3)}` : theme.palette.mode === \"dark\" ? `${(0,_mui_material_styles__WEBPACK_IMPORTED_MODULE_6__.lighten)(baseBackgroundColor, 0.05)}` : `${(0,_mui_material_styles__WEBPACK_IMPORTED_MODULE_6__.darken)(baseBackgroundColor, 0.05)}` : undefined\n                        },\n                        backgroundColor: `${baseBackgroundColor} !important`,\n                        bottom: !virtualRow && bottomPinnedIndex !== undefined && isPinned ? `${bottomPinnedIndex * rowHeight + (enableStickyFooter ? tableFooterHeight - 1 : 0)}px` : undefined,\n                        boxSizing: \"border-box\",\n                        display: (layoutMode === null || layoutMode === void 0 ? void 0 : layoutMode.startsWith(\"grid\")) ? \"flex\" : undefined,\n                        opacity: isPinned ? 0.97 : (draggingRow === null || draggingRow === void 0 ? void 0 : draggingRow.id) === row.id || (hoveredRow === null || hoveredRow === void 0 ? void 0 : hoveredRow.id) === row.id ? 0.5 : 1,\n                        position: virtualRow ? \"absolute\" : (rowPinningDisplayMode === null || rowPinningDisplayMode === void 0 ? void 0 : rowPinningDisplayMode.includes(\"sticky\")) && isPinned ? \"sticky\" : undefined,\n                        td: {\n                            backgroundColor: row.getIsSelected() ? selectedRowBackgroundColor : isPinned ? pinnedRowBackgroundColor : undefined\n                        },\n                        top: virtualRow ? 0 : topPinnedIndex !== undefined && isPinned ? `${topPinnedIndex * rowHeight + (enableStickyHeader || isFullScreen ? tableHeadHeight - 1 : 0)}px` : undefined,\n                        transition: virtualRow ? \"none\" : \"all 150ms ease-in-out\",\n                        width: \"100%\",\n                        zIndex: (rowPinningDisplayMode === null || rowPinningDisplayMode === void 0 ? void 0 : rowPinningDisplayMode.includes(\"sticky\")) && isPinned ? 2 : undefined\n                    }, sx),\n                children: [\n                    virtualPaddingLeft ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"td\", {\n                        style: {\n                            display: \"flex\",\n                            width: virtualPaddingLeft\n                        }\n                    }) : null,\n                    (virtualColumns !== null && virtualColumns !== void 0 ? virtualColumns : row.getVisibleCells()).map((cellOrVirtualCell)=>{\n                        const cell = columnVirtualizer ? row.getVisibleCells()[cellOrVirtualCell.index] : cellOrVirtualCell;\n                        const props = {\n                            cell,\n                            measureElement: columnVirtualizer === null || columnVirtualizer === void 0 ? void 0 : columnVirtualizer.measureElement,\n                            numRows,\n                            rowIndex,\n                            rowRef,\n                            table,\n                            virtualIndex: columnVirtualizer ? cellOrVirtualCell.index : undefined\n                        };\n                        return cell ? memoMode === \"cells\" && cell.column.columnDef.columnDefType === \"data\" && !draggingColumn && !draggingRow && (editingCell === null || editingCell === void 0 ? void 0 : editingCell.id) !== cell.id && (editingRow === null || editingRow === void 0 ? void 0 : editingRow.id) !== row.id ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Memo_MRT_TableBodyCell, Object.assign({}, props), cell.id) : (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MRT_TableBodyCell, Object.assign({}, props), cell.id) : null;\n                    }),\n                    virtualPaddingRight ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"td\", {\n                        style: {\n                            display: \"flex\",\n                            width: virtualPaddingRight\n                        }\n                    }) : null\n                ]\n            })),\n            renderDetailPanel && !row.getIsGrouped() && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MRT_TableDetailPanel, {\n                parentRowRef: rowRef,\n                row: row,\n                rowIndex: rowIndex,\n                table: table,\n                virtualRow: virtualRow\n            })\n        ]\n    });\n};\nconst Memo_MRT_TableBodyRow = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.memo)(MRT_TableBodyRow, (prev, next)=>prev.row === next.row && prev.rowIndex === next.rowIndex);\nconst fuzzy$1 = (rowA, rowB, columnId)=>{\n    let dir = 0;\n    if (rowA.columnFiltersMeta[columnId]) {\n        dir = (0,_tanstack_match_sorter_utils__WEBPACK_IMPORTED_MODULE_18__.compareItems)(rowA.columnFiltersMeta[columnId], rowB.columnFiltersMeta[columnId]);\n    }\n    // Provide a fallback for when the item ranks are equal\n    return dir === 0 ? _tanstack_react_table__WEBPACK_IMPORTED_MODULE_4__.sortingFns.alphanumeric(rowA, rowB, columnId) : dir;\n};\nconst MRT_SortingFns = Object.assign(Object.assign({}, _tanstack_react_table__WEBPACK_IMPORTED_MODULE_4__.sortingFns), {\n    fuzzy: fuzzy$1\n});\nconst rankGlobalFuzzy = (rowA, rowB)=>Math.max(...Object.values(rowB.columnFiltersMeta).map((v)=>v.rank)) - Math.max(...Object.values(rowA.columnFiltersMeta).map((v)=>v.rank));\nconst MRT_TableBody = (_a)=>{\n    var _b, _c, _d, _e, _f, _g;\n    var { columnVirtualizer, table, virtualColumns, virtualPaddingLeft, virtualPaddingRight } = _a, rest = __rest(_a, [\n        \"columnVirtualizer\",\n        \"table\",\n        \"virtualColumns\",\n        \"virtualPaddingLeft\",\n        \"virtualPaddingRight\"\n    ]);\n    const { getBottomRows, getCenterRows, getIsSomeRowsPinned, getPrePaginationRowModel, getRowModel, getState, getTopRows, options: { createDisplayMode, enableGlobalFilterRankedResults, enablePagination, enableRowPinning, enableRowVirtualization, enableStickyFooter, enableStickyHeader, layoutMode, localization, manualExpanding, manualFiltering, manualGrouping, manualPagination, manualSorting, memoMode, muiTableBodyProps, renderEmptyRowsFallback, rowPinningDisplayMode, rowVirtualizerInstanceRef, rowVirtualizerOptions }, refs: { tableContainerRef, tableFooterRef, tableHeadRef, tablePaperRef } } = table;\n    const { columnFilters, creatingRow, density, draggingRow, expanded, globalFilter, isFullScreen, pagination, rowPinning, sorting } = getState();\n    const tableBodyProps = Object.assign(Object.assign({}, parseFromValuesOrFunc(muiTableBodyProps, {\n        table\n    })), rest);\n    const rowVirtualizerProps = parseFromValuesOrFunc(rowVirtualizerOptions, {\n        table\n    });\n    const tableHeadHeight = (enableStickyHeader || isFullScreen) && ((_b = tableHeadRef.current) === null || _b === void 0 ? void 0 : _b.clientHeight) || 0;\n    const tableFooterHeight = enableStickyFooter && ((_c = tableFooterRef.current) === null || _c === void 0 ? void 0 : _c.clientHeight) || 0;\n    const shouldRankRows = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>getCanRankRows(table) && !Object.values(sorting).some(Boolean) && globalFilter, [\n        enableGlobalFilterRankedResults,\n        expanded,\n        globalFilter,\n        manualExpanding,\n        manualFiltering,\n        manualGrouping,\n        manualSorting,\n        sorting\n    ]);\n    const pinnedRowIds = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>getRowModel().rows.filter((row)=>row.getIsPinned()).map((r)=>r.id), [\n        rowPinning,\n        table.getRowModel().rows\n    ]);\n    const rows = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        let rows = [];\n        if (!shouldRankRows) {\n            rows = !enableRowPinning || (rowPinningDisplayMode === null || rowPinningDisplayMode === void 0 ? void 0 : rowPinningDisplayMode.includes(\"sticky\")) ? getRowModel().rows : getCenterRows();\n        } else {\n            rows = getPrePaginationRowModel().rows.sort((a, b)=>rankGlobalFuzzy(a, b));\n            if (enablePagination && !manualPagination) {\n                const start = pagination.pageIndex * pagination.pageSize;\n                rows = rows.slice(start, start + pagination.pageSize);\n            }\n        }\n        if (enableRowPinning && (rowPinningDisplayMode === null || rowPinningDisplayMode === void 0 ? void 0 : rowPinningDisplayMode.includes(\"sticky\"))) {\n            rows = [\n                ...getTopRows().filter((row)=>!pinnedRowIds.includes(row.id)),\n                ...rows,\n                ...getBottomRows().filter((row)=>!pinnedRowIds.includes(row.id))\n            ];\n        }\n        return rows;\n    }, [\n        shouldRankRows,\n        shouldRankRows ? getPrePaginationRowModel().rows : getRowModel().rows,\n        pagination.pageIndex,\n        pagination.pageSize,\n        rowPinning\n    ]);\n    const rowVirtualizer = enableRowVirtualization ? (0,_tanstack_react_virtual__WEBPACK_IMPORTED_MODULE_19__.useVirtualizer)(Object.assign({\n        count: rows.length,\n        estimateSize: ()=>density === \"compact\" ? 37 : density === \"comfortable\" ? 58 : 73,\n        getScrollElement: ()=>tableContainerRef.current,\n        measureElement:  false ? 0 : undefined,\n        overscan: 4,\n        rangeExtractor: (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((range)=>{\n            var _a;\n            return extraIndexRangeExtractor(range, (_a = draggingRow === null || draggingRow === void 0 ? void 0 : draggingRow.index) !== null && _a !== void 0 ? _a : 0);\n        }, [\n            draggingRow\n        ])\n    }, rowVirtualizerProps)) : undefined;\n    if (rowVirtualizerInstanceRef && rowVirtualizer) {\n        rowVirtualizerInstanceRef.current = rowVirtualizer;\n    }\n    const virtualRows = rowVirtualizer ? rowVirtualizer.getVirtualItems() : undefined;\n    const commonRowProps = {\n        columnVirtualizer,\n        numRows: rows.length,\n        table,\n        virtualColumns,\n        virtualPaddingLeft,\n        virtualPaddingRight\n    };\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n        children: [\n            !(rowPinningDisplayMode === null || rowPinningDisplayMode === void 0 ? void 0 : rowPinningDisplayMode.includes(\"sticky\")) && getIsSomeRowsPinned(\"top\") && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_TableBody__WEBPACK_IMPORTED_MODULE_20__[\"default\"], Object.assign({}, tableBodyProps, {\n                sx: (theme)=>Object.assign({\n                        display: (layoutMode === null || layoutMode === void 0 ? void 0 : layoutMode.startsWith(\"grid\")) ? \"grid\" : undefined,\n                        position: \"sticky\",\n                        top: tableHeadHeight - 1,\n                        zIndex: 1\n                    }, parseFromValuesOrFunc(tableBodyProps === null || tableBodyProps === void 0 ? void 0 : tableBodyProps.sx, theme)),\n                children: getTopRows().map((row, rowIndex)=>{\n                    const props = Object.assign(Object.assign({}, commonRowProps), {\n                        row,\n                        rowIndex\n                    });\n                    return memoMode === \"rows\" ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Memo_MRT_TableBodyRow, Object.assign({}, props), row.id) : (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MRT_TableBodyRow, Object.assign({}, props), row.id);\n                })\n            })),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(_mui_material_TableBody__WEBPACK_IMPORTED_MODULE_20__[\"default\"], Object.assign({}, tableBodyProps, {\n                sx: (theme)=>Object.assign({\n                        display: (layoutMode === null || layoutMode === void 0 ? void 0 : layoutMode.startsWith(\"grid\")) ? \"grid\" : undefined,\n                        height: rowVirtualizer ? `${rowVirtualizer.getTotalSize()}px` : \"inherit\",\n                        minHeight: !rows.length ? \"100px\" : undefined,\n                        position: \"relative\"\n                    }, parseFromValuesOrFunc(tableBodyProps === null || tableBodyProps === void 0 ? void 0 : tableBodyProps.sx, theme)),\n                children: [\n                    creatingRow && createDisplayMode === \"row\" && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MRT_TableBodyRow, {\n                        row: creatingRow,\n                        rowIndex: -1,\n                        table: table\n                    }),\n                    (_d = tableBodyProps === null || tableBodyProps === void 0 ? void 0 : tableBodyProps.children) !== null && _d !== void 0 ? _d : !rows.length ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"tr\", {\n                        style: {\n                            display: (layoutMode === null || layoutMode === void 0 ? void 0 : layoutMode.startsWith(\"grid\")) ? \"grid\" : undefined\n                        },\n                        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"td\", {\n                            colSpan: table.getVisibleLeafColumns().length,\n                            style: {\n                                display: (layoutMode === null || layoutMode === void 0 ? void 0 : layoutMode.startsWith(\"grid\")) ? \"grid\" : undefined\n                            },\n                            children: (_e = renderEmptyRowsFallback === null || renderEmptyRowsFallback === void 0 ? void 0 : renderEmptyRowsFallback({\n                                table\n                            })) !== null && _e !== void 0 ? _e : (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_21__[\"default\"], {\n                                sx: {\n                                    color: \"text.secondary\",\n                                    fontStyle: \"italic\",\n                                    maxWidth: `min(100vw, ${(_g = (_f = tablePaperRef.current) === null || _f === void 0 ? void 0 : _f.clientWidth) !== null && _g !== void 0 ? _g : 360}px)`,\n                                    py: \"2rem\",\n                                    textAlign: \"center\",\n                                    width: \"100%\"\n                                },\n                                children: globalFilter || columnFilters.length ? localization.noResultsFound : localization.noRecordsToDisplay\n                            })\n                        })\n                    }) : (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n                        children: (virtualRows !== null && virtualRows !== void 0 ? virtualRows : rows).map((rowOrVirtualRow, rowIndex)=>{\n                            const row = rowVirtualizer ? rows[rowOrVirtualRow.index] : rowOrVirtualRow;\n                            const props = Object.assign(Object.assign({}, commonRowProps), {\n                                measureElement: rowVirtualizer === null || rowVirtualizer === void 0 ? void 0 : rowVirtualizer.measureElement,\n                                pinnedRowIds,\n                                row,\n                                rowIndex: rowVirtualizer ? rowOrVirtualRow.index : rowIndex,\n                                virtualRow: rowVirtualizer ? rowOrVirtualRow : undefined\n                            });\n                            return memoMode === \"rows\" ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Memo_MRT_TableBodyRow, Object.assign({}, props), `${row.id}${row.index}`) : (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MRT_TableBodyRow, Object.assign({}, props), `${row.id}${row.index}`);\n                        })\n                    })\n                ]\n            })),\n            !(rowPinningDisplayMode === null || rowPinningDisplayMode === void 0 ? void 0 : rowPinningDisplayMode.includes(\"sticky\")) && getIsSomeRowsPinned(\"bottom\") && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_TableBody__WEBPACK_IMPORTED_MODULE_20__[\"default\"], Object.assign({}, tableBodyProps, {\n                sx: (theme)=>Object.assign({\n                        bottom: tableFooterHeight - 1,\n                        display: (layoutMode === null || layoutMode === void 0 ? void 0 : layoutMode.startsWith(\"grid\")) ? \"grid\" : undefined,\n                        position: \"sticky\",\n                        zIndex: 1\n                    }, parseFromValuesOrFunc(tableBodyProps === null || tableBodyProps === void 0 ? void 0 : tableBodyProps.sx, theme)),\n                children: getBottomRows().map((row, rowIndex)=>{\n                    const props = Object.assign(Object.assign({}, commonRowProps), {\n                        row,\n                        rowIndex\n                    });\n                    return memoMode === \"rows\" ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Memo_MRT_TableBodyRow, Object.assign({}, props), `${row.id}`) : (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MRT_TableBodyRow, Object.assign({}, props), row.id);\n                })\n            }))\n        ]\n    });\n};\nconst Memo_MRT_TableBody = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.memo)(MRT_TableBody, (prev, next)=>prev.table.options.data === next.table.options.data);\nconst MRT_TableFooterCell = (_a)=>{\n    var _b, _c, _d;\n    var { footer, table } = _a, rest = __rest(_a, [\n        \"footer\",\n        \"table\"\n    ]);\n    const { getState, options: { layoutMode, muiTableFooterCellProps } } = table;\n    const { density } = getState();\n    const { column } = footer;\n    const { columnDef } = column;\n    const { columnDefType } = columnDef;\n    const args = {\n        column,\n        table\n    };\n    const tableCellProps = Object.assign(Object.assign(Object.assign({}, parseFromValuesOrFunc(muiTableFooterCellProps, args)), parseFromValuesOrFunc(columnDef.muiTableFooterCellProps, args)), rest);\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_TableCell__WEBPACK_IMPORTED_MODULE_14__[\"default\"], Object.assign({\n        align: columnDefType === \"group\" ? \"center\" : \"left\",\n        colSpan: footer.colSpan,\n        variant: \"head\"\n    }, tableCellProps, {\n        sx: (theme)=>Object.assign(Object.assign({\n                display: (layoutMode === null || layoutMode === void 0 ? void 0 : layoutMode.startsWith(\"grid\")) ? \"grid\" : undefined,\n                fontWeight: \"bold\",\n                justifyContent: columnDefType === \"group\" ? \"center\" : undefined,\n                p: density === \"compact\" ? \"0.5rem\" : density === \"comfortable\" ? \"1rem\" : \"1.5rem\",\n                verticalAlign: \"top\",\n                zIndex: column.getIsPinned() && columnDefType !== \"group\" ? 2 : 1\n            }, getCommonMRTCellStyles({\n                column,\n                table,\n                tableCellProps,\n                theme\n            })), parseFromValuesOrFunc(tableCellProps === null || tableCellProps === void 0 ? void 0 : tableCellProps.sx, theme)),\n        children: (_b = tableCellProps.children) !== null && _b !== void 0 ? _b : footer.isPlaceholder ? null : (_d = (_c = parseFromValuesOrFunc(columnDef.Footer, {\n            column,\n            footer,\n            table\n        })) !== null && _c !== void 0 ? _c : columnDef.footer) !== null && _d !== void 0 ? _d : null\n    }));\n};\nconst MRT_TableFooterRow = (_a)=>{\n    var _b;\n    var { footerGroup, table, virtualColumns, virtualPaddingLeft, virtualPaddingRight } = _a, rest = __rest(_a, [\n        \"footerGroup\",\n        \"table\",\n        \"virtualColumns\",\n        \"virtualPaddingLeft\",\n        \"virtualPaddingRight\"\n    ]);\n    const { options: { layoutMode, muiTableFooterRowProps } } = table;\n    // if no content in row, skip row\n    if (!((_b = footerGroup.headers) === null || _b === void 0 ? void 0 : _b.some((header)=>typeof header.column.columnDef.footer === \"string\" && !!header.column.columnDef.footer || header.column.columnDef.Footer))) return null;\n    const tableRowProps = Object.assign(Object.assign({}, parseFromValuesOrFunc(muiTableFooterRowProps, {\n        footerGroup,\n        table\n    })), rest);\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(_mui_material_TableRow__WEBPACK_IMPORTED_MODULE_16__[\"default\"], Object.assign({}, tableRowProps, {\n        sx: (theme)=>Object.assign({\n                backgroundColor: getMRTTheme(table, theme).baseBackgroundColor,\n                display: (layoutMode === null || layoutMode === void 0 ? void 0 : layoutMode.startsWith(\"grid\")) ? \"flex\" : undefined,\n                width: \"100%\"\n            }, parseFromValuesOrFunc(tableRowProps === null || tableRowProps === void 0 ? void 0 : tableRowProps.sx, theme)),\n        children: [\n            virtualPaddingLeft ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"th\", {\n                style: {\n                    display: \"flex\",\n                    width: virtualPaddingLeft\n                }\n            }) : null,\n            (virtualColumns !== null && virtualColumns !== void 0 ? virtualColumns : footerGroup.headers).map((footerOrVirtualFooter)=>{\n                const footer = virtualColumns ? footerGroup.headers[footerOrVirtualFooter.index] : footerOrVirtualFooter;\n                return footer ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MRT_TableFooterCell, {\n                    footer: footer,\n                    table: table\n                }, footer.id) : null;\n            }),\n            virtualPaddingRight ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"th\", {\n                style: {\n                    display: \"flex\",\n                    width: virtualPaddingRight\n                }\n            }) : null\n        ]\n    }));\n};\nconst MRT_TableFooter = (_a)=>{\n    var { table, virtualColumns, virtualPaddingLeft, virtualPaddingRight } = _a, rest = __rest(_a, [\n        \"table\",\n        \"virtualColumns\",\n        \"virtualPaddingLeft\",\n        \"virtualPaddingRight\"\n    ]);\n    const { getFooterGroups, getState, options: { enableStickyFooter, layoutMode, muiTableFooterProps }, refs: { tableFooterRef } } = table;\n    const { isFullScreen } = getState();\n    const tableFooterProps = Object.assign(Object.assign({}, parseFromValuesOrFunc(muiTableFooterProps, {\n        table\n    })), rest);\n    const stickFooter = (isFullScreen || enableStickyFooter) && enableStickyFooter !== false;\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_TableFooter__WEBPACK_IMPORTED_MODULE_22__[\"default\"], Object.assign({}, tableFooterProps, {\n        ref: (ref)=>{\n            tableFooterRef.current = ref;\n            if (tableFooterProps === null || tableFooterProps === void 0 ? void 0 : tableFooterProps.ref) {\n                // @ts-ignore\n                tableFooterProps.ref.current = ref;\n            }\n        },\n        sx: (theme)=>Object.assign({\n                bottom: stickFooter ? 0 : undefined,\n                display: (layoutMode === null || layoutMode === void 0 ? void 0 : layoutMode.startsWith(\"grid\")) ? \"grid\" : undefined,\n                opacity: stickFooter ? 0.97 : undefined,\n                outline: stickFooter ? theme.palette.mode === \"light\" ? `1px solid ${theme.palette.grey[300]}` : `1px solid ${theme.palette.grey[700]}` : undefined,\n                position: stickFooter ? \"sticky\" : undefined,\n                zIndex: stickFooter ? 1 : undefined\n            }, parseFromValuesOrFunc(tableFooterProps === null || tableFooterProps === void 0 ? void 0 : tableFooterProps.sx, theme)),\n        children: getFooterGroups().map((footerGroup)=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MRT_TableFooterRow, {\n                footerGroup: footerGroup,\n                table: table,\n                virtualColumns: virtualColumns,\n                virtualPaddingLeft: virtualPaddingLeft,\n                virtualPaddingRight: virtualPaddingRight\n            }, footerGroup.id))\n    }));\n};\nconst mrtFilterOptions = (localization)=>[\n        {\n            divider: false,\n            label: localization.filterFuzzy,\n            option: \"fuzzy\",\n            symbol: \"≈\"\n        },\n        {\n            divider: false,\n            label: localization.filterContains,\n            option: \"contains\",\n            symbol: \"*\"\n        },\n        {\n            divider: false,\n            label: localization.filterStartsWith,\n            option: \"startsWith\",\n            symbol: \"a\"\n        },\n        {\n            divider: true,\n            label: localization.filterEndsWith,\n            option: \"endsWith\",\n            symbol: \"z\"\n        },\n        {\n            divider: false,\n            label: localization.filterEquals,\n            option: \"equals\",\n            symbol: \"=\"\n        },\n        {\n            divider: true,\n            label: localization.filterNotEquals,\n            option: \"notEquals\",\n            symbol: \"≠\"\n        },\n        {\n            divider: false,\n            label: localization.filterBetween,\n            option: \"between\",\n            symbol: \"⇿\"\n        },\n        {\n            divider: true,\n            label: localization.filterBetweenInclusive,\n            option: \"betweenInclusive\",\n            symbol: \"⬌\"\n        },\n        {\n            divider: false,\n            label: localization.filterGreaterThan,\n            option: \"greaterThan\",\n            symbol: \">\"\n        },\n        {\n            divider: false,\n            label: localization.filterGreaterThanOrEqualTo,\n            option: \"greaterThanOrEqualTo\",\n            symbol: \"≥\"\n        },\n        {\n            divider: false,\n            label: localization.filterLessThan,\n            option: \"lessThan\",\n            symbol: \"<\"\n        },\n        {\n            divider: true,\n            label: localization.filterLessThanOrEqualTo,\n            option: \"lessThanOrEqualTo\",\n            symbol: \"≤\"\n        },\n        {\n            divider: false,\n            label: localization.filterEmpty,\n            option: \"empty\",\n            symbol: \"∅\"\n        },\n        {\n            divider: false,\n            label: localization.filterNotEmpty,\n            option: \"notEmpty\",\n            symbol: \"!∅\"\n        }\n    ];\nconst rangeModes = [\n    \"between\",\n    \"betweenInclusive\",\n    \"inNumberRange\"\n];\nconst emptyModes = [\n    \"empty\",\n    \"notEmpty\"\n];\nconst arrModes = [\n    \"arrIncludesSome\",\n    \"arrIncludesAll\",\n    \"arrIncludes\"\n];\nconst rangeVariants = [\n    \"range-slider\",\n    \"date-range\",\n    \"range\"\n];\nconst MRT_FilterOptionMenu = (_a)=>{\n    var _b, _c, _d, _e;\n    var { anchorEl, header, onSelect, setAnchorEl, setFilterValue, table } = _a, rest = __rest(_a, [\n        \"anchorEl\",\n        \"header\",\n        \"onSelect\",\n        \"setAnchorEl\",\n        \"setFilterValue\",\n        \"table\"\n    ]);\n    const { getState, options: { columnFilterModeOptions, globalFilterModeOptions, localization, renderColumnFilterModeMenuItems, renderGlobalFilterModeMenuItems }, setColumnFilterFns, setGlobalFilterFn } = table;\n    const { density, globalFilterFn } = getState();\n    const { column } = header !== null && header !== void 0 ? header : {};\n    const { columnDef } = column !== null && column !== void 0 ? column : {};\n    const currentFilterValue = column === null || column === void 0 ? void 0 : column.getFilterValue();\n    let allowedColumnFilterOptions = (_b = columnDef === null || columnDef === void 0 ? void 0 : columnDef.columnFilterModeOptions) !== null && _b !== void 0 ? _b : columnFilterModeOptions;\n    if (rangeVariants.includes(columnDef === null || columnDef === void 0 ? void 0 : columnDef.filterVariant)) {\n        allowedColumnFilterOptions = [\n            ...rangeModes,\n            ...allowedColumnFilterOptions !== null && allowedColumnFilterOptions !== void 0 ? allowedColumnFilterOptions : []\n        ].filter((option)=>rangeModes.includes(option));\n    }\n    const internalFilterOptions = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>mrtFilterOptions(localization).filter((filterOption)=>columnDef ? allowedColumnFilterOptions === undefined || (allowedColumnFilterOptions === null || allowedColumnFilterOptions === void 0 ? void 0 : allowedColumnFilterOptions.includes(filterOption.option)) : (!globalFilterModeOptions || globalFilterModeOptions.includes(filterOption.option)) && [\n                \"contains\",\n                \"fuzzy\",\n                \"startsWith\"\n            ].includes(filterOption.option)), []);\n    const handleSelectFilterMode = (option)=>{\n        var _a, _b;\n        const prevFilterMode = (_a = columnDef === null || columnDef === void 0 ? void 0 : columnDef._filterFn) !== null && _a !== void 0 ? _a : \"\";\n        if (!header || !column) {\n            // global filter mode\n            setGlobalFilterFn(option);\n        } else if (option !== prevFilterMode) {\n            // column filter mode\n            setColumnFilterFns((prev)=>Object.assign(Object.assign({}, prev), {\n                    [header.id]: option\n                }));\n            // reset filter value and/or perform new filter render\n            if (emptyModes.includes(option)) {\n                // will now be empty/notEmpty filter mode\n                if (currentFilterValue !== \" \" && !emptyModes.includes(prevFilterMode)) {\n                    column.setFilterValue(\" \");\n                } else if (currentFilterValue) {\n                    column.setFilterValue(currentFilterValue); // perform new filter render\n                }\n            } else if ((columnDef === null || columnDef === void 0 ? void 0 : columnDef.filterVariant) === \"multi-select\" || arrModes.includes(option)) {\n                // will now be array filter mode\n                if (currentFilterValue instanceof String || (currentFilterValue === null || currentFilterValue === void 0 ? void 0 : currentFilterValue.length)) {\n                    column.setFilterValue([]);\n                    setFilterValue === null || setFilterValue === void 0 ? void 0 : setFilterValue([]);\n                } else if (currentFilterValue) {\n                    column.setFilterValue(currentFilterValue); // perform new filter render\n                }\n            } else if (((_b = columnDef === null || columnDef === void 0 ? void 0 : columnDef.filterVariant) === null || _b === void 0 ? void 0 : _b.includes(\"range\")) || rangeModes.includes(option)) {\n                // will now be range filter mode\n                if (!Array.isArray(currentFilterValue) || !(currentFilterValue === null || currentFilterValue === void 0 ? void 0 : currentFilterValue.every((v)=>v === \"\")) && !rangeModes.includes(prevFilterMode)) {\n                    column.setFilterValue([\n                        \"\",\n                        \"\"\n                    ]);\n                    setFilterValue === null || setFilterValue === void 0 ? void 0 : setFilterValue(\"\");\n                } else {\n                    column.setFilterValue(currentFilterValue); // perform new filter render\n                }\n            } else {\n                // will now be single value filter mode\n                if (Array.isArray(currentFilterValue)) {\n                    column.setFilterValue(\"\");\n                    setFilterValue === null || setFilterValue === void 0 ? void 0 : setFilterValue(\"\");\n                } else {\n                    column.setFilterValue(currentFilterValue); // perform new filter render\n                }\n            }\n        }\n        setAnchorEl(null);\n        onSelect === null || onSelect === void 0 ? void 0 : onSelect();\n    };\n    const filterOption = !!header && columnDef ? columnDef._filterFn : globalFilterFn;\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Menu__WEBPACK_IMPORTED_MODULE_23__[\"default\"], Object.assign({\n        MenuListProps: {\n            dense: density === \"compact\"\n        },\n        anchorEl: anchorEl,\n        anchorOrigin: {\n            horizontal: \"right\",\n            vertical: \"center\"\n        },\n        onClose: ()=>setAnchorEl(null),\n        open: !!anchorEl\n    }, rest, {\n        children: (_e = header && column && columnDef ? (_d = (_c = columnDef.renderColumnFilterModeMenuItems) === null || _c === void 0 ? void 0 : _c.call(columnDef, {\n            column: column,\n            internalFilterOptions,\n            onSelectFilterMode: handleSelectFilterMode,\n            table\n        })) !== null && _d !== void 0 ? _d : renderColumnFilterModeMenuItems === null || renderColumnFilterModeMenuItems === void 0 ? void 0 : renderColumnFilterModeMenuItems({\n            column: column,\n            internalFilterOptions,\n            onSelectFilterMode: handleSelectFilterMode,\n            table\n        }) : renderGlobalFilterModeMenuItems === null || renderGlobalFilterModeMenuItems === void 0 ? void 0 : renderGlobalFilterModeMenuItems({\n            internalFilterOptions,\n            onSelectFilterMode: handleSelectFilterMode,\n            table\n        })) !== null && _e !== void 0 ? _e : internalFilterOptions.map(({ divider, label, option, symbol }, index)=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(_mui_material_MenuItem__WEBPACK_IMPORTED_MODULE_12__[\"default\"], {\n                divider: divider,\n                onClick: ()=>handleSelectFilterMode(option),\n                selected: option === filterOption,\n                sx: {\n                    alignItems: \"center\",\n                    display: \"flex\",\n                    gap: \"2ch\",\n                    my: 0,\n                    py: \"6px\"\n                },\n                value: option,\n                children: [\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Box__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n                        sx: {\n                            fontSize: \"1.25rem\",\n                            width: \"2ch\"\n                        },\n                        children: symbol\n                    }),\n                    label\n                ]\n            }, index))\n    }));\n};\nconst commonMenuItemStyles = {\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    my: 0,\n    py: \"6px\"\n};\nconst commonListItemStyles = {\n    alignItems: \"center\",\n    display: \"flex\"\n};\nconst MRT_ColumnActionMenu = (_a)=>{\n    var _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;\n    var { anchorEl, header, setAnchorEl, table } = _a, rest = __rest(_a, [\n        \"anchorEl\",\n        \"header\",\n        \"setAnchorEl\",\n        \"table\"\n    ]);\n    const { getState, options: { columnFilterDisplayMode, columnFilterModeOptions, enableColumnFilterModes, enableColumnFilters, enableColumnPinning, enableColumnResizing, enableGrouping, enableHiding, enableSorting, enableSortingRemoval, icons: { ArrowRightIcon, ClearAllIcon, DynamicFeedIcon, FilterListIcon, FilterListOffIcon, PushPinIcon, RestartAltIcon, SortIcon, ViewColumnIcon, VisibilityOffIcon }, localization, renderColumnActionsMenuItems }, refs: { filterInputRefs }, setColumnOrder, setColumnSizingInfo, setShowColumnFilters, toggleAllColumnsVisible } = table;\n    const { column } = header;\n    const { columnDef } = column;\n    const { columnSizing, columnVisibility, density, showColumnFilters } = getState();\n    const columnFilterValue = column.getFilterValue();\n    const [filterMenuAnchorEl, setFilterMenuAnchorEl] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const handleClearSort = ()=>{\n        column.clearSorting();\n        setAnchorEl(null);\n    };\n    const handleSortAsc = ()=>{\n        column.toggleSorting(false);\n        setAnchorEl(null);\n    };\n    const handleSortDesc = ()=>{\n        column.toggleSorting(true);\n        setAnchorEl(null);\n    };\n    const handleResetColumnSize = ()=>{\n        setColumnSizingInfo((old)=>Object.assign(Object.assign({}, old), {\n                isResizingColumn: false\n            }));\n        column.resetSize();\n        setAnchorEl(null);\n    };\n    const handleHideColumn = ()=>{\n        column.toggleVisibility(false);\n        setAnchorEl(null);\n    };\n    const handlePinColumn = (pinDirection)=>{\n        column.pin(pinDirection);\n        setAnchorEl(null);\n    };\n    const handleGroupByColumn = ()=>{\n        column.toggleGrouping();\n        setColumnOrder((old)=>[\n                \"mrt-row-expand\",\n                ...old\n            ]);\n        setAnchorEl(null);\n    };\n    const handleClearFilter = ()=>{\n        column.setFilterValue(\"\");\n        setAnchorEl(null);\n    };\n    const handleFilterByColumn = ()=>{\n        setShowColumnFilters(true);\n        queueMicrotask(()=>{\n            var _a;\n            return (_a = filterInputRefs.current[`${column.id}-0`]) === null || _a === void 0 ? void 0 : _a.focus();\n        });\n        setAnchorEl(null);\n    };\n    const handleShowAllColumns = ()=>{\n        toggleAllColumnsVisible(true);\n        setAnchorEl(null);\n    };\n    const handleOpenFilterModeMenu = (event)=>{\n        event.stopPropagation();\n        setFilterMenuAnchorEl(event.currentTarget);\n    };\n    const isSelectFilter = !!columnDef.filterSelectOptions;\n    const allowedColumnFilterOptions = (_b = columnDef === null || columnDef === void 0 ? void 0 : columnDef.columnFilterModeOptions) !== null && _b !== void 0 ? _b : columnFilterModeOptions;\n    const showFilterModeSubMenu = enableColumnFilterModes && columnDef.enableColumnFilterModes !== false && !isSelectFilter && (allowedColumnFilterOptions === undefined || !!(allowedColumnFilterOptions === null || allowedColumnFilterOptions === void 0 ? void 0 : allowedColumnFilterOptions.length));\n    const internalColumnMenuItems = [\n        ...enableSorting && column.getCanSort() ? [\n            enableSortingRemoval !== false && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_MenuItem__WEBPACK_IMPORTED_MODULE_12__[\"default\"], {\n                disabled: !column.getIsSorted(),\n                onClick: handleClearSort,\n                sx: commonMenuItemStyles,\n                children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(_mui_material_Box__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n                    sx: commonListItemStyles,\n                    children: [\n                        (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_ListItemIcon__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n                            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ClearAllIcon, {})\n                        }),\n                        localization.clearSort\n                    ]\n                })\n            }, 0),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_MenuItem__WEBPACK_IMPORTED_MODULE_12__[\"default\"], {\n                disabled: column.getIsSorted() === \"asc\",\n                onClick: handleSortAsc,\n                sx: commonMenuItemStyles,\n                children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(_mui_material_Box__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n                    sx: commonListItemStyles,\n                    children: [\n                        (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_ListItemIcon__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n                            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SortIcon, {\n                                style: {\n                                    transform: \"rotate(180deg) scaleX(-1)\"\n                                }\n                            })\n                        }),\n                        (_c = localization.sortByColumnAsc) === null || _c === void 0 ? void 0 : _c.replace(\"{column}\", String(columnDef.header))\n                    ]\n                })\n            }, 1),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_MenuItem__WEBPACK_IMPORTED_MODULE_12__[\"default\"], {\n                disabled: column.getIsSorted() === \"desc\",\n                divider: enableColumnFilters || enableGrouping || enableHiding,\n                onClick: handleSortDesc,\n                sx: commonMenuItemStyles,\n                children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(_mui_material_Box__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n                    sx: commonListItemStyles,\n                    children: [\n                        (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_ListItemIcon__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n                            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SortIcon, {})\n                        }),\n                        (_d = localization.sortByColumnDesc) === null || _d === void 0 ? void 0 : _d.replace(\"{column}\", String(columnDef.header))\n                    ]\n                })\n            }, 2)\n        ] : [],\n        ...enableColumnFilters && column.getCanFilter() ? [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_MenuItem__WEBPACK_IMPORTED_MODULE_12__[\"default\"], {\n                disabled: !columnFilterValue || Array.isArray(columnFilterValue) && !columnFilterValue.filter((value)=>value).length,\n                onClick: handleClearFilter,\n                sx: commonMenuItemStyles,\n                children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(_mui_material_Box__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n                    sx: commonListItemStyles,\n                    children: [\n                        (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_ListItemIcon__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n                            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(FilterListOffIcon, {})\n                        }),\n                        localization.clearFilter\n                    ]\n                })\n            }, 3),\n            columnFilterDisplayMode === \"subheader\" && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(_mui_material_MenuItem__WEBPACK_IMPORTED_MODULE_12__[\"default\"], {\n                disabled: showColumnFilters && !enableColumnFilterModes,\n                divider: enableGrouping || enableHiding,\n                onClick: showColumnFilters ? handleOpenFilterModeMenu : handleFilterByColumn,\n                sx: commonMenuItemStyles,\n                children: [\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(_mui_material_Box__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n                        sx: commonListItemStyles,\n                        children: [\n                            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_ListItemIcon__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n                                children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(FilterListIcon, {})\n                            }),\n                            (_e = localization.filterByColumn) === null || _e === void 0 ? void 0 : _e.replace(\"{column}\", String(columnDef.header))\n                        ]\n                    }),\n                    showFilterModeSubMenu && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_IconButton__WEBPACK_IMPORTED_MODULE_9__[\"default\"], {\n                        onClick: handleOpenFilterModeMenu,\n                        onMouseEnter: handleOpenFilterModeMenu,\n                        size: \"small\",\n                        sx: {\n                            p: 0\n                        },\n                        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ArrowRightIcon, {})\n                    })\n                ]\n            }, 4),\n            showFilterModeSubMenu && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MRT_FilterOptionMenu, {\n                anchorEl: filterMenuAnchorEl,\n                header: header,\n                onSelect: handleFilterByColumn,\n                setAnchorEl: setFilterMenuAnchorEl,\n                table: table\n            }, 5)\n        ].filter(Boolean) : [],\n        ...enableGrouping && column.getCanGroup() ? [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_MenuItem__WEBPACK_IMPORTED_MODULE_12__[\"default\"], {\n                divider: enableColumnPinning,\n                onClick: handleGroupByColumn,\n                sx: commonMenuItemStyles,\n                children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(_mui_material_Box__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n                    sx: commonListItemStyles,\n                    children: [\n                        (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_ListItemIcon__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n                            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(DynamicFeedIcon, {})\n                        }),\n                        (_f = localization[column.getIsGrouped() ? \"ungroupByColumn\" : \"groupByColumn\"]) === null || _f === void 0 ? void 0 : _f.replace(\"{column}\", String(columnDef.header))\n                    ]\n                })\n            }, 6)\n        ] : [],\n        ...enableColumnPinning && column.getCanPin() ? [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_MenuItem__WEBPACK_IMPORTED_MODULE_12__[\"default\"], {\n                disabled: column.getIsPinned() === \"left\" || !column.getCanPin(),\n                onClick: ()=>handlePinColumn(\"left\"),\n                sx: commonMenuItemStyles,\n                children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(_mui_material_Box__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n                    sx: commonListItemStyles,\n                    children: [\n                        (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_ListItemIcon__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n                            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(PushPinIcon, {\n                                style: {\n                                    transform: \"rotate(90deg)\"\n                                }\n                            })\n                        }),\n                        localization.pinToLeft\n                    ]\n                })\n            }, 7),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_MenuItem__WEBPACK_IMPORTED_MODULE_12__[\"default\"], {\n                disabled: column.getIsPinned() === \"right\" || !column.getCanPin(),\n                onClick: ()=>handlePinColumn(\"right\"),\n                sx: commonMenuItemStyles,\n                children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(_mui_material_Box__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n                    sx: commonListItemStyles,\n                    children: [\n                        (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_ListItemIcon__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n                            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(PushPinIcon, {\n                                style: {\n                                    transform: \"rotate(-90deg)\"\n                                }\n                            })\n                        }),\n                        localization.pinToRight\n                    ]\n                })\n            }, 8),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_MenuItem__WEBPACK_IMPORTED_MODULE_12__[\"default\"], {\n                disabled: !column.getIsPinned(),\n                divider: enableHiding,\n                onClick: ()=>handlePinColumn(false),\n                sx: commonMenuItemStyles,\n                children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(_mui_material_Box__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n                    sx: commonListItemStyles,\n                    children: [\n                        (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_ListItemIcon__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n                            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(PushPinIcon, {})\n                        }),\n                        localization.unpin\n                    ]\n                })\n            }, 9)\n        ] : [],\n        ...enableColumnResizing && column.getCanResize() ? [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_MenuItem__WEBPACK_IMPORTED_MODULE_12__[\"default\"], {\n                disabled: !columnSizing[column.id],\n                onClick: handleResetColumnSize,\n                sx: commonMenuItemStyles,\n                children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(_mui_material_Box__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n                    sx: commonListItemStyles,\n                    children: [\n                        (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_ListItemIcon__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n                            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(RestartAltIcon, {})\n                        }),\n                        localization.resetColumnSize\n                    ]\n                })\n            }, 10)\n        ] : [],\n        ...enableHiding ? [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_MenuItem__WEBPACK_IMPORTED_MODULE_12__[\"default\"], {\n                disabled: !column.getCanHide(),\n                onClick: handleHideColumn,\n                sx: commonMenuItemStyles,\n                children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(_mui_material_Box__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n                    sx: commonListItemStyles,\n                    children: [\n                        (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_ListItemIcon__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n                            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(VisibilityOffIcon, {})\n                        }),\n                        (_g = localization.hideColumn) === null || _g === void 0 ? void 0 : _g.replace(\"{column}\", String(columnDef.header))\n                    ]\n                })\n            }, 11),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_MenuItem__WEBPACK_IMPORTED_MODULE_12__[\"default\"], {\n                disabled: !Object.values(columnVisibility).filter((visible)=>!visible).length,\n                onClick: handleShowAllColumns,\n                sx: commonMenuItemStyles,\n                children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(_mui_material_Box__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n                    sx: commonListItemStyles,\n                    children: [\n                        (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_ListItemIcon__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n                            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ViewColumnIcon, {})\n                        }),\n                        (_h = localization.showAllColumns) === null || _h === void 0 ? void 0 : _h.replace(\"{column}\", String(columnDef.header))\n                    ]\n                })\n            }, 12)\n        ] : []\n    ].filter(Boolean);\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Menu__WEBPACK_IMPORTED_MODULE_23__[\"default\"], Object.assign({\n        MenuListProps: {\n            dense: density === \"compact\"\n        },\n        anchorEl: anchorEl,\n        onClose: ()=>setAnchorEl(null),\n        open: !!anchorEl\n    }, rest, {\n        children: (_l = (_k = (_j = columnDef.renderColumnActionsMenuItems) === null || _j === void 0 ? void 0 : _j.call(columnDef, {\n            closeMenu: ()=>setAnchorEl(null),\n            column,\n            internalColumnMenuItems,\n            table\n        })) !== null && _k !== void 0 ? _k : renderColumnActionsMenuItems === null || renderColumnActionsMenuItems === void 0 ? void 0 : renderColumnActionsMenuItems({\n            closeMenu: ()=>setAnchorEl(null),\n            column,\n            internalColumnMenuItems,\n            table\n        })) !== null && _l !== void 0 ? _l : internalColumnMenuItems\n    }));\n};\nconst MRT_TableHeadCellColumnActionsButton = (_a)=>{\n    var _b;\n    var { header, table } = _a, rest = __rest(_a, [\n        \"header\",\n        \"table\"\n    ]);\n    const { options: { icons: { MoreVertIcon }, localization, muiColumnActionsButtonProps } } = table;\n    const { column } = header;\n    const { columnDef } = column;\n    const [anchorEl, setAnchorEl] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const handleClick = (event)=>{\n        event.stopPropagation();\n        event.preventDefault();\n        setAnchorEl(event.currentTarget);\n    };\n    const iconButtonProps = Object.assign(Object.assign(Object.assign({}, parseFromValuesOrFunc(muiColumnActionsButtonProps, {\n        column,\n        table\n    })), parseFromValuesOrFunc(columnDef.muiColumnActionsButtonProps, {\n        column,\n        table\n    })), rest);\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Tooltip__WEBPACK_IMPORTED_MODULE_8__[\"default\"], {\n                enterDelay: 1000,\n                enterNextDelay: 1000,\n                placement: \"top\",\n                title: (_b = iconButtonProps === null || iconButtonProps === void 0 ? void 0 : iconButtonProps.title) !== null && _b !== void 0 ? _b : localization.columnActions,\n                children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_IconButton__WEBPACK_IMPORTED_MODULE_9__[\"default\"], Object.assign({\n                    \"aria-label\": localization.columnActions,\n                    onClick: handleClick,\n                    size: \"small\"\n                }, iconButtonProps, {\n                    sx: (theme)=>Object.assign({\n                            \"&:hover\": {\n                                opacity: 1\n                            },\n                            height: \"2rem\",\n                            m: \"-8px -4px\",\n                            opacity: 0.3,\n                            transition: \"all 150ms\",\n                            width: \"2rem\"\n                        }, parseFromValuesOrFunc(iconButtonProps === null || iconButtonProps === void 0 ? void 0 : iconButtonProps.sx, theme)),\n                    title: undefined,\n                    children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MoreVertIcon, {\n                        style: {\n                            transform: \"scale(0.9)\"\n                        }\n                    })\n                }))\n            }),\n            anchorEl && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MRT_ColumnActionMenu, {\n                anchorEl: anchorEl,\n                header: header,\n                setAnchorEl: setAnchorEl,\n                table: table\n            })\n        ]\n    });\n};\nconst MRT_FilterCheckbox = (_a)=>{\n    var _b, _c, _d;\n    var { column, table } = _a, rest = __rest(_a, [\n        \"column\",\n        \"table\"\n    ]);\n    const { getState, options: { localization, muiFilterCheckboxProps } } = table;\n    const { density } = getState();\n    const { columnDef } = column;\n    const checkboxProps = Object.assign(Object.assign(Object.assign({}, parseFromValuesOrFunc(muiFilterCheckboxProps, {\n        column,\n        table\n    })), parseFromValuesOrFunc(columnDef.muiFilterCheckboxProps, {\n        column,\n        table\n    })), rest);\n    const filterLabel = (_b = localization.filterByColumn) === null || _b === void 0 ? void 0 : _b.replace(\"{column}\", columnDef.header);\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Tooltip__WEBPACK_IMPORTED_MODULE_8__[\"default\"], {\n        enterDelay: 1000,\n        enterNextDelay: 1000,\n        title: (_c = checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.title) !== null && _c !== void 0 ? _c : filterLabel,\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_FormControlLabel__WEBPACK_IMPORTED_MODULE_25__[\"default\"], {\n            control: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Checkbox__WEBPACK_IMPORTED_MODULE_26__[\"default\"], Object.assign({\n                checked: column.getFilterValue() === \"true\",\n                color: column.getFilterValue() === undefined ? \"default\" : \"primary\",\n                indeterminate: column.getFilterValue() === undefined,\n                size: density === \"compact\" ? \"small\" : \"medium\"\n            }, checkboxProps, {\n                onChange: (e, checked)=>{\n                    var _a;\n                    column.setFilterValue(column.getFilterValue() === undefined ? \"true\" : column.getFilterValue() === \"true\" ? \"false\" : undefined);\n                    (_a = checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.onChange) === null || _a === void 0 ? void 0 : _a.call(checkboxProps, e, checked);\n                },\n                onClick: (e)=>{\n                    var _a;\n                    e.stopPropagation();\n                    (_a = checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.onClick) === null || _a === void 0 ? void 0 : _a.call(checkboxProps, e);\n                },\n                sx: (theme)=>Object.assign({\n                        height: \"2.5rem\",\n                        width: \"2.5rem\"\n                    }, parseFromValuesOrFunc(checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.sx, theme))\n            })),\n            disableTypography: true,\n            label: (_d = checkboxProps.title) !== null && _d !== void 0 ? _d : filterLabel,\n            sx: {\n                color: \"text.secondary\",\n                fontWeight: \"normal\",\n                mt: \"-4px\"\n            },\n            title: undefined\n        })\n    });\n};\nconst MRT_FilterTextField = (_a)=>{\n    var _b, _c, _d, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;\n    var { header, rangeFilterIndex, table } = _a, rest = __rest(_a, [\n        \"header\",\n        \"rangeFilterIndex\",\n        \"table\"\n    ]);\n    const { options: { columnFilterModeOptions, enableColumnFilterModes, icons: { CloseIcon, FilterListIcon }, localization, manualFiltering, muiFilterAutocompleteProps, muiFilterDatePickerProps, muiFilterTextFieldProps }, refs: { filterInputRefs }, setColumnFilterFns } = table;\n    const { column } = header;\n    const { columnDef } = column;\n    const { filterVariant } = columnDef;\n    const textFieldProps = Object.assign(Object.assign(Object.assign({}, parseFromValuesOrFunc(muiFilterTextFieldProps, {\n        column,\n        table\n    })), parseFromValuesOrFunc(columnDef.muiFilterTextFieldProps, {\n        column,\n        table\n    })), rest);\n    const autocompleteProps = Object.assign(Object.assign({}, parseFromValuesOrFunc(muiFilterAutocompleteProps, {\n        column,\n        table\n    })), parseFromValuesOrFunc(columnDef.muiFilterAutocompleteProps, {\n        column,\n        table\n    }));\n    const datePickerProps = Object.assign(Object.assign({}, parseFromValuesOrFunc(muiFilterDatePickerProps, {\n        column,\n        table\n    })), parseFromValuesOrFunc(columnDef.muiFilterDatePickerProps, {\n        column,\n        table\n    }));\n    const isDateFilter = filterVariant === null || filterVariant === void 0 ? void 0 : filterVariant.startsWith(\"date\");\n    const isAutocompleteFilter = filterVariant === \"autocomplete\";\n    const isRangeFilter = (filterVariant === null || filterVariant === void 0 ? void 0 : filterVariant.includes(\"range\")) || rangeFilterIndex !== undefined;\n    const isSelectFilter = filterVariant === \"select\";\n    const isMultiSelectFilter = filterVariant === \"multi-select\";\n    const isTextboxFilter = [\n        \"autocomplete\",\n        \"text\"\n    ].includes(filterVariant) || !isSelectFilter && !isMultiSelectFilter;\n    const currentFilterOption = columnDef._filterFn;\n    const filterChipLabel = [\n        \"empty\",\n        \"notEmpty\"\n    ].includes(currentFilterOption) ? localization[`filter${((_c = (_b = currentFilterOption === null || currentFilterOption === void 0 ? void 0 : currentFilterOption.charAt) === null || _b === void 0 ? void 0 : _b.call(currentFilterOption, 0)) === null || _c === void 0 ? void 0 : _c.toUpperCase()) + (currentFilterOption === null || currentFilterOption === void 0 ? void 0 : currentFilterOption.slice(1))}`] : \"\";\n    const filterPlaceholder = !isRangeFilter ? (_d = textFieldProps === null || textFieldProps === void 0 ? void 0 : textFieldProps.placeholder) !== null && _d !== void 0 ? _d : (_f = localization.filterByColumn) === null || _f === void 0 ? void 0 : _f.replace(\"{column}\", String(columnDef.header)) : rangeFilterIndex === 0 ? localization.min : rangeFilterIndex === 1 ? localization.max : \"\";\n    const allowedColumnFilterOptions = (_g = columnDef === null || columnDef === void 0 ? void 0 : columnDef.columnFilterModeOptions) !== null && _g !== void 0 ? _g : columnFilterModeOptions;\n    const showChangeModeButton = enableColumnFilterModes && columnDef.enableColumnFilterModes !== false && !rangeFilterIndex && (allowedColumnFilterOptions === undefined || !!(allowedColumnFilterOptions === null || allowedColumnFilterOptions === void 0 ? void 0 : allowedColumnFilterOptions.length));\n    const facetedUniqueValues = column.getFacetedUniqueValues();\n    const [anchorEl, setAnchorEl] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [filterValue, setFilterValue] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(()=>{\n        var _a, _b;\n        return isMultiSelectFilter ? column.getFilterValue() || [] : isRangeFilter ? ((_a = column.getFilterValue()) === null || _a === void 0 ? void 0 : _a[rangeFilterIndex]) || \"\" : (_b = column.getFilterValue()) !== null && _b !== void 0 ? _b : \"\";\n    });\n    const handleChangeDebounced = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((0,_mui_material_utils__WEBPACK_IMPORTED_MODULE_27__[\"default\"])((newValue)=>{\n        if (isRangeFilter) {\n            column.setFilterValue((old)=>{\n                const newFilterValues = old !== null && old !== void 0 ? old : [\n                    \"\",\n                    \"\"\n                ];\n                newFilterValues[rangeFilterIndex] = newValue !== null && newValue !== void 0 ? newValue : undefined;\n                return newFilterValues;\n            });\n        } else {\n            column.setFilterValue(newValue !== null && newValue !== void 0 ? newValue : undefined);\n        }\n    }, isTextboxFilter ? manualFiltering ? 400 : 200 : 1), []);\n    const handleChange = (newValue)=>{\n        setFilterValue(newValue !== null && newValue !== void 0 ? newValue : \"\");\n        handleChangeDebounced(newValue);\n    };\n    const handleTextFieldChange = (event)=>{\n        var _a;\n        const newValue = textFieldProps.type === \"date\" ? event.target.valueAsDate : textFieldProps.type === \"number\" ? event.target.valueAsNumber : event.target.value;\n        handleChange(newValue);\n        (_a = textFieldProps === null || textFieldProps === void 0 ? void 0 : textFieldProps.onChange) === null || _a === void 0 ? void 0 : _a.call(textFieldProps, event);\n    };\n    const handleClear = ()=>{\n        if (isMultiSelectFilter) {\n            setFilterValue([]);\n            column.setFilterValue([]);\n        } else if (isRangeFilter) {\n            setFilterValue(\"\");\n            column.setFilterValue((old)=>{\n                const newFilterValues = Array.isArray(old) && old || [\n                    \"\",\n                    \"\"\n                ];\n                newFilterValues[rangeFilterIndex] = undefined;\n                return newFilterValues;\n            });\n        } else {\n            setFilterValue(\"\");\n            column.setFilterValue(undefined);\n        }\n    };\n    const handleClearEmptyFilterChip = ()=>{\n        setFilterValue(\"\");\n        column.setFilterValue(undefined);\n        setColumnFilterFns((prev)=>{\n            var _a;\n            return Object.assign(Object.assign({}, prev), {\n                [header.id]: (_a = allowedColumnFilterOptions === null || allowedColumnFilterOptions === void 0 ? void 0 : allowedColumnFilterOptions[0]) !== null && _a !== void 0 ? _a : \"fuzzy\"\n            });\n        });\n    };\n    const handleFilterMenuOpen = (event)=>{\n        setAnchorEl(event.currentTarget);\n    };\n    const isMounted = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (isMounted.current) {\n            const filterValue = column.getFilterValue();\n            if (filterValue === undefined) {\n                handleClear();\n            } else if (isRangeFilter && rangeFilterIndex !== undefined) {\n                setFilterValue(filterValue[rangeFilterIndex]);\n            } else {\n                setFilterValue(filterValue);\n            }\n        }\n        isMounted.current = true;\n    }, [\n        column.getFilterValue()\n    ]);\n    if (columnDef.Filter) {\n        return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n            children: (_h = columnDef.Filter) === null || _h === void 0 ? void 0 : _h.call(columnDef, {\n                column,\n                header,\n                rangeFilterIndex,\n                table\n            })\n        });\n    }\n    const dropdownOptions = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        var _a;\n        return (_a = columnDef.filterSelectOptions) !== null && _a !== void 0 ? _a : (isSelectFilter || isMultiSelectFilter || isAutocompleteFilter) && facetedUniqueValues ? Array.from(facetedUniqueValues.keys()).filter((value)=>value !== null && value !== undefined).sort((a, b)=>a.localeCompare(b)) : undefined;\n    }, [\n        columnDef.filterSelectOptions,\n        facetedUniqueValues,\n        isMultiSelectFilter,\n        isSelectFilter\n    ]);\n    const endAdornment = !isAutocompleteFilter && !isDateFilter && !filterChipLabel ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_InputAdornment__WEBPACK_IMPORTED_MODULE_28__[\"default\"], {\n        position: \"end\",\n        sx: {\n            mr: isSelectFilter || isMultiSelectFilter ? \"20px\" : undefined\n        },\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Tooltip__WEBPACK_IMPORTED_MODULE_8__[\"default\"], {\n            placement: \"right\",\n            title: (_j = localization.clearFilter) !== null && _j !== void 0 ? _j : \"\",\n            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n                children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_IconButton__WEBPACK_IMPORTED_MODULE_9__[\"default\"], {\n                    \"aria-label\": localization.clearFilter,\n                    disabled: !((_k = filterValue === null || filterValue === void 0 ? void 0 : filterValue.toString()) === null || _k === void 0 ? void 0 : _k.length),\n                    onClick: handleClear,\n                    size: \"small\",\n                    sx: {\n                        height: \"2rem\",\n                        transform: \"scale(0.9)\",\n                        width: \"2rem\"\n                    },\n                    children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(CloseIcon, {})\n                })\n            })\n        })\n    }) : null;\n    const startAdornment = showChangeModeButton ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(_mui_material_InputAdornment__WEBPACK_IMPORTED_MODULE_28__[\"default\"], {\n        position: \"start\",\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Tooltip__WEBPACK_IMPORTED_MODULE_8__[\"default\"], {\n                title: localization.changeFilterMode,\n                children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n                    children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_IconButton__WEBPACK_IMPORTED_MODULE_9__[\"default\"], {\n                        \"aria-label\": localization.changeFilterMode,\n                        onClick: handleFilterMenuOpen,\n                        size: \"small\",\n                        sx: {\n                            height: \"1.75rem\",\n                            width: \"1.75rem\"\n                        },\n                        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(FilterListIcon, {})\n                    })\n                })\n            }),\n            filterChipLabel && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Chip__WEBPACK_IMPORTED_MODULE_29__[\"default\"], {\n                label: filterChipLabel,\n                onDelete: handleClearEmptyFilterChip\n            })\n        ]\n    }) : null;\n    const commonTextFieldProps = Object.assign(Object.assign({\n        FormHelperTextProps: {\n            sx: {\n                fontSize: \"0.75rem\",\n                lineHeight: \"0.8rem\",\n                whiteSpace: \"nowrap\"\n            }\n        },\n        InputProps: endAdornment //hack because mui looks for presence of endAdornment key instead of undefined\n         ? {\n            endAdornment,\n            startAdornment\n        } : {\n            startAdornment\n        },\n        fullWidth: true,\n        helperText: showChangeModeButton ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"label\", {\n            children: localization.filterMode.replace(\"{filterType}\", // @ts-ignore\n            localization[`filter${((_l = currentFilterOption === null || currentFilterOption === void 0 ? void 0 : currentFilterOption.charAt(0)) === null || _l === void 0 ? void 0 : _l.toUpperCase()) + (currentFilterOption === null || currentFilterOption === void 0 ? void 0 : currentFilterOption.slice(1))}`])\n        }) : null,\n        inputProps: {\n            \"aria-label\": filterPlaceholder,\n            autoComplete: \"new-password\",\n            disabled: !!filterChipLabel,\n            sx: {\n                textOverflow: \"ellipsis\",\n                width: filterChipLabel ? 0 : undefined\n            },\n            title: filterPlaceholder\n        },\n        inputRef: (inputRef)=>{\n            filterInputRefs.current[`${column.id}-${rangeFilterIndex !== null && rangeFilterIndex !== void 0 ? rangeFilterIndex : 0}`] = inputRef;\n            if (textFieldProps.inputRef) {\n                textFieldProps.inputRef = inputRef;\n            }\n        },\n        margin: \"none\",\n        onClick: (e)=>e.stopPropagation(),\n        placeholder: filterChipLabel || isSelectFilter || isMultiSelectFilter ? undefined : filterPlaceholder,\n        variant: \"standard\"\n    }, textFieldProps), {\n        sx: (theme)=>Object.assign({\n                minWidth: isDateFilter ? \"160px\" : enableColumnFilterModes && rangeFilterIndex === 0 ? \"110px\" : isRangeFilter ? \"100px\" : !filterChipLabel ? \"120px\" : \"auto\",\n                mx: \"-2px\",\n                p: 0,\n                width: \"calc(100% + 4px)\"\n            }, parseFromValuesOrFunc(textFieldProps === null || textFieldProps === void 0 ? void 0 : textFieldProps.sx, theme))\n    });\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n        children: [\n            isDateFilter ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_x_date_pickers_DatePicker__WEBPACK_IMPORTED_MODULE_30__.DatePicker, Object.assign({\n                onChange: (newDate)=>{\n                    handleChange(newDate);\n                },\n                value: filterValue || null\n            }, datePickerProps, {\n                slotProps: {\n                    field: Object.assign({\n                        clearable: true,\n                        onClear: ()=>handleClear()\n                    }, (_m = datePickerProps === null || datePickerProps === void 0 ? void 0 : datePickerProps.slotProps) === null || _m === void 0 ? void 0 : _m.field),\n                    textField: Object.assign(Object.assign({}, commonTextFieldProps), (_o = datePickerProps === null || datePickerProps === void 0 ? void 0 : datePickerProps.slotProps) === null || _o === void 0 ? void 0 : _o.textField)\n                }\n            })) : isAutocompleteFilter ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Autocomplete__WEBPACK_IMPORTED_MODULE_31__[\"default\"], Object.assign({\n                freeSolo: true,\n                getOptionLabel: (option)=>getValueAndLabel(option).label,\n                onChange: (_e, newValue)=>handleChange(getValueAndLabel(newValue).value),\n                options: (_p = dropdownOptions === null || dropdownOptions === void 0 ? void 0 : dropdownOptions.map((option)=>getValueAndLabel(option))) !== null && _p !== void 0 ? _p : []\n            }, autocompleteProps, {\n                renderInput: (builtinTextFieldProps)=>{\n                    var _a;\n                    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_TextField__WEBPACK_IMPORTED_MODULE_11__[\"default\"], Object.assign({}, builtinTextFieldProps, commonTextFieldProps, {\n                        InputProps: Object.assign(Object.assign({}, builtinTextFieldProps.InputProps), {\n                            startAdornment: (_a = commonTextFieldProps === null || commonTextFieldProps === void 0 ? void 0 : commonTextFieldProps.InputProps) === null || _a === void 0 ? void 0 : _a.startAdornment\n                        }),\n                        inputProps: Object.assign(Object.assign({}, builtinTextFieldProps.inputProps), commonTextFieldProps === null || commonTextFieldProps === void 0 ? void 0 : commonTextFieldProps.inputProps),\n                        onChange: handleTextFieldChange\n                    }));\n                },\n                value: filterValue\n            })) : (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_TextField__WEBPACK_IMPORTED_MODULE_11__[\"default\"], Object.assign({\n                SelectProps: {\n                    displayEmpty: true,\n                    multiple: isMultiSelectFilter,\n                    renderValue: isMultiSelectFilter ? (selected)=>!(selected === null || selected === void 0 ? void 0 : selected.length) ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Box__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n                            sx: {\n                                opacity: 0.5\n                            },\n                            children: filterPlaceholder\n                        }) : (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Box__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n                            sx: {\n                                display: \"flex\",\n                                flexWrap: \"wrap\",\n                                gap: \"2px\"\n                            },\n                            children: selected === null || selected === void 0 ? void 0 : selected.map((value)=>{\n                                const selectedValue = dropdownOptions === null || dropdownOptions === void 0 ? void 0 : dropdownOptions.find((option)=>getValueAndLabel(option).value === value);\n                                return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Chip__WEBPACK_IMPORTED_MODULE_29__[\"default\"], {\n                                    label: getValueAndLabel(selectedValue).label\n                                }, value);\n                            })\n                        }) : undefined\n                },\n                onChange: handleTextFieldChange,\n                select: isSelectFilter || isMultiSelectFilter\n            }, commonTextFieldProps, {\n                value: filterValue !== null && filterValue !== void 0 ? filterValue : \"\",\n                children: (isSelectFilter || isMultiSelectFilter) && [\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_MenuItem__WEBPACK_IMPORTED_MODULE_12__[\"default\"], {\n                        disabled: true,\n                        divider: true,\n                        hidden: true,\n                        value: \"\",\n                        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Box__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n                            sx: {\n                                opacity: 0.5\n                            },\n                            children: filterPlaceholder\n                        })\n                    }, \"p\"),\n                    ...[\n                        (_q = textFieldProps.children) !== null && _q !== void 0 ? _q : dropdownOptions === null || dropdownOptions === void 0 ? void 0 : dropdownOptions.map((option, index)=>{\n                            var _a;\n                            const { label, value } = getValueAndLabel(option);\n                            return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(_mui_material_MenuItem__WEBPACK_IMPORTED_MODULE_12__[\"default\"], {\n                                sx: {\n                                    alignItems: \"center\",\n                                    display: \"flex\",\n                                    gap: \"0.5rem\",\n                                    m: 0\n                                },\n                                value: value,\n                                children: [\n                                    isMultiSelectFilter && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Checkbox__WEBPACK_IMPORTED_MODULE_26__[\"default\"], {\n                                        checked: ((_a = column.getFilterValue()) !== null && _a !== void 0 ? _a : []).includes(value),\n                                        sx: {\n                                            mr: \"0.5rem\"\n                                        }\n                                    }),\n                                    label,\n                                    \" \",\n                                    !columnDef.filterSelectOptions && `(${facetedUniqueValues.get(value)})`\n                                ]\n                            }, `${index}-${value}`);\n                        })\n                    ]\n                ]\n            })),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MRT_FilterOptionMenu, {\n                anchorEl: anchorEl,\n                header: header,\n                setAnchorEl: setAnchorEl,\n                setFilterValue: setFilterValue,\n                table: table\n            })\n        ]\n    });\n};\nconst MRT_FilterRangeFields = (_a)=>{\n    var { header, table } = _a, rest = __rest(_a, [\n        \"header\",\n        \"table\"\n    ]);\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(_mui_material_Box__WEBPACK_IMPORTED_MODULE_7__[\"default\"], Object.assign({}, rest, {\n        sx: (theme)=>Object.assign({\n                display: \"grid\",\n                gap: \"1rem\",\n                gridTemplateColumns: \"1fr 1fr\"\n            }, parseFromValuesOrFunc(rest === null || rest === void 0 ? void 0 : rest.sx, theme)),\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MRT_FilterTextField, {\n                header: header,\n                rangeFilterIndex: 0,\n                table: table\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MRT_FilterTextField, {\n                header: header,\n                rangeFilterIndex: 1,\n                table: table\n            })\n        ]\n    }));\n};\nconst MRT_FilterRangeSlider = (_a)=>{\n    var _b, _c;\n    var { header, table } = _a, rest = __rest(_a, [\n        \"header\",\n        \"table\"\n    ]);\n    const { options: { enableColumnFilterModes, localization, muiFilterSliderProps }, refs: { filterInputRefs } } = table;\n    const { column } = header;\n    const { columnDef } = column;\n    const currentFilterOption = columnDef._filterFn;\n    const showChangeModeButton = enableColumnFilterModes && columnDef.enableColumnFilterModes !== false;\n    const sliderProps = Object.assign(Object.assign(Object.assign({}, parseFromValuesOrFunc(muiFilterSliderProps, {\n        column,\n        table\n    })), parseFromValuesOrFunc(columnDef.muiFilterSliderProps, {\n        column,\n        table\n    })), rest);\n    let [min, max] = sliderProps.min !== undefined && sliderProps.max !== undefined ? [\n        sliderProps.min,\n        sliderProps.max\n    ] : (_b = column.getFacetedMinMaxValues()) !== null && _b !== void 0 ? _b : [\n        0,\n        1\n    ];\n    //fix potential TanStack Table bugs where min or max is an array\n    if (Array.isArray(min)) min = min[0];\n    if (Array.isArray(max)) max = max[0];\n    if (min === null) min = 0;\n    if (max === null) max = 1;\n    const [filterValues, setFilterValues] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([\n        min,\n        max\n    ]);\n    const columnFilterValue = column.getFilterValue();\n    const isMounted = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (isMounted.current) {\n            if (columnFilterValue === undefined) {\n                setFilterValues([\n                    min,\n                    max\n                ]);\n            } else if (Array.isArray(columnFilterValue)) {\n                setFilterValues(columnFilterValue);\n            }\n        }\n        isMounted.current = true;\n    }, [\n        columnFilterValue,\n        min,\n        max\n    ]);\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(_mui_material_Stack__WEBPACK_IMPORTED_MODULE_32__[\"default\"], {\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Slider__WEBPACK_IMPORTED_MODULE_33__[\"default\"], Object.assign({\n                disableSwap: true,\n                max: max,\n                min: min,\n                onChange: (_event, values)=>{\n                    setFilterValues(values);\n                },\n                onChangeCommitted: (_event, value)=>{\n                    if (Array.isArray(value)) {\n                        if (value[0] <= min && value[1] >= max) {\n                            //if the user has selected the entire range, remove the filter\n                            column.setFilterValue(undefined);\n                        } else {\n                            column.setFilterValue(value);\n                        }\n                    }\n                },\n                value: filterValues,\n                valueLabelDisplay: \"auto\"\n            }, sliderProps, {\n                slotProps: {\n                    input: {\n                        ref: (node)=>{\n                            var _a, _b;\n                            if (node) {\n                                filterInputRefs.current[`${column.id}-0`] = node;\n                                // @ts-ignore\n                                if ((_b = (_a = sliderProps === null || sliderProps === void 0 ? void 0 : sliderProps.slotProps) === null || _a === void 0 ? void 0 : _a.input) === null || _b === void 0 ? void 0 : _b.ref) {\n                                    //@ts-ignore\n                                    sliderProps.slotProps.input.ref = node;\n                                }\n                            }\n                        }\n                    }\n                },\n                sx: (theme)=>Object.assign({\n                        m: \"auto\",\n                        mt: !showChangeModeButton ? \"10px\" : \"6px\",\n                        px: \"4px\",\n                        width: \"calc(100% - 8px)\"\n                    }, parseFromValuesOrFunc(sliderProps === null || sliderProps === void 0 ? void 0 : sliderProps.sx, theme))\n            })),\n            showChangeModeButton ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_FormHelperText__WEBPACK_IMPORTED_MODULE_34__[\"default\"], {\n                sx: {\n                    fontSize: \"0.75rem\",\n                    lineHeight: \"0.8rem\",\n                    m: \"-3px -6px\",\n                    whiteSpace: \"nowrap\"\n                },\n                children: localization.filterMode.replace(\"{filterType}\", // @ts-ignore\n                localization[`filter${((_c = currentFilterOption === null || currentFilterOption === void 0 ? void 0 : currentFilterOption.charAt(0)) === null || _c === void 0 ? void 0 : _c.toUpperCase()) + (currentFilterOption === null || currentFilterOption === void 0 ? void 0 : currentFilterOption.slice(1))}`])\n            }) : null\n        ]\n    });\n};\nconst MRT_TableHeadCellFilterContainer = (_a)=>{\n    var _b;\n    var { header, table } = _a, rest = __rest(_a, [\n        \"header\",\n        \"table\"\n    ]);\n    const { getState, options: { columnFilterDisplayMode } } = table;\n    const { showColumnFilters } = getState();\n    const { column } = header;\n    const { columnDef } = column;\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Collapse__WEBPACK_IMPORTED_MODULE_17__[\"default\"], Object.assign({\n        in: showColumnFilters || columnFilterDisplayMode === \"popover\",\n        mountOnEnter: true,\n        unmountOnExit: true\n    }, rest, {\n        children: columnDef.filterVariant === \"checkbox\" ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MRT_FilterCheckbox, {\n            column: column,\n            table: table\n        }) : columnDef.filterVariant === \"range-slider\" ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MRT_FilterRangeSlider, {\n            header: header,\n            table: table\n        }) : ((_b = columnDef.filterVariant) === null || _b === void 0 ? void 0 : _b.includes(\"range\")) || [\n            \"between\",\n            \"betweenInclusive\",\n            \"inNumberRange\"\n        ].includes(columnDef._filterFn) ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MRT_FilterRangeFields, {\n            header: header,\n            table: table\n        }) : (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MRT_FilterTextField, {\n            header: header,\n            table: table\n        })\n    }));\n};\nconst MRT_TableHeadCellFilterLabel = (_a)=>{\n    var _b, _c, _d;\n    var { header, table } = _a, rest = __rest(_a, [\n        \"header\",\n        \"table\"\n    ]);\n    const { options: { columnFilterDisplayMode, icons: { FilterAltIcon }, localization }, refs: { filterInputRefs }, setShowColumnFilters } = table;\n    const { column } = header;\n    const { columnDef } = column;\n    const filterValue = column.getFilterValue();\n    const [anchorEl, setAnchorEl] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const isFilterActive = Array.isArray(filterValue) && filterValue.some(Boolean) || !!filterValue && !Array.isArray(filterValue);\n    const isRangeFilter = ((_b = columnDef.filterVariant) === null || _b === void 0 ? void 0 : _b.includes(\"range\")) || [\n        \"between\",\n        \"betweenInclusive\",\n        \"inNumberRange\"\n    ].includes(columnDef._filterFn);\n    const currentFilterOption = columnDef._filterFn;\n    const filterTooltip = columnFilterDisplayMode === \"popover\" && !isFilterActive ? (_c = localization.filterByColumn) === null || _c === void 0 ? void 0 : _c.replace(\"{column}\", String(columnDef.header)) : localization.filteringByColumn.replace(\"{column}\", String(columnDef.header)).replace(\"{filterType}\", currentFilterOption ? localization[`filter${((_d = currentFilterOption === null || currentFilterOption === void 0 ? void 0 : currentFilterOption.charAt(0)) === null || _d === void 0 ? void 0 : _d.toUpperCase()) + (currentFilterOption === null || currentFilterOption === void 0 ? void 0 : currentFilterOption.slice(1))}`] : \"\").replace(\"{filterValue}\", `\"${Array.isArray(filterValue) ? filterValue.join(`\" ${isRangeFilter ? localization.and : localization.or} \"`) : filterValue}\"`).replace('\" \"', \"\");\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Grow__WEBPACK_IMPORTED_MODULE_35__[\"default\"], {\n                in: columnFilterDisplayMode === \"popover\" || !!filterValue && !isRangeFilter || isRangeFilter && // @ts-ignore\n                (!!(filterValue === null || filterValue === void 0 ? void 0 : filterValue[0]) || !!(filterValue === null || filterValue === void 0 ? void 0 : filterValue[1])),\n                unmountOnExit: true,\n                children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Box__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n                    component: \"span\",\n                    sx: {\n                        flex: \"0 0\"\n                    },\n                    children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Tooltip__WEBPACK_IMPORTED_MODULE_8__[\"default\"], {\n                        placement: \"top\",\n                        title: filterTooltip,\n                        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_IconButton__WEBPACK_IMPORTED_MODULE_9__[\"default\"], Object.assign({\n                            disableRipple: true,\n                            onClick: (event)=>{\n                                if (columnFilterDisplayMode === \"popover\") {\n                                    setAnchorEl(event.currentTarget);\n                                } else {\n                                    setShowColumnFilters(true);\n                                }\n                                queueMicrotask(()=>{\n                                    var _a, _b, _c, _d;\n                                    (_b = (_a = filterInputRefs.current[`${column.id}-0`]) === null || _a === void 0 ? void 0 : _a.focus) === null || _b === void 0 ? void 0 : _b.call(_a);\n                                    (_d = (_c = filterInputRefs.current[`${column.id}-0`]) === null || _c === void 0 ? void 0 : _c.select) === null || _d === void 0 ? void 0 : _d.call(_c);\n                                });\n                                event.stopPropagation();\n                            },\n                            size: \"small\"\n                        }, rest, {\n                            sx: (theme)=>Object.assign({\n                                    height: \"16px\",\n                                    ml: \"4px\",\n                                    opacity: isFilterActive ? 1 : 0.3,\n                                    p: \"8px\",\n                                    transform: \"scale(0.75)\",\n                                    transition: \"all 150ms ease-in-out\",\n                                    width: \"16px\"\n                                }, parseFromValuesOrFunc(rest === null || rest === void 0 ? void 0 : rest.sx, theme)),\n                            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(FilterAltIcon, {})\n                        }))\n                    })\n                })\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Popover__WEBPACK_IMPORTED_MODULE_36__[\"default\"], {\n                anchorEl: anchorEl,\n                anchorOrigin: {\n                    horizontal: \"center\",\n                    vertical: \"top\"\n                },\n                onClick: (event)=>event.stopPropagation(),\n                onClose: (event)=>{\n                    //@ts-ignore\n                    event.stopPropagation();\n                    setAnchorEl(null);\n                },\n                onKeyDown: (event)=>event.key === \"Enter\" && setAnchorEl(null),\n                open: !!anchorEl,\n                transformOrigin: {\n                    horizontal: \"center\",\n                    vertical: \"bottom\"\n                },\n                children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Box__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n                    sx: {\n                        p: \"1rem\"\n                    },\n                    children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MRT_TableHeadCellFilterContainer, {\n                        header: header,\n                        table: table\n                    })\n                })\n            })\n        ]\n    });\n};\nconst MRT_TableHeadCellGrabHandle = (_a)=>{\n    var { column, table, tableHeadCellRef } = _a, rest = __rest(_a, [\n        \"column\",\n        \"table\",\n        \"tableHeadCellRef\"\n    ]);\n    const { getState, options: { enableColumnOrdering, muiColumnDragHandleProps }, setColumnOrder, setDraggingColumn, setHoveredColumn } = table;\n    const { columnDef } = column;\n    const { columnOrder, draggingColumn, hoveredColumn } = getState();\n    const iconButtonProps = Object.assign(Object.assign(Object.assign({}, parseFromValuesOrFunc(muiColumnDragHandleProps, {\n        column,\n        table\n    })), parseFromValuesOrFunc(columnDef.muiColumnDragHandleProps, {\n        column,\n        table\n    })), rest);\n    const handleDragStart = (event)=>{\n        var _a;\n        (_a = iconButtonProps === null || iconButtonProps === void 0 ? void 0 : iconButtonProps.onDragStart) === null || _a === void 0 ? void 0 : _a.call(iconButtonProps, event);\n        setDraggingColumn(column);\n        event.dataTransfer.setDragImage(tableHeadCellRef.current, 0, 0);\n    };\n    const handleDragEnd = (event)=>{\n        var _a;\n        (_a = iconButtonProps === null || iconButtonProps === void 0 ? void 0 : iconButtonProps.onDragEnd) === null || _a === void 0 ? void 0 : _a.call(iconButtonProps, event);\n        if ((hoveredColumn === null || hoveredColumn === void 0 ? void 0 : hoveredColumn.id) === \"drop-zone\") {\n            column.toggleGrouping();\n        } else if (enableColumnOrdering && hoveredColumn && (hoveredColumn === null || hoveredColumn === void 0 ? void 0 : hoveredColumn.id) !== (draggingColumn === null || draggingColumn === void 0 ? void 0 : draggingColumn.id)) {\n            setColumnOrder(reorderColumn(column, hoveredColumn, columnOrder));\n        }\n        setDraggingColumn(null);\n        setHoveredColumn(null);\n    };\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MRT_GrabHandleButton, {\n        iconButtonProps: iconButtonProps,\n        onDragEnd: handleDragEnd,\n        onDragStart: handleDragStart,\n        table: table\n    });\n};\nconst MRT_TableHeadCellResizeHandle = (_a)=>{\n    var _b;\n    var { header, table } = _a, rest = __rest(_a, [\n        \"header\",\n        \"table\"\n    ]);\n    const { getState, options: { columnResizeDirection, columnResizeMode }, setColumnSizingInfo } = table;\n    const { density } = getState();\n    const { column } = header;\n    const mx = density === \"compact\" ? \"-8px\" : density === \"comfortable\" ? \"-16px\" : \"-24px\";\n    const lr = column.columnDef.columnDefType === \"display\" ? \"4px\" : \"0\";\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Box__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n        className: \"Mui-TableHeadCell-ResizeHandle-Wrapper\",\n        onDoubleClick: ()=>{\n            setColumnSizingInfo((old)=>Object.assign(Object.assign({}, old), {\n                    isResizingColumn: false\n                }));\n            column.resetSize();\n        },\n        onMouseDown: header.getResizeHandler(),\n        onTouchStart: header.getResizeHandler(),\n        style: {\n            transform: column.getIsResizing() && columnResizeMode === \"onEnd\" ? `translateX(${(columnResizeDirection === \"rtl\" ? -1 : 1) * ((_b = getState().columnSizingInfo.deltaOffset) !== null && _b !== void 0 ? _b : 0)}px)` : undefined\n        },\n        sx: (theme)=>({\n                \"&:active > hr\": {\n                    backgroundColor: theme.palette.info.main,\n                    opacity: header.subHeaders.length || columnResizeMode === \"onEnd\" ? 1 : 0\n                },\n                cursor: \"col-resize\",\n                left: columnResizeDirection === \"rtl\" ? lr : undefined,\n                ml: columnResizeDirection === \"rtl\" ? mx : undefined,\n                mr: columnResizeDirection === \"ltr\" ? mx : undefined,\n                position: \"absolute\",\n                px: \"4px\",\n                right: columnResizeDirection === \"ltr\" ? lr : undefined\n            }),\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Divider__WEBPACK_IMPORTED_MODULE_37__[\"default\"], {\n            className: \"Mui-TableHeadCell-ResizeHandle-Divider\",\n            flexItem: true,\n            orientation: \"vertical\",\n            sx: (theme)=>Object.assign({\n                    borderRadius: \"2px\",\n                    borderWidth: \"2px\",\n                    height: \"24px\",\n                    touchAction: \"none\",\n                    transform: \"translateX(4px)\",\n                    transition: column.getIsResizing() ? undefined : \"all 150ms ease-in-out\",\n                    userSelect: \"none\",\n                    zIndex: 4\n                }, parseFromValuesOrFunc(rest === null || rest === void 0 ? void 0 : rest.sx, theme))\n        })\n    });\n};\nconst MRT_TableHeadCellSortLabel = (_a)=>{\n    var { header, table } = _a, rest = __rest(_a, [\n        \"header\",\n        \"table\"\n    ]);\n    const { getState, options: { icons: { ArrowDownwardIcon, SyncAltIcon }, localization } } = table;\n    const { column } = header;\n    const { columnDef } = column;\n    const { isLoading, showSkeletons, sorting } = getState();\n    const isSorted = !!column.getIsSorted();\n    const sortTooltip = isLoading || showSkeletons ? \"\" : column.getIsSorted() ? column.getIsSorted() === \"desc\" ? localization.sortedByColumnDesc.replace(\"{column}\", columnDef.header) : localization.sortedByColumnAsc.replace(\"{column}\", columnDef.header) : column.getNextSortingOrder() === \"desc\" ? localization.sortByColumnDesc.replace(\"{column}\", columnDef.header) : localization.sortByColumnAsc.replace(\"{column}\", columnDef.header);\n    const direction = isSorted ? column.getIsSorted() : undefined;\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Tooltip__WEBPACK_IMPORTED_MODULE_8__[\"default\"], {\n        placement: \"top\",\n        title: sortTooltip,\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Badge__WEBPACK_IMPORTED_MODULE_38__[\"default\"], {\n            badgeContent: sorting.length > 1 ? column.getSortIndex() + 1 : 0,\n            overlap: \"circular\",\n            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_TableSortLabel__WEBPACK_IMPORTED_MODULE_39__[\"default\"], Object.assign({\n                IconComponent: !isSorted ? (props)=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SyncAltIcon, Object.assign({}, props, {\n                        direction: direction,\n                        style: {\n                            transform: \"rotate(-90deg) scaleX(0.9) translateX(-1px)\"\n                        }\n                    })) : ArrowDownwardIcon,\n                active: true,\n                \"aria-label\": sortTooltip,\n                direction: direction,\n                onClick: (e)=>{\n                    var _a;\n                    e.stopPropagation();\n                    (_a = header.column.getToggleSortingHandler()) === null || _a === void 0 ? void 0 : _a(e);\n                }\n            }, rest, {\n                sx: (theme)=>Object.assign({\n                        \".MuiTableSortLabel-icon\": {\n                            color: `${theme.palette.mode === \"dark\" ? theme.palette.text.primary : theme.palette.text.secondary} !important`\n                        },\n                        flex: \"0 0\",\n                        opacity: isSorted ? 1 : 0.3,\n                        transition: \"all 150ms ease-in-out\",\n                        width: \"3ch\"\n                    }, parseFromValuesOrFunc(rest === null || rest === void 0 ? void 0 : rest.sx, theme))\n            }))\n        })\n    });\n};\nconst MRT_TableHeadCell = (_a)=>{\n    var _b, _c, _d, _f, _g, _h;\n    var { header, table } = _a, rest = __rest(_a, [\n        \"header\",\n        \"table\"\n    ]);\n    const theme = (0,_mui_material_styles__WEBPACK_IMPORTED_MODULE_13__[\"default\"])();\n    const { getState, options: { columnFilterDisplayMode, columnResizeDirection, columnResizeMode, enableColumnActions, enableColumnDragging, enableColumnOrdering, enableGrouping, enableMultiSort, layoutMode, muiTableHeadCellProps }, refs: { tableHeadCellRefs }, setHoveredColumn } = table;\n    const { columnSizingInfo, density, draggingColumn, grouping, hoveredColumn, showColumnFilters } = getState();\n    const { column } = header;\n    const { columnDef } = column;\n    const { columnDefType } = columnDef;\n    const tableCellProps = Object.assign(Object.assign(Object.assign({}, parseFromValuesOrFunc(muiTableHeadCellProps, {\n        column,\n        table\n    })), parseFromValuesOrFunc(columnDef.muiTableHeadCellProps, {\n        column,\n        table\n    })), rest);\n    const { draggingBorderColor } = getMRTTheme(table, theme);\n    const showColumnActions = (enableColumnActions || columnDef.enableColumnActions) && columnDef.enableColumnActions !== false;\n    const showDragHandle = enableColumnDragging !== false && columnDef.enableColumnDragging !== false && (enableColumnDragging || enableColumnOrdering && columnDef.enableColumnOrdering !== false || enableGrouping && columnDef.enableGrouping !== false && !grouping.includes(column.id));\n    const headerPL = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        let pl = 0;\n        if (column.getCanSort()) pl += 1;\n        if (showColumnActions) pl += 1.75;\n        if (showDragHandle) pl += 1.5;\n        return pl;\n    }, [\n        showColumnActions,\n        showDragHandle\n    ]);\n    const draggingBorders = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        const showResizeBorder = columnSizingInfo.isResizingColumn === column.id && columnResizeMode === \"onChange\" && !header.subHeaders.length;\n        const borderStyle = showResizeBorder ? `2px solid ${draggingBorderColor} !important` : (draggingColumn === null || draggingColumn === void 0 ? void 0 : draggingColumn.id) === column.id ? `1px dashed ${theme.palette.grey[500]}` : (hoveredColumn === null || hoveredColumn === void 0 ? void 0 : hoveredColumn.id) === column.id ? `2px dashed ${draggingBorderColor}` : undefined;\n        if (showResizeBorder) {\n            return columnResizeDirection === \"ltr\" ? {\n                borderRight: borderStyle\n            } : {\n                borderLeft: borderStyle\n            };\n        }\n        const draggingBorders = borderStyle ? {\n            borderLeft: borderStyle,\n            borderRight: borderStyle,\n            borderTop: borderStyle\n        } : undefined;\n        return draggingBorders;\n    }, [\n        draggingColumn,\n        hoveredColumn,\n        columnSizingInfo.isResizingColumn\n    ]);\n    const handleDragEnter = (_e)=>{\n        if (enableGrouping && (hoveredColumn === null || hoveredColumn === void 0 ? void 0 : hoveredColumn.id) === \"drop-zone\") {\n            setHoveredColumn(null);\n        }\n        if (enableColumnOrdering && draggingColumn && columnDefType !== \"group\") {\n            setHoveredColumn(columnDef.enableColumnOrdering !== false ? column : null);\n        }\n    };\n    const headerElement = (_b = parseFromValuesOrFunc(columnDef.Header, {\n        column,\n        header,\n        table\n    })) !== null && _b !== void 0 ? _b : columnDef.header;\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(_mui_material_TableCell__WEBPACK_IMPORTED_MODULE_14__[\"default\"], Object.assign({\n        align: columnDefType === \"group\" ? \"center\" : \"left\",\n        colSpan: header.colSpan,\n        onDragEnter: handleDragEnter,\n        ref: (node)=>{\n            if (node) {\n                tableHeadCellRefs.current[column.id] = node;\n            }\n        }\n    }, tableCellProps, {\n        sx: (theme)=>Object.assign(Object.assign({\n                \"& :hover\": {\n                    \".MuiButtonBase-root\": {\n                        opacity: 1\n                    }\n                },\n                flexDirection: (layoutMode === null || layoutMode === void 0 ? void 0 : layoutMode.startsWith(\"grid\")) ? \"column\" : undefined,\n                fontWeight: \"bold\",\n                overflow: \"visible\",\n                p: density === \"compact\" ? \"0.5rem\" : density === \"comfortable\" ? columnDefType === \"display\" ? \"0.75rem\" : \"1rem\" : columnDefType === \"display\" ? \"1rem 1.25rem\" : \"1.5rem\",\n                pb: columnDefType === \"display\" ? 0 : showColumnFilters || density === \"compact\" ? \"0.4rem\" : \"0.6rem\",\n                pt: columnDefType === \"group\" || density === \"compact\" ? \"0.25rem\" : density === \"comfortable\" ? \".75rem\" : \"1.25rem\",\n                userSelect: enableMultiSort && column.getCanSort() ? \"none\" : undefined,\n                verticalAlign: \"top\",\n                zIndex: column.getIsResizing() || (draggingColumn === null || draggingColumn === void 0 ? void 0 : draggingColumn.id) === column.id ? 3 : column.getIsPinned() && columnDefType !== \"group\" ? 2 : 1\n            }, getCommonMRTCellStyles({\n                column,\n                header,\n                table,\n                tableCellProps,\n                theme\n            })), draggingBorders),\n        children: [\n            header.isPlaceholder ? null : (_c = tableCellProps.children) !== null && _c !== void 0 ? _c : (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(_mui_material_Box__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n                className: \"Mui-TableHeadCell-Content\",\n                sx: {\n                    alignItems: \"center\",\n                    display: \"flex\",\n                    flexDirection: (tableCellProps === null || tableCellProps === void 0 ? void 0 : tableCellProps.align) === \"right\" ? \"row-reverse\" : \"row\",\n                    justifyContent: columnDefType === \"group\" || (tableCellProps === null || tableCellProps === void 0 ? void 0 : tableCellProps.align) === \"center\" ? \"center\" : column.getCanResize() ? \"space-between\" : \"flex-start\",\n                    position: \"relative\",\n                    width: \"100%\"\n                },\n                children: [\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(_mui_material_Box__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n                        className: \"Mui-TableHeadCell-Content-Labels\",\n                        onClick: column.getToggleSortingHandler(),\n                        sx: {\n                            alignItems: \"center\",\n                            cursor: column.getCanSort() && columnDefType !== \"group\" ? \"pointer\" : undefined,\n                            display: \"flex\",\n                            flexDirection: (tableCellProps === null || tableCellProps === void 0 ? void 0 : tableCellProps.align) === \"right\" ? \"row-reverse\" : \"row\",\n                            overflow: columnDefType === \"data\" ? \"hidden\" : undefined,\n                            pl: (tableCellProps === null || tableCellProps === void 0 ? void 0 : tableCellProps.align) === \"center\" ? `${headerPL}rem` : undefined\n                        },\n                        children: [\n                            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Box__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n                                className: \"Mui-TableHeadCell-Content-Wrapper\",\n                                sx: {\n                                    \"&:hover\": {\n                                        textOverflow: \"clip\"\n                                    },\n                                    minWidth: `${Math.min((_f = (_d = columnDef.header) === null || _d === void 0 ? void 0 : _d.length) !== null && _f !== void 0 ? _f : 0, 4)}ch`,\n                                    overflow: columnDefType === \"data\" ? \"hidden\" : undefined,\n                                    textOverflow: \"ellipsis\",\n                                    whiteSpace: ((_h = (_g = columnDef.header) === null || _g === void 0 ? void 0 : _g.length) !== null && _h !== void 0 ? _h : 0) < 20 ? \"nowrap\" : \"normal\"\n                                },\n                                title: columnDefType === \"data\" ? columnDef.header : undefined,\n                                children: headerElement\n                            }),\n                            column.getCanFilter() && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MRT_TableHeadCellFilterLabel, {\n                                header: header,\n                                table: table\n                            }),\n                            column.getCanSort() && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MRT_TableHeadCellSortLabel, {\n                                header: header,\n                                table: table\n                            })\n                        ]\n                    }),\n                    columnDefType !== \"group\" && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(_mui_material_Box__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n                        className: \"Mui-TableHeadCell-Content-Actions\",\n                        sx: {\n                            whiteSpace: \"nowrap\"\n                        },\n                        children: [\n                            showDragHandle && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MRT_TableHeadCellGrabHandle, {\n                                column: column,\n                                table: table,\n                                tableHeadCellRef: {\n                                    current: tableHeadCellRefs.current[column.id]\n                                }\n                            }),\n                            showColumnActions && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MRT_TableHeadCellColumnActionsButton, {\n                                header: header,\n                                table: table\n                            })\n                        ]\n                    }),\n                    column.getCanResize() && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MRT_TableHeadCellResizeHandle, {\n                        header: header,\n                        table: table\n                    })\n                ]\n            }),\n            columnFilterDisplayMode === \"subheader\" && column.getCanFilter() && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MRT_TableHeadCellFilterContainer, {\n                header: header,\n                table: table\n            })\n        ]\n    }));\n};\nconst MRT_TableHeadRow = (_a)=>{\n    var { headerGroup, table, virtualColumns, virtualPaddingLeft, virtualPaddingRight } = _a, rest = __rest(_a, [\n        \"headerGroup\",\n        \"table\",\n        \"virtualColumns\",\n        \"virtualPaddingLeft\",\n        \"virtualPaddingRight\"\n    ]);\n    const { options: { layoutMode, muiTableHeadRowProps } } = table;\n    const tableRowProps = Object.assign(Object.assign({}, parseFromValuesOrFunc(muiTableHeadRowProps, {\n        headerGroup,\n        table\n    })), rest);\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(_mui_material_TableRow__WEBPACK_IMPORTED_MODULE_16__[\"default\"], Object.assign({}, tableRowProps, {\n        sx: (theme)=>Object.assign({\n                backgroundColor: getMRTTheme(table, theme).baseBackgroundColor,\n                boxShadow: `4px 0 8px ${(0,_mui_material_styles__WEBPACK_IMPORTED_MODULE_6__.alpha)(theme.palette.common.black, 0.1)}`,\n                display: (layoutMode === null || layoutMode === void 0 ? void 0 : layoutMode.startsWith(\"grid\")) ? \"flex\" : undefined,\n                top: 0\n            }, parseFromValuesOrFunc(tableRowProps === null || tableRowProps === void 0 ? void 0 : tableRowProps.sx, theme)),\n        children: [\n            virtualPaddingLeft ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"th\", {\n                style: {\n                    display: \"flex\",\n                    width: virtualPaddingLeft\n                }\n            }) : null,\n            (virtualColumns !== null && virtualColumns !== void 0 ? virtualColumns : headerGroup.headers).map((headerOrVirtualHeader)=>{\n                const header = virtualColumns ? headerGroup.headers[headerOrVirtualHeader.index] : headerOrVirtualHeader;\n                return header ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MRT_TableHeadCell, {\n                    header: header,\n                    table: table\n                }, header.id) : null;\n            }),\n            virtualPaddingRight ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"th\", {\n                style: {\n                    display: \"flex\",\n                    width: virtualPaddingRight\n                }\n            }) : null\n        ]\n    }));\n};\nconst MRT_LinearProgressBar = (_a)=>{\n    var { isTopToolbar, table } = _a, rest = __rest(_a, [\n        \"isTopToolbar\",\n        \"table\"\n    ]);\n    const { getState, options: { muiLinearProgressProps } } = table;\n    const { isSaving, showProgressBars } = getState();\n    const linearProgressProps = Object.assign(Object.assign({}, parseFromValuesOrFunc(muiLinearProgressProps, {\n        isTopToolbar,\n        table\n    })), rest);\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Collapse__WEBPACK_IMPORTED_MODULE_17__[\"default\"], {\n        in: showProgressBars !== false && (showProgressBars || isSaving),\n        mountOnEnter: true,\n        sx: {\n            bottom: isTopToolbar ? 0 : undefined,\n            position: \"absolute\",\n            top: !isTopToolbar ? 0 : undefined,\n            width: \"100%\"\n        },\n        unmountOnExit: true,\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_LinearProgress__WEBPACK_IMPORTED_MODULE_40__[\"default\"], Object.assign({\n            \"aria-busy\": \"true\",\n            \"aria-label\": \"Loading\",\n            sx: {\n                position: \"relative\"\n            }\n        }, linearProgressProps))\n    });\n};\nconst defaultRowsPerPage = [\n    5,\n    10,\n    15,\n    20,\n    25,\n    30,\n    50,\n    100\n];\nconst MRT_TablePagination = (_a)=>{\n    var { position = \"bottom\", table } = _a, rest = __rest(_a, [\n        \"position\",\n        \"table\"\n    ]);\n    const { getPrePaginationRowModel, getState, options: { enableToolbarInternalActions, icons: { ChevronLeftIcon, ChevronRightIcon, FirstPageIcon, LastPageIcon }, localization, muiPaginationProps, paginationDisplayMode, rowCount }, setPageIndex, setPageSize } = table;\n    const { pagination: { pageIndex = 0, pageSize = 10 }, showGlobalFilter } = getState();\n    const paginationProps = Object.assign(Object.assign({}, parseFromValuesOrFunc(muiPaginationProps, {\n        table\n    })), rest);\n    const totalRowCount = rowCount !== null && rowCount !== void 0 ? rowCount : getPrePaginationRowModel().rows.length;\n    const numberOfPages = Math.ceil(totalRowCount / pageSize);\n    const showFirstLastPageButtons = numberOfPages > 2;\n    const firstRowIndex = pageIndex * pageSize;\n    const lastRowIndex = Math.min(pageIndex * pageSize + pageSize, totalRowCount);\n    const _b = paginationProps !== null && paginationProps !== void 0 ? paginationProps : {}, { SelectProps, disabled = false, rowsPerPageOptions = defaultRowsPerPage, showFirstButton = showFirstLastPageButtons, showLastButton = showFirstLastPageButtons, showRowsPerPage = true } = _b, _rest = __rest(_b, [\n        \"SelectProps\",\n        \"disabled\",\n        \"rowsPerPageOptions\",\n        \"showFirstButton\",\n        \"showLastButton\",\n        \"showRowsPerPage\"\n    ]);\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(_mui_material_Box__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n        className: \"MuiTablePagination-root\",\n        sx: {\n            alignItems: \"center\",\n            display: \"flex\",\n            flexWrap: \"wrap\",\n            gap: \"8px\",\n            justifyContent: {\n                md: \"space-between\",\n                sm: \"center\"\n            },\n            justifySelf: \"flex-end\",\n            mt: position === \"top\" && enableToolbarInternalActions && !showGlobalFilter ? \"3rem\" : undefined,\n            position: \"relative\",\n            px: \"8px\",\n            py: \"12px\",\n            zIndex: 2\n        },\n        children: [\n            showRowsPerPage && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(_mui_material_Box__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n                sx: {\n                    alignItems: \"center\",\n                    display: \"flex\",\n                    gap: \"8px\"\n                },\n                children: [\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_InputLabel__WEBPACK_IMPORTED_MODULE_41__[\"default\"], {\n                        htmlFor: \"mrt-rows-per-page\",\n                        sx: {\n                            mb: 0\n                        },\n                        children: localization.rowsPerPage\n                    }),\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Select__WEBPACK_IMPORTED_MODULE_42__[\"default\"], Object.assign({\n                        disableUnderline: true,\n                        disabled: disabled,\n                        id: \"mrt-rows-per-page\",\n                        inputProps: {\n                            \"aria-label\": localization.rowsPerPage\n                        },\n                        label: localization.rowsPerPage,\n                        onChange: (event)=>setPageSize(+event.target.value),\n                        sx: {\n                            mb: 0\n                        },\n                        value: pageSize,\n                        variant: \"standard\"\n                    }, SelectProps, {\n                        children: rowsPerPageOptions.map((option)=>{\n                            var _a;\n                            const value = typeof option !== \"number\" ? option.value : option;\n                            const label = typeof option !== \"number\" ? option.label : `${option}`;\n                            return (_a = SelectProps === null || SelectProps === void 0 ? void 0 : SelectProps.children) !== null && _a !== void 0 ? _a : (SelectProps === null || SelectProps === void 0 ? void 0 : SelectProps.native) ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"option\", {\n                                value: value,\n                                children: label\n                            }, value) : (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_MenuItem__WEBPACK_IMPORTED_MODULE_12__[\"default\"], {\n                                sx: {\n                                    m: 0\n                                },\n                                value: value,\n                                children: label\n                            }, value);\n                        })\n                    }))\n                ]\n            }),\n            paginationDisplayMode === \"pages\" ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Pagination__WEBPACK_IMPORTED_MODULE_43__[\"default\"], Object.assign({\n                count: numberOfPages,\n                disabled: disabled,\n                onChange: (_e, newPageIndex)=>setPageIndex(newPageIndex - 1),\n                page: pageIndex + 1,\n                renderItem: (item)=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_PaginationItem__WEBPACK_IMPORTED_MODULE_44__[\"default\"], Object.assign({\n                        slots: {\n                            first: FirstPageIcon,\n                            last: LastPageIcon,\n                            next: ChevronRightIcon,\n                            previous: ChevronLeftIcon\n                        }\n                    }, item)),\n                showFirstButton: showFirstButton,\n                showLastButton: showLastButton\n            }, _rest)) : paginationDisplayMode === \"default\" ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n                children: [\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_21__[\"default\"], {\n                        align: \"center\",\n                        component: \"span\",\n                        sx: {\n                            m: \"0 4px\",\n                            minWidth: \"8ch\"\n                        },\n                        variant: \"body2\",\n                        children: `${lastRowIndex === 0 ? 0 : (firstRowIndex + 1).toLocaleString()}-${lastRowIndex.toLocaleString()} ${localization.of} ${totalRowCount.toLocaleString()}`\n                    }),\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(_mui_material_Box__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n                        gap: \"xs\",\n                        children: [\n                            showFirstButton && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_IconButton__WEBPACK_IMPORTED_MODULE_9__[\"default\"], {\n                                \"aria-label\": localization.goToFirstPage,\n                                disabled: pageIndex <= 0 || disabled,\n                                onClick: ()=>setPageIndex(0),\n                                size: \"small\",\n                                children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(FirstPageIcon, {})\n                            }),\n                            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_IconButton__WEBPACK_IMPORTED_MODULE_9__[\"default\"], {\n                                \"aria-label\": localization.goToPreviousPage,\n                                disabled: pageIndex <= 0 || disabled,\n                                onClick: ()=>setPageIndex(pageIndex - 1),\n                                size: \"small\",\n                                children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ChevronLeftIcon, {})\n                            }),\n                            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_IconButton__WEBPACK_IMPORTED_MODULE_9__[\"default\"], {\n                                \"aria-label\": localization.goToNextPage,\n                                disabled: lastRowIndex >= totalRowCount || disabled,\n                                onClick: ()=>setPageIndex(pageIndex + 1),\n                                size: \"small\",\n                                children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ChevronRightIcon, {})\n                            }),\n                            showLastButton && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_IconButton__WEBPACK_IMPORTED_MODULE_9__[\"default\"], {\n                                \"aria-label\": localization.goToLastPage,\n                                disabled: lastRowIndex >= totalRowCount || disabled,\n                                onClick: ()=>setPageIndex(numberOfPages - 1),\n                                size: \"small\",\n                                children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(LastPageIcon, {})\n                            })\n                        ]\n                    })\n                ]\n            }) : null\n        ]\n    });\n};\nconst MRT_GlobalFilterTextField = (_a)=>{\n    var _b;\n    var { table } = _a, rest = __rest(_a, [\n        \"table\"\n    ]);\n    const { getState, options: { enableGlobalFilterModes, icons: { CloseIcon, SearchIcon }, localization, manualFiltering, muiSearchTextFieldProps }, refs: { searchInputRef }, setGlobalFilter } = table;\n    const { globalFilter, showGlobalFilter } = getState();\n    const textFieldProps = Object.assign(Object.assign({}, parseFromValuesOrFunc(muiSearchTextFieldProps, {\n        table\n    })), rest);\n    const isMounted = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n    const [anchorEl, setAnchorEl] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [searchValue, setSearchValue] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(globalFilter !== null && globalFilter !== void 0 ? globalFilter : \"\");\n    const handleChangeDebounced = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((0,_mui_material_utils__WEBPACK_IMPORTED_MODULE_27__[\"default\"])((event)=>{\n        var _a;\n        setGlobalFilter((_a = event.target.value) !== null && _a !== void 0 ? _a : undefined);\n    }, manualFiltering ? 500 : 250), []);\n    const handleChange = (event)=>{\n        setSearchValue(event.target.value);\n        handleChangeDebounced(event);\n    };\n    const handleGlobalFilterMenuOpen = (event)=>{\n        setAnchorEl(event.currentTarget);\n    };\n    const handleClear = ()=>{\n        setSearchValue(\"\");\n        setGlobalFilter(undefined);\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (isMounted.current) {\n            if (globalFilter === undefined) {\n                handleClear();\n            } else {\n                setSearchValue(globalFilter);\n            }\n        }\n        isMounted.current = true;\n    }, [\n        globalFilter\n    ]);\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(_mui_material_Collapse__WEBPACK_IMPORTED_MODULE_17__[\"default\"], {\n        in: showGlobalFilter,\n        mountOnEnter: true,\n        orientation: \"horizontal\",\n        unmountOnExit: true,\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_TextField__WEBPACK_IMPORTED_MODULE_11__[\"default\"], Object.assign({\n                inputProps: Object.assign({\n                    autoComplete: \"new-password\"\n                }, textFieldProps.inputProps),\n                onChange: handleChange,\n                placeholder: localization.search,\n                size: \"small\",\n                value: searchValue !== null && searchValue !== void 0 ? searchValue : \"\",\n                variant: \"outlined\"\n            }, textFieldProps, {\n                InputProps: Object.assign(Object.assign({\n                    endAdornment: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_InputAdornment__WEBPACK_IMPORTED_MODULE_28__[\"default\"], {\n                        position: \"end\",\n                        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Tooltip__WEBPACK_IMPORTED_MODULE_8__[\"default\"], {\n                            title: (_b = localization.clearSearch) !== null && _b !== void 0 ? _b : \"\",\n                            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n                                children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_IconButton__WEBPACK_IMPORTED_MODULE_9__[\"default\"], {\n                                    \"aria-label\": localization.clearSearch,\n                                    disabled: !(searchValue === null || searchValue === void 0 ? void 0 : searchValue.length),\n                                    onClick: handleClear,\n                                    size: \"small\",\n                                    children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(CloseIcon, {})\n                                })\n                            })\n                        })\n                    }),\n                    startAdornment: enableGlobalFilterModes ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_InputAdornment__WEBPACK_IMPORTED_MODULE_28__[\"default\"], {\n                        position: \"start\",\n                        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Tooltip__WEBPACK_IMPORTED_MODULE_8__[\"default\"], {\n                            title: localization.changeSearchMode,\n                            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_IconButton__WEBPACK_IMPORTED_MODULE_9__[\"default\"], {\n                                \"aria-label\": localization.changeSearchMode,\n                                onClick: handleGlobalFilterMenuOpen,\n                                size: \"small\",\n                                sx: {\n                                    height: \"1.75rem\",\n                                    width: \"1.75rem\"\n                                },\n                                children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SearchIcon, {})\n                            })\n                        })\n                    }) : (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SearchIcon, {\n                        style: {\n                            marginRight: \"4px\"\n                        }\n                    })\n                }, textFieldProps.InputProps), {\n                    sx: (theme)=>{\n                        var _a;\n                        return Object.assign({\n                            mb: 0\n                        }, parseFromValuesOrFunc((_a = textFieldProps === null || textFieldProps === void 0 ? void 0 : textFieldProps.InputProps) === null || _a === void 0 ? void 0 : _a.sx, theme));\n                    }\n                }),\n                inputRef: (inputRef)=>{\n                    searchInputRef.current = inputRef;\n                    if (textFieldProps === null || textFieldProps === void 0 ? void 0 : textFieldProps.inputRef) {\n                        textFieldProps.inputRef = inputRef;\n                    }\n                }\n            })),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MRT_FilterOptionMenu, {\n                anchorEl: anchorEl,\n                onSelect: handleClear,\n                setAnchorEl: setAnchorEl,\n                table: table\n            })\n        ]\n    });\n};\nconst MRT_SelectCheckbox = (_a)=>{\n    var _b;\n    var { row, selectAll, table } = _a, rest = __rest(_a, [\n        \"row\",\n        \"selectAll\",\n        \"table\"\n    ]);\n    const { getState, options: { enableMultiRowSelection, enableRowPinning, localization, muiSelectAllCheckboxProps, muiSelectCheckboxProps, rowPinningDisplayMode, selectAllMode } } = table;\n    const { density, isLoading } = getState();\n    const checkboxProps = Object.assign(Object.assign({}, !row ? parseFromValuesOrFunc(muiSelectAllCheckboxProps, {\n        table\n    }) : parseFromValuesOrFunc(muiSelectCheckboxProps, {\n        row,\n        table\n    })), rest);\n    const allRowsSelected = selectAll ? selectAllMode === \"page\" ? table.getIsAllPageRowsSelected() : table.getIsAllRowsSelected() : undefined;\n    const commonProps = Object.assign(Object.assign({\n        checked: selectAll ? allRowsSelected : row === null || row === void 0 ? void 0 : row.getIsSelected(),\n        disabled: isLoading || row && !row.getCanSelect(),\n        inputProps: {\n            \"aria-label\": selectAll ? localization.toggleSelectAll : localization.toggleSelectRow\n        },\n        onChange: (event)=>{\n            event.stopPropagation();\n            row ? row.getToggleSelectedHandler()(event) : selectAllMode === \"all\" ? table.getToggleAllRowsSelectedHandler()(event) : table.getToggleAllPageRowsSelectedHandler()(event);\n            if (enableRowPinning && (rowPinningDisplayMode === null || rowPinningDisplayMode === void 0 ? void 0 : rowPinningDisplayMode.includes(\"select\"))) {\n                if (row) {\n                    row.pin(!row.getIsPinned() && event.target.checked ? (rowPinningDisplayMode === null || rowPinningDisplayMode === void 0 ? void 0 : rowPinningDisplayMode.includes(\"bottom\")) ? \"bottom\" : \"top\" : false);\n                } else {\n                    table.setRowPinning({\n                        bottom: [],\n                        top: []\n                    });\n                }\n            }\n        },\n        size: density === \"compact\" ? \"small\" : \"medium\"\n    }, checkboxProps), {\n        onClick: (e)=>{\n            var _a;\n            e.stopPropagation();\n            (_a = checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.onClick) === null || _a === void 0 ? void 0 : _a.call(checkboxProps, e);\n        },\n        sx: (theme)=>Object.assign({\n                height: density === \"compact\" ? \"1.75rem\" : \"2.5rem\",\n                m: density !== \"compact\" ? \"-0.4rem\" : undefined,\n                width: density === \"compact\" ? \"1.75rem\" : \"2.5rem\",\n                zIndex: 0\n            }, parseFromValuesOrFunc(checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.sx, theme)),\n        title: undefined\n    });\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Tooltip__WEBPACK_IMPORTED_MODULE_8__[\"default\"], {\n        enterDelay: 1000,\n        enterNextDelay: 1000,\n        title: (_b = checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.title) !== null && _b !== void 0 ? _b : selectAll ? localization.toggleSelectAll : localization.toggleSelectRow,\n        children: enableMultiRowSelection === false ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Radio__WEBPACK_IMPORTED_MODULE_45__[\"default\"], Object.assign({}, commonProps)) : (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Checkbox__WEBPACK_IMPORTED_MODULE_26__[\"default\"], Object.assign({\n            indeterminate: selectAll ? table.getIsSomeRowsSelected() && !allRowsSelected : row === null || row === void 0 ? void 0 : row.getIsSomeSelected()\n        }, commonProps))\n    });\n};\nconst MRT_ToolbarAlertBanner = (_a)=>{\n    var _b, _c, _d;\n    var { stackAlertBanner, table } = _a, rest = __rest(_a, [\n        \"stackAlertBanner\",\n        \"table\"\n    ]);\n    const { getPrePaginationRowModel, getSelectedRowModel, getState, options: { enableRowSelection, enableSelectAll, localization, muiToolbarAlertBannerChipProps, muiToolbarAlertBannerProps, positionToolbarAlertBanner, renderToolbarAlertBannerContent, rowCount }, refs: { tablePaperRef } } = table;\n    const { density, grouping, showAlertBanner } = getState();\n    const alertProps = Object.assign(Object.assign({}, parseFromValuesOrFunc(muiToolbarAlertBannerProps, {\n        table\n    })), rest);\n    const chipProps = parseFromValuesOrFunc(muiToolbarAlertBannerChipProps, {\n        table\n    });\n    const selectedAlert = getSelectedRowModel().rows.length > 0 ? (_c = (_b = localization.selectedCountOfRowCountRowsSelected) === null || _b === void 0 ? void 0 : _b.replace(\"{selectedCount}\", getSelectedRowModel().rows.length.toString())) === null || _c === void 0 ? void 0 : _c.replace(\"{rowCount}\", (rowCount !== null && rowCount !== void 0 ? rowCount : getPrePaginationRowModel().rows.length).toString()) : null;\n    const groupedAlert = grouping.length > 0 ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"span\", {\n        children: [\n            localization.groupedBy,\n            \" \",\n            grouping.map((columnId, index)=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, {\n                    children: [\n                        index > 0 ? localization.thenBy : \"\",\n                        (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Chip__WEBPACK_IMPORTED_MODULE_29__[\"default\"], Object.assign({\n                            label: table.getColumn(columnId).columnDef.header,\n                            onDelete: ()=>table.getColumn(columnId).toggleGrouping()\n                        }, chipProps))\n                    ]\n                }, `${index}-${columnId}`))\n        ]\n    }) : null;\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Collapse__WEBPACK_IMPORTED_MODULE_17__[\"default\"], {\n        in: showAlertBanner || !!selectedAlert || !!groupedAlert,\n        timeout: stackAlertBanner ? 200 : 0,\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Alert__WEBPACK_IMPORTED_MODULE_46__[\"default\"], Object.assign({\n            color: \"info\",\n            icon: false\n        }, alertProps, {\n            sx: (theme)=>{\n                var _a, _b;\n                return Object.assign({\n                    \"& .MuiAlert-message\": {\n                        maxWidth: `calc(${(_b = (_a = tablePaperRef.current) === null || _a === void 0 ? void 0 : _a.clientWidth) !== null && _b !== void 0 ? _b : 360}px - 1rem)`,\n                        width: \"100%\"\n                    },\n                    borderRadius: 0,\n                    fontSize: \"1rem\",\n                    left: 0,\n                    mb: stackAlertBanner ? 0 : positionToolbarAlertBanner === \"bottom\" ? \"-1rem\" : undefined,\n                    p: 0,\n                    position: \"relative\",\n                    right: 0,\n                    top: 0,\n                    width: \"100%\",\n                    zIndex: 2\n                }, parseFromValuesOrFunc(alertProps === null || alertProps === void 0 ? void 0 : alertProps.sx, theme));\n            },\n            children: (_d = renderToolbarAlertBannerContent === null || renderToolbarAlertBannerContent === void 0 ? void 0 : renderToolbarAlertBannerContent({\n                groupedAlert,\n                selectedAlert,\n                table\n            })) !== null && _d !== void 0 ? _d : (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n                children: [\n                    (alertProps === null || alertProps === void 0 ? void 0 : alertProps.title) && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_AlertTitle__WEBPACK_IMPORTED_MODULE_47__[\"default\"], {\n                        children: alertProps.title\n                    }),\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(_mui_material_Stack__WEBPACK_IMPORTED_MODULE_32__[\"default\"], {\n                        sx: {\n                            p: positionToolbarAlertBanner !== \"head-overlay\" ? \"0.5rem 1rem\" : density === \"spacious\" ? \"0.75rem 1.25rem\" : density === \"comfortable\" ? \"0.5rem 0.75rem\" : \"0.25rem 0.5rem\"\n                        },\n                        children: [\n                            alertProps === null || alertProps === void 0 ? void 0 : alertProps.children,\n                            (alertProps === null || alertProps === void 0 ? void 0 : alertProps.children) && (selectedAlert || groupedAlert) && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"br\", {}),\n                            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(_mui_material_Box__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n                                sx: {\n                                    display: \"flex\"\n                                },\n                                children: [\n                                    enableRowSelection && enableSelectAll && positionToolbarAlertBanner === \"head-overlay\" && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MRT_SelectCheckbox, {\n                                        selectAll: true,\n                                        table: table\n                                    }),\n                                    \" \",\n                                    selectedAlert\n                                ]\n                            }),\n                            selectedAlert && groupedAlert && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"br\", {}),\n                            groupedAlert\n                        ]\n                    })\n                ]\n            })\n        }))\n    });\n};\nconst MRT_ToolbarDropZone = (_a)=>{\n    var _b, _c;\n    var { table } = _a, rest = __rest(_a, [\n        \"table\"\n    ]);\n    const { getState, options: { enableGrouping, localization }, setHoveredColumn, setShowToolbarDropZone } = table;\n    const { draggingColumn, grouping, hoveredColumn, showToolbarDropZone } = getState();\n    const handleDragEnter = (_event)=>{\n        setHoveredColumn({\n            id: \"drop-zone\"\n        });\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        var _a;\n        if (((_a = table.options.state) === null || _a === void 0 ? void 0 : _a.showToolbarDropZone) !== undefined) {\n            setShowToolbarDropZone(!!enableGrouping && !!draggingColumn && draggingColumn.columnDef.enableGrouping !== false && !grouping.includes(draggingColumn.id));\n        }\n    }, [\n        enableGrouping,\n        draggingColumn,\n        grouping\n    ]);\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Fade__WEBPACK_IMPORTED_MODULE_48__[\"default\"], {\n        in: showToolbarDropZone,\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Box__WEBPACK_IMPORTED_MODULE_7__[\"default\"], Object.assign({\n            className: \"Mui-ToolbarDropZone\",\n            onDragEnter: handleDragEnter\n        }, rest, {\n            sx: (theme)=>Object.assign({\n                    alignItems: \"center\",\n                    backdropFilter: \"blur(4px)\",\n                    backgroundColor: (0,_mui_material_styles__WEBPACK_IMPORTED_MODULE_6__.alpha)(theme.palette.info.main, (hoveredColumn === null || hoveredColumn === void 0 ? void 0 : hoveredColumn.id) === \"drop-zone\" ? 0.2 : 0.1),\n                    border: `dashed ${theme.palette.info.main} 2px`,\n                    boxSizing: \"border-box\",\n                    display: \"flex\",\n                    height: \"100%\",\n                    justifyContent: \"center\",\n                    position: \"absolute\",\n                    width: \"100%\",\n                    zIndex: 4\n                }, parseFromValuesOrFunc(rest === null || rest === void 0 ? void 0 : rest.sx, theme)),\n            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_21__[\"default\"], {\n                fontStyle: \"italic\",\n                children: localization.dropToGroupBy.replace(\"{column}\", (_c = (_b = draggingColumn === null || draggingColumn === void 0 ? void 0 : draggingColumn.columnDef) === null || _b === void 0 ? void 0 : _b.header) !== null && _c !== void 0 ? _c : \"\")\n            })\n        }))\n    });\n};\nconst MRT_BottomToolbar = (_a)=>{\n    var { table } = _a, rest = __rest(_a, [\n        \"table\"\n    ]);\n    const { getState, options: { enablePagination, muiBottomToolbarProps, positionPagination, positionToolbarAlertBanner, positionToolbarDropZone, renderBottomToolbarCustomActions }, refs: { bottomToolbarRef } } = table;\n    const { isFullScreen } = getState();\n    const isMobile = (0,_mui_material_useMediaQuery__WEBPACK_IMPORTED_MODULE_49__[\"default\"])(\"(max-width:720px)\");\n    const toolbarProps = Object.assign(Object.assign({}, parseFromValuesOrFunc(muiBottomToolbarProps, {\n        table\n    })), rest);\n    const stackAlertBanner = isMobile || !!renderBottomToolbarCustomActions;\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(_mui_material_Box__WEBPACK_IMPORTED_MODULE_7__[\"default\"], Object.assign({}, toolbarProps, {\n        ref: (node)=>{\n            if (node) {\n                bottomToolbarRef.current = node;\n                if (toolbarProps === null || toolbarProps === void 0 ? void 0 : toolbarProps.ref) {\n                    // @ts-ignore\n                    toolbarProps.ref.current = node;\n                }\n            }\n        },\n        sx: (theme)=>Object.assign(Object.assign(Object.assign({}, getCommonToolbarStyles({\n                table,\n                theme\n            })), {\n                bottom: isFullScreen ? \"0\" : undefined,\n                boxShadow: `0 1px 2px -1px ${(0,_mui_material_styles__WEBPACK_IMPORTED_MODULE_6__.alpha)(theme.palette.grey[700], 0.5)} inset`,\n                left: 0,\n                position: isFullScreen ? \"fixed\" : \"relative\",\n                right: 0\n            }), parseFromValuesOrFunc(toolbarProps === null || toolbarProps === void 0 ? void 0 : toolbarProps.sx, theme)),\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MRT_LinearProgressBar, {\n                isTopToolbar: false,\n                table: table\n            }),\n            positionToolbarAlertBanner === \"bottom\" && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MRT_ToolbarAlertBanner, {\n                stackAlertBanner: stackAlertBanner,\n                table: table\n            }),\n            [\n                \"both\",\n                \"bottom\"\n            ].includes(positionToolbarDropZone !== null && positionToolbarDropZone !== void 0 ? positionToolbarDropZone : \"\") && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MRT_ToolbarDropZone, {\n                table: table\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(_mui_material_Box__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n                sx: {\n                    alignItems: \"center\",\n                    boxSizing: \"border-box\",\n                    display: \"flex\",\n                    justifyContent: \"space-between\",\n                    p: \"0.5rem\",\n                    width: \"100%\"\n                },\n                children: [\n                    renderBottomToolbarCustomActions ? renderBottomToolbarCustomActions({\n                        table\n                    }) : (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {}),\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Box__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n                        sx: {\n                            display: \"flex\",\n                            justifyContent: \"flex-end\",\n                            position: stackAlertBanner ? \"relative\" : \"absolute\",\n                            right: 0,\n                            top: 0\n                        },\n                        children: enablePagination && [\n                            \"both\",\n                            \"bottom\"\n                        ].includes(positionPagination !== null && positionPagination !== void 0 ? positionPagination : \"\") && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MRT_TablePagination, {\n                            position: \"bottom\",\n                            table: table\n                        })\n                    })\n                ]\n            })\n        ]\n    }));\n};\nconst MRT_ColumnPinningButtons = (_a)=>{\n    var { column, table } = _a, rest = __rest(_a, [\n        \"column\",\n        \"table\"\n    ]);\n    const { options: { icons: { PushPinIcon }, localization } } = table;\n    const handlePinColumn = (pinDirection)=>{\n        column.pin(pinDirection);\n    };\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Box__WEBPACK_IMPORTED_MODULE_7__[\"default\"], Object.assign({}, rest, {\n        sx: (theme)=>Object.assign({\n                minWidth: \"70px\",\n                textAlign: \"center\"\n            }, parseFromValuesOrFunc(rest === null || rest === void 0 ? void 0 : rest.sx, theme)),\n        children: column.getIsPinned() ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Tooltip__WEBPACK_IMPORTED_MODULE_8__[\"default\"], {\n            title: localization.unpin,\n            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_IconButton__WEBPACK_IMPORTED_MODULE_9__[\"default\"], {\n                onClick: ()=>handlePinColumn(false),\n                size: \"small\",\n                children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(PushPinIcon, {})\n            })\n        }) : (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n            children: [\n                (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Tooltip__WEBPACK_IMPORTED_MODULE_8__[\"default\"], {\n                    title: localization.pinToLeft,\n                    children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_IconButton__WEBPACK_IMPORTED_MODULE_9__[\"default\"], {\n                        onClick: ()=>handlePinColumn(\"left\"),\n                        size: \"small\",\n                        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(PushPinIcon, {\n                            style: {\n                                transform: \"rotate(90deg)\"\n                            }\n                        })\n                    })\n                }),\n                (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Tooltip__WEBPACK_IMPORTED_MODULE_8__[\"default\"], {\n                    title: localization.pinToRight,\n                    children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_IconButton__WEBPACK_IMPORTED_MODULE_9__[\"default\"], {\n                        onClick: ()=>handlePinColumn(\"right\"),\n                        size: \"small\",\n                        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(PushPinIcon, {\n                            style: {\n                                transform: \"rotate(-90deg)\"\n                            }\n                        })\n                    })\n                })\n            ]\n        })\n    }));\n};\nconst MRT_ShowHideColumnsMenuItems = (_a)=>{\n    var _b;\n    var { allColumns, column, hoveredColumn, setHoveredColumn, table } = _a, rest = __rest(_a, [\n        \"allColumns\",\n        \"column\",\n        \"hoveredColumn\",\n        \"setHoveredColumn\",\n        \"table\"\n    ]);\n    const { getState, options: { enableColumnOrdering, enableColumnPinning, enableHiding, localization }, setColumnOrder } = table;\n    const { columnOrder } = getState();\n    const { columnDef } = column;\n    const { columnDefType } = columnDef;\n    const switchChecked = columnDefType !== \"group\" && column.getIsVisible() || columnDefType === \"group\" && column.getLeafColumns().some((col)=>col.getIsVisible());\n    const handleToggleColumnHidden = (column)=>{\n        var _a, _b;\n        if (columnDefType === \"group\") {\n            (_b = (_a = column === null || column === void 0 ? void 0 : column.columns) === null || _a === void 0 ? void 0 : _a.forEach) === null || _b === void 0 ? void 0 : _b.call(_a, (childColumn)=>{\n                childColumn.toggleVisibility(!switchChecked);\n            });\n        } else {\n            column.toggleVisibility();\n        }\n    };\n    const menuItemRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const [isDragging, setIsDragging] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const handleDragStart = (e)=>{\n        setIsDragging(true);\n        e.dataTransfer.setDragImage(menuItemRef.current, 0, 0);\n    };\n    const handleDragEnd = (_e)=>{\n        setIsDragging(false);\n        setHoveredColumn(null);\n        if (hoveredColumn) {\n            setColumnOrder(reorderColumn(column, hoveredColumn, columnOrder));\n        }\n    };\n    const handleDragEnter = (_e)=>{\n        if (!isDragging && columnDef.enableColumnOrdering !== false) {\n            setHoveredColumn(column);\n        }\n    };\n    if (!columnDef.header) return null;\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_MenuItem__WEBPACK_IMPORTED_MODULE_12__[\"default\"], Object.assign({\n                disableRipple: true,\n                onDragEnter: handleDragEnter,\n                ref: menuItemRef\n            }, rest, {\n                sx: (theme)=>Object.assign({\n                        alignItems: \"center\",\n                        justifyContent: \"flex-start\",\n                        my: 0,\n                        opacity: isDragging ? 0.5 : 1,\n                        outline: isDragging ? `2px dashed ${theme.palette.grey[500]}` : (hoveredColumn === null || hoveredColumn === void 0 ? void 0 : hoveredColumn.id) === column.id ? `2px dashed ${getMRTTheme(table, theme).draggingBorderColor}` : \"none\",\n                        outlineOffset: \"-2px\",\n                        pl: `${(column.depth + 0.5) * 2}rem`,\n                        py: \"6px\"\n                    }, parseFromValuesOrFunc(rest === null || rest === void 0 ? void 0 : rest.sx, theme)),\n                children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(_mui_material_Box__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n                    sx: {\n                        display: \"flex\",\n                        flexWrap: \"nowrap\",\n                        gap: \"8px\"\n                    },\n                    children: [\n                        columnDefType !== \"group\" && enableColumnOrdering && !allColumns.some((col)=>col.columnDef.columnDefType === \"group\") && (columnDef.enableColumnOrdering !== false ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MRT_GrabHandleButton, {\n                            onDragEnd: handleDragEnd,\n                            onDragStart: handleDragStart,\n                            table: table\n                        }) : (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Box__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n                            sx: {\n                                width: \"28px\"\n                            }\n                        })),\n                        enableColumnPinning && (column.getCanPin() ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MRT_ColumnPinningButtons, {\n                            column: column,\n                            table: table\n                        }) : (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Box__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n                            sx: {\n                                width: \"70px\"\n                            }\n                        })),\n                        enableHiding ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_FormControlLabel__WEBPACK_IMPORTED_MODULE_25__[\"default\"], {\n                            checked: switchChecked,\n                            componentsProps: {\n                                typography: {\n                                    sx: {\n                                        mb: 0,\n                                        opacity: columnDefType !== \"display\" ? 1 : 0.5\n                                    }\n                                }\n                            },\n                            control: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Tooltip__WEBPACK_IMPORTED_MODULE_8__[\"default\"], {\n                                enterDelay: 1000,\n                                enterNextDelay: 1000,\n                                title: localization.toggleVisibility,\n                                children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Switch__WEBPACK_IMPORTED_MODULE_50__[\"default\"], {})\n                            }),\n                            disabled: !column.getCanHide(),\n                            label: columnDef.header,\n                            onChange: ()=>handleToggleColumnHidden(column)\n                        }) : (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_21__[\"default\"], {\n                            sx: {\n                                alignSelf: \"center\"\n                            },\n                            children: columnDef.header\n                        })\n                    ]\n                })\n            })),\n            (_b = column.columns) === null || _b === void 0 ? void 0 : _b.map((c, i)=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MRT_ShowHideColumnsMenuItems, {\n                    allColumns: allColumns,\n                    column: c,\n                    hoveredColumn: hoveredColumn,\n                    setHoveredColumn: setHoveredColumn,\n                    table: table\n                }, `${i}-${c.id}`))\n        ]\n    });\n};\nconst MRT_ShowHideColumnsMenu = (_a)=>{\n    var { anchorEl, setAnchorEl, table } = _a, rest = __rest(_a, [\n        \"anchorEl\",\n        \"setAnchorEl\",\n        \"table\"\n    ]);\n    const { getAllColumns, getAllLeafColumns, getCenterLeafColumns, getIsAllColumnsVisible, getIsSomeColumnsPinned, getIsSomeColumnsVisible, getLeftLeafColumns, getRightLeafColumns, getState, options: { enableColumnOrdering, enableColumnPinning, enableHiding, localization }, toggleAllColumnsVisible } = table;\n    const { columnOrder, columnPinning, density } = getState();\n    const hideAllColumns = ()=>{\n        getAllLeafColumns().filter((col)=>col.columnDef.enableHiding !== false).forEach((col)=>col.toggleVisibility(false));\n    };\n    const allColumns = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        const columns = getAllColumns();\n        if (columnOrder.length > 0 && !columns.some((col)=>col.columnDef.columnDefType === \"group\")) {\n            return [\n                ...getLeftLeafColumns(),\n                ...Array.from(new Set(columnOrder)).map((colId)=>getCenterLeafColumns().find((col)=>(col === null || col === void 0 ? void 0 : col.id) === colId)),\n                ...getRightLeafColumns()\n            ].filter(Boolean);\n        }\n        return columns;\n    }, [\n        columnOrder,\n        columnPinning,\n        getAllColumns(),\n        getCenterLeafColumns(),\n        getLeftLeafColumns(),\n        getRightLeafColumns()\n    ]);\n    const [hoveredColumn, setHoveredColumn] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(_mui_material_Menu__WEBPACK_IMPORTED_MODULE_23__[\"default\"], Object.assign({\n        MenuListProps: {\n            dense: density === \"compact\"\n        },\n        anchorEl: anchorEl,\n        onClose: ()=>setAnchorEl(null),\n        open: !!anchorEl\n    }, rest, {\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(_mui_material_Box__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n                sx: {\n                    display: \"flex\",\n                    justifyContent: \"space-between\",\n                    p: \"0.5rem\",\n                    pt: 0\n                },\n                children: [\n                    enableHiding && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Button__WEBPACK_IMPORTED_MODULE_10__[\"default\"], {\n                        disabled: !getIsSomeColumnsVisible(),\n                        onClick: hideAllColumns,\n                        children: localization.hideAll\n                    }),\n                    enableColumnOrdering && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Button__WEBPACK_IMPORTED_MODULE_10__[\"default\"], {\n                        onClick: ()=>table.setColumnOrder(getDefaultColumnOrderIds(table.options)),\n                        children: localization.resetOrder\n                    }),\n                    enableColumnPinning && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Button__WEBPACK_IMPORTED_MODULE_10__[\"default\"], {\n                        disabled: !getIsSomeColumnsPinned(),\n                        onClick: ()=>table.resetColumnPinning(true),\n                        children: localization.unpinAll\n                    }),\n                    enableHiding && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Button__WEBPACK_IMPORTED_MODULE_10__[\"default\"], {\n                        disabled: getIsAllColumnsVisible(),\n                        onClick: ()=>toggleAllColumnsVisible(true),\n                        children: localization.showAll\n                    })\n                ]\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Divider__WEBPACK_IMPORTED_MODULE_37__[\"default\"], {}),\n            allColumns.map((column, index)=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MRT_ShowHideColumnsMenuItems, {\n                    allColumns: allColumns,\n                    column: column,\n                    hoveredColumn: hoveredColumn,\n                    setHoveredColumn: setHoveredColumn,\n                    table: table\n                }, `${index}-${column.id}`))\n        ]\n    }));\n};\nconst MRT_ShowHideColumnsButton = (_a)=>{\n    var _b;\n    var { table } = _a, rest = __rest(_a, [\n        \"table\"\n    ]);\n    const { options: { icons: { ViewColumnIcon }, localization } } = table;\n    const [anchorEl, setAnchorEl] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const handleClick = (event)=>{\n        setAnchorEl(event.currentTarget);\n    };\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Tooltip__WEBPACK_IMPORTED_MODULE_8__[\"default\"], {\n                title: (_b = rest === null || rest === void 0 ? void 0 : rest.title) !== null && _b !== void 0 ? _b : localization.showHideColumns,\n                children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_IconButton__WEBPACK_IMPORTED_MODULE_9__[\"default\"], Object.assign({\n                    \"aria-label\": localization.showHideColumns,\n                    onClick: handleClick\n                }, rest, {\n                    title: undefined,\n                    children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ViewColumnIcon, {})\n                }))\n            }),\n            anchorEl && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MRT_ShowHideColumnsMenu, {\n                anchorEl: anchorEl,\n                setAnchorEl: setAnchorEl,\n                table: table\n            })\n        ]\n    });\n};\nconst MRT_ToggleDensePaddingButton = (_a)=>{\n    var _b;\n    var { table } = _a, rest = __rest(_a, [\n        \"table\"\n    ]);\n    const { getState, options: { icons: { DensityLargeIcon, DensityMediumIcon, DensitySmallIcon }, localization }, setDensity } = table;\n    const { density } = getState();\n    const handleToggleDensePadding = ()=>{\n        const nextDensity = density === \"comfortable\" ? \"compact\" : density === \"compact\" ? \"spacious\" : \"comfortable\";\n        setDensity(nextDensity);\n    };\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Tooltip__WEBPACK_IMPORTED_MODULE_8__[\"default\"], {\n        title: (_b = rest === null || rest === void 0 ? void 0 : rest.title) !== null && _b !== void 0 ? _b : localization.toggleDensity,\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_IconButton__WEBPACK_IMPORTED_MODULE_9__[\"default\"], Object.assign({\n            \"aria-label\": localization.toggleDensity,\n            onClick: handleToggleDensePadding\n        }, rest, {\n            title: undefined,\n            children: density === \"compact\" ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(DensitySmallIcon, {}) : density === \"comfortable\" ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(DensityMediumIcon, {}) : (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(DensityLargeIcon, {})\n        }))\n    });\n};\nconst MRT_ToggleFiltersButton = (_a)=>{\n    var _b;\n    var { table } = _a, rest = __rest(_a, [\n        \"table\"\n    ]);\n    const { getState, options: { icons: { FilterListIcon, FilterListOffIcon }, localization }, setShowColumnFilters } = table;\n    const { showColumnFilters } = getState();\n    const handleToggleShowFilters = ()=>{\n        setShowColumnFilters(!showColumnFilters);\n    };\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Tooltip__WEBPACK_IMPORTED_MODULE_8__[\"default\"], {\n        title: (_b = rest === null || rest === void 0 ? void 0 : rest.title) !== null && _b !== void 0 ? _b : localization.showHideFilters,\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_IconButton__WEBPACK_IMPORTED_MODULE_9__[\"default\"], Object.assign({\n            \"aria-label\": localization.showHideFilters,\n            onClick: handleToggleShowFilters\n        }, rest, {\n            title: undefined,\n            children: showColumnFilters ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(FilterListOffIcon, {}) : (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(FilterListIcon, {})\n        }))\n    });\n};\nconst MRT_ToggleFullScreenButton = (_a)=>{\n    var _b;\n    var { table } = _a, rest = __rest(_a, [\n        \"table\"\n    ]);\n    const { getState, options: { icons: { FullscreenExitIcon, FullscreenIcon }, localization }, setIsFullScreen } = table;\n    const { isFullScreen } = getState();\n    const [tooltipOpened, setTooltipOpened] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const handleToggleFullScreen = ()=>{\n        setTooltipOpened(false);\n        setIsFullScreen(!isFullScreen);\n    };\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Tooltip__WEBPACK_IMPORTED_MODULE_8__[\"default\"], {\n        open: tooltipOpened,\n        title: (_b = rest === null || rest === void 0 ? void 0 : rest.title) !== null && _b !== void 0 ? _b : localization.toggleFullScreen,\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_IconButton__WEBPACK_IMPORTED_MODULE_9__[\"default\"], Object.assign({\n            \"aria-label\": localization.toggleFullScreen,\n            onClick: handleToggleFullScreen,\n            onMouseEnter: ()=>setTooltipOpened(true),\n            onMouseLeave: ()=>setTooltipOpened(false)\n        }, rest, {\n            title: undefined,\n            children: isFullScreen ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(FullscreenExitIcon, {}) : (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(FullscreenIcon, {})\n        }))\n    });\n};\nconst MRT_ToggleGlobalFilterButton = (_a)=>{\n    var _b, _c;\n    var { table } = _a, rest = __rest(_a, [\n        \"table\"\n    ]);\n    const { getState, options: { icons: { SearchIcon, SearchOffIcon }, localization }, refs: { searchInputRef }, setShowGlobalFilter } = table;\n    const { globalFilter, showGlobalFilter } = getState();\n    const handleToggleSearch = ()=>{\n        setShowGlobalFilter(!showGlobalFilter);\n        queueMicrotask(()=>{\n            var _a;\n            return (_a = searchInputRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n        });\n    };\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Tooltip__WEBPACK_IMPORTED_MODULE_8__[\"default\"], {\n        title: (_b = rest === null || rest === void 0 ? void 0 : rest.title) !== null && _b !== void 0 ? _b : localization.showHideSearch,\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_IconButton__WEBPACK_IMPORTED_MODULE_9__[\"default\"], Object.assign({\n            \"aria-label\": (_c = rest === null || rest === void 0 ? void 0 : rest.title) !== null && _c !== void 0 ? _c : localization.showHideSearch,\n            disabled: !!globalFilter,\n            onClick: handleToggleSearch\n        }, rest, {\n            title: undefined,\n            children: showGlobalFilter ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SearchOffIcon, {}) : (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SearchIcon, {})\n        }))\n    });\n};\nconst MRT_ToolbarInternalButtons = (_a)=>{\n    var _b;\n    var { table } = _a, rest = __rest(_a, [\n        \"table\"\n    ]);\n    const { options: { columnFilterDisplayMode, enableColumnFilters, enableColumnOrdering, enableColumnPinning, enableDensityToggle, enableFilters, enableFullScreenToggle, enableGlobalFilter, enableHiding, initialState, renderToolbarInternalActions } } = table;\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Box__WEBPACK_IMPORTED_MODULE_7__[\"default\"], Object.assign({}, rest, {\n        sx: (theme)=>Object.assign({\n                alignItems: \"center\",\n                display: \"flex\",\n                zIndex: 3\n            }, parseFromValuesOrFunc(rest === null || rest === void 0 ? void 0 : rest.sx, theme)),\n        children: (_b = renderToolbarInternalActions === null || renderToolbarInternalActions === void 0 ? void 0 : renderToolbarInternalActions({\n            table\n        })) !== null && _b !== void 0 ? _b : (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n            children: [\n                enableFilters && enableGlobalFilter && !(initialState === null || initialState === void 0 ? void 0 : initialState.showGlobalFilter) && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MRT_ToggleGlobalFilterButton, {\n                    table: table\n                }),\n                enableFilters && enableColumnFilters && columnFilterDisplayMode !== \"popover\" && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MRT_ToggleFiltersButton, {\n                    table: table\n                }),\n                (enableHiding || enableColumnOrdering || enableColumnPinning) && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MRT_ShowHideColumnsButton, {\n                    table: table\n                }),\n                enableDensityToggle && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MRT_ToggleDensePaddingButton, {\n                    table: table\n                }),\n                enableFullScreenToggle && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MRT_ToggleFullScreenButton, {\n                    table: table\n                })\n            ]\n        })\n    }));\n};\nconst MRT_TopToolbar = ({ table })=>{\n    var _a;\n    const { getState, options: { enableGlobalFilter, enablePagination, enableToolbarInternalActions, muiTopToolbarProps, positionGlobalFilter, positionPagination, positionToolbarAlertBanner, positionToolbarDropZone, renderTopToolbarCustomActions }, refs: { topToolbarRef } } = table;\n    const { isFullScreen, showGlobalFilter } = getState();\n    const isMobile = (0,_mui_material_useMediaQuery__WEBPACK_IMPORTED_MODULE_49__[\"default\"])(\"(max-width:720px)\");\n    const toolbarProps = parseFromValuesOrFunc(muiTopToolbarProps, {\n        table\n    });\n    const stackAlertBanner = isMobile || !!renderTopToolbarCustomActions || showGlobalFilter;\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(_mui_material_Box__WEBPACK_IMPORTED_MODULE_7__[\"default\"], Object.assign({}, toolbarProps, {\n        ref: (ref)=>{\n            topToolbarRef.current = ref;\n            if (toolbarProps === null || toolbarProps === void 0 ? void 0 : toolbarProps.ref) {\n                // @ts-ignore\n                toolbarProps.ref.current = ref;\n            }\n        },\n        sx: (theme)=>Object.assign(Object.assign(Object.assign({}, getCommonToolbarStyles({\n                table,\n                theme\n            })), {\n                position: isFullScreen ? \"sticky\" : \"relative\",\n                top: isFullScreen ? \"0\" : undefined\n            }), parseFromValuesOrFunc(toolbarProps === null || toolbarProps === void 0 ? void 0 : toolbarProps.sx, theme)),\n        children: [\n            positionToolbarAlertBanner === \"top\" && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MRT_ToolbarAlertBanner, {\n                stackAlertBanner: stackAlertBanner,\n                table: table\n            }),\n            [\n                \"both\",\n                \"top\"\n            ].includes(positionToolbarDropZone !== null && positionToolbarDropZone !== void 0 ? positionToolbarDropZone : \"\") && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MRT_ToolbarDropZone, {\n                table: table\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(_mui_material_Box__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n                sx: {\n                    alignItems: \"flex-start\",\n                    boxSizing: \"border-box\",\n                    display: \"flex\",\n                    gap: \"0.5rem\",\n                    justifyContent: \"space-between\",\n                    p: \"0.5rem\",\n                    position: stackAlertBanner ? \"relative\" : \"absolute\",\n                    right: 0,\n                    top: 0,\n                    width: \"100%\"\n                },\n                children: [\n                    enableGlobalFilter && positionGlobalFilter === \"left\" && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MRT_GlobalFilterTextField, {\n                        table: table\n                    }),\n                    (_a = renderTopToolbarCustomActions === null || renderTopToolbarCustomActions === void 0 ? void 0 : renderTopToolbarCustomActions({\n                        table\n                    })) !== null && _a !== void 0 ? _a : (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {}),\n                    enableToolbarInternalActions ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(_mui_material_Box__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n                        sx: {\n                            alignItems: \"center\",\n                            display: \"flex\",\n                            flexWrap: \"wrap-reverse\",\n                            gap: \"0.5rem\",\n                            justifyContent: \"flex-end\"\n                        },\n                        children: [\n                            enableGlobalFilter && positionGlobalFilter === \"right\" && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MRT_GlobalFilterTextField, {\n                                table: table\n                            }),\n                            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MRT_ToolbarInternalButtons, {\n                                table: table\n                            })\n                        ]\n                    }) : enableGlobalFilter && positionGlobalFilter === \"right\" && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MRT_GlobalFilterTextField, {\n                        table: table\n                    })\n                ]\n            }),\n            enablePagination && [\n                \"both\",\n                \"top\"\n            ].includes(positionPagination !== null && positionPagination !== void 0 ? positionPagination : \"\") && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MRT_TablePagination, {\n                position: \"top\",\n                table: table\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MRT_LinearProgressBar, {\n                isTopToolbar: true,\n                table: table\n            })\n        ]\n    }));\n};\nconst MRT_TableHead = (_a)=>{\n    var { table, virtualColumns, virtualPaddingLeft, virtualPaddingRight } = _a, rest = __rest(_a, [\n        \"table\",\n        \"virtualColumns\",\n        \"virtualPaddingLeft\",\n        \"virtualPaddingRight\"\n    ]);\n    const { getHeaderGroups, getSelectedRowModel, getState, options: { enableStickyHeader, layoutMode, muiTableHeadProps, positionToolbarAlertBanner }, refs: { tableHeadRef } } = table;\n    const { isFullScreen, showAlertBanner } = getState();\n    const tableHeadProps = Object.assign(Object.assign({}, parseFromValuesOrFunc(muiTableHeadProps, {\n        table\n    })), rest);\n    const stickyHeader = enableStickyHeader || isFullScreen;\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_TableHead__WEBPACK_IMPORTED_MODULE_51__[\"default\"], Object.assign({}, tableHeadProps, {\n        ref: (ref)=>{\n            tableHeadRef.current = ref;\n            if (tableHeadProps === null || tableHeadProps === void 0 ? void 0 : tableHeadProps.ref) {\n                // @ts-ignore\n                tableHeadProps.ref.current = ref;\n            }\n        },\n        sx: (theme)=>Object.assign({\n                display: (layoutMode === null || layoutMode === void 0 ? void 0 : layoutMode.startsWith(\"grid\")) ? \"grid\" : undefined,\n                opacity: 0.97,\n                position: stickyHeader ? \"sticky\" : \"relative\",\n                top: stickyHeader && (layoutMode === null || layoutMode === void 0 ? void 0 : layoutMode.startsWith(\"grid\")) ? 0 : undefined,\n                zIndex: stickyHeader ? 2 : undefined\n            }, parseFromValuesOrFunc(tableHeadProps === null || tableHeadProps === void 0 ? void 0 : tableHeadProps.sx, theme)),\n        children: positionToolbarAlertBanner === \"head-overlay\" && (showAlertBanner || getSelectedRowModel().rows.length > 0) ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"tr\", {\n            style: {\n                display: (layoutMode === null || layoutMode === void 0 ? void 0 : layoutMode.startsWith(\"grid\")) ? \"grid\" : undefined\n            },\n            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"th\", {\n                colSpan: table.getVisibleLeafColumns().length,\n                style: {\n                    display: (layoutMode === null || layoutMode === void 0 ? void 0 : layoutMode.startsWith(\"grid\")) ? \"grid\" : undefined,\n                    padding: 0\n                },\n                children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MRT_ToolbarAlertBanner, {\n                    table: table\n                })\n            })\n        }) : getHeaderGroups().map((headerGroup)=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MRT_TableHeadRow, {\n                headerGroup: headerGroup,\n                table: table,\n                virtualColumns: virtualColumns,\n                virtualPaddingLeft: virtualPaddingLeft,\n                virtualPaddingRight: virtualPaddingRight\n            }, headerGroup.id))\n    }));\n};\nconst MRT_Table = (_a)=>{\n    var _b, _c, _d, _e;\n    var { table } = _a, rest = __rest(_a, [\n        \"table\"\n    ]);\n    const { getFlatHeaders, getState, options: { columnVirtualizerInstanceRef, columnVirtualizerOptions, columns, enableColumnPinning, enableColumnVirtualization, enableStickyHeader, enableTableFooter, enableTableHead, layoutMode, memoMode, muiTableProps }, refs: { tableContainerRef } } = table;\n    const { columnPinning, columnSizing, columnSizingInfo, columnVisibility, draggingColumn, isFullScreen } = getState();\n    const tableProps = Object.assign(Object.assign({}, parseFromValuesOrFunc(muiTableProps, {\n        table\n    })), rest);\n    const columnVirtualizerProps = parseFromValuesOrFunc(columnVirtualizerOptions, {\n        table\n    });\n    const columnSizeVars = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        var _a;\n        const headers = getFlatHeaders();\n        const colSizes = {};\n        for(let i = 0; i < headers.length; i++){\n            const header = headers[i];\n            let colSize = header.getSize();\n            if ((_a = header.subHeaders) === null || _a === void 0 ? void 0 : _a.length) colSize = colSize * 1.05 + header.subHeaders.length * 2;\n            colSizes[`--header-${parseCSSVarId(header.id)}-size`] = colSize;\n            colSizes[`--col-${parseCSSVarId(header.column.id)}-size`] = colSize;\n        }\n        return colSizes;\n    }, [\n        columns,\n        columnSizing,\n        columnSizingInfo,\n        columnVisibility\n    ]);\n    //get first 16 column widths and average them\n    const averageColumnWidth = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        var _a, _b, _c, _d;\n        if (!enableColumnVirtualization) return 0;\n        const columnsWidths = (_d = (_c = (_b = (_a = table.getRowModel().rows[0]) === null || _a === void 0 ? void 0 : _a.getCenterVisibleCells()) === null || _b === void 0 ? void 0 : _b.slice(0, 16)) === null || _c === void 0 ? void 0 : _c.map((cell)=>cell.column.getSize() * 1.2)) !== null && _d !== void 0 ? _d : [];\n        return columnsWidths.reduce((a, b)=>a + b, 0) / columnsWidths.length;\n    }, [\n        table.getRowModel().rows,\n        columnPinning,\n        columnVisibility\n    ]);\n    const [leftPinnedIndexes, rightPinnedIndexes] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>enableColumnVirtualization && enableColumnPinning ? [\n            table.getLeftLeafColumns().map((c)=>c.getPinnedIndex()),\n            table.getRightLeafColumns().map((c)=>table.getVisibleLeafColumns().length - c.getPinnedIndex() - 1)\n        ] : [\n            [],\n            []\n        ], [\n        columnPinning,\n        enableColumnVirtualization,\n        enableColumnPinning\n    ]);\n    const draggingColumnIndex = table.getVisibleLeafColumns().findIndex((c)=>c.id === (draggingColumn === null || draggingColumn === void 0 ? void 0 : draggingColumn.id));\n    const columnVirtualizer = enableColumnVirtualization ? (0,_tanstack_react_virtual__WEBPACK_IMPORTED_MODULE_19__.useVirtualizer)(Object.assign({\n        count: table.getVisibleLeafColumns().length,\n        estimateSize: ()=>averageColumnWidth,\n        getScrollElement: ()=>tableContainerRef.current,\n        horizontal: true,\n        overscan: 3,\n        rangeExtractor: (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((range)=>{\n            const newIndexs = extraIndexRangeExtractor(range, draggingColumnIndex);\n            return [\n                ...new Set([\n                    ...leftPinnedIndexes,\n                    ...newIndexs,\n                    ...rightPinnedIndexes\n                ])\n            ];\n        }, [\n            leftPinnedIndexes,\n            rightPinnedIndexes,\n            draggingColumnIndex\n        ])\n    }, columnVirtualizerProps)) : undefined;\n    if (columnVirtualizerInstanceRef && columnVirtualizer) {\n        columnVirtualizerInstanceRef.current = columnVirtualizer;\n    }\n    const virtualColumns = columnVirtualizer ? columnVirtualizer.getVirtualItems() : undefined;\n    let virtualPaddingLeft;\n    let virtualPaddingRight;\n    if (columnVirtualizer && (virtualColumns === null || virtualColumns === void 0 ? void 0 : virtualColumns.length)) {\n        virtualPaddingLeft = (_c = (_b = virtualColumns[leftPinnedIndexes.length]) === null || _b === void 0 ? void 0 : _b.start) !== null && _c !== void 0 ? _c : 0;\n        virtualPaddingRight = columnVirtualizer.getTotalSize() - ((_e = (_d = virtualColumns[virtualColumns.length - 1 - rightPinnedIndexes.length]) === null || _d === void 0 ? void 0 : _d.end) !== null && _e !== void 0 ? _e : 0);\n    }\n    const props = {\n        table,\n        virtualColumns,\n        virtualPaddingLeft,\n        virtualPaddingRight\n    };\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(_mui_material_Table__WEBPACK_IMPORTED_MODULE_52__[\"default\"], Object.assign({\n        stickyHeader: enableStickyHeader || isFullScreen\n    }, tableProps, {\n        style: Object.assign(Object.assign({}, columnSizeVars), tableProps === null || tableProps === void 0 ? void 0 : tableProps.style),\n        sx: (theme)=>Object.assign({\n                borderCollapse: \"separate\",\n                display: (layoutMode === null || layoutMode === void 0 ? void 0 : layoutMode.startsWith(\"grid\")) ? \"grid\" : undefined\n            }, parseFromValuesOrFunc(tableProps === null || tableProps === void 0 ? void 0 : tableProps.sx, theme)),\n        children: [\n            enableTableHead && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MRT_TableHead, Object.assign({}, props)),\n            memoMode === \"table-body\" || columnSizingInfo.isResizingColumn ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Memo_MRT_TableBody, Object.assign({\n                columnVirtualizer: columnVirtualizer\n            }, props)) : (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MRT_TableBody, Object.assign({\n                columnVirtualizer: columnVirtualizer\n            }, props)),\n            enableTableFooter && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MRT_TableFooter, Object.assign({}, props))\n        ]\n    }));\n};\nconst MRT_TableLoadingOverlay = (_a)=>{\n    var { table } = _a, rest = __rest(_a, [\n        \"table\"\n    ]);\n    const { options: { localization, muiCircularProgressProps } } = table;\n    const circularProgressProps = Object.assign(Object.assign({}, parseFromValuesOrFunc(muiCircularProgressProps, {\n        table\n    })), rest);\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Box__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n        sx: (theme)=>({\n                alignItems: \"center\",\n                backgroundColor: (0,_mui_material_styles__WEBPACK_IMPORTED_MODULE_6__.alpha)(getMRTTheme(table, theme).baseBackgroundColor, 0.5),\n                bottom: 0,\n                display: \"flex\",\n                justifyContent: \"center\",\n                left: 0,\n                maxHeight: \"100vh\",\n                position: \"absolute\",\n                right: 0,\n                top: 0,\n                width: \"100%\",\n                zIndex: 2\n            }),\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_CircularProgress__WEBPACK_IMPORTED_MODULE_53__[\"default\"], Object.assign({\n            \"aria-label\": localization.noRecordsToDisplay,\n            id: \"mrt-progress\"\n        }, circularProgressProps))\n    });\n};\nconst MRT_EditActionButtons = (_a)=>{\n    var { row, table, variant = \"icon\" } = _a, rest = __rest(_a, [\n        \"row\",\n        \"table\",\n        \"variant\"\n    ]);\n    const { getState, options: { icons: { CancelIcon, SaveIcon }, localization, onCreatingRowCancel, onCreatingRowSave, onEditingRowCancel, onEditingRowSave }, refs: { editInputRefs }, setCreatingRow, setEditingRow } = table;\n    const { creatingRow, editingRow, isSaving } = getState();\n    const isCreating = (creatingRow === null || creatingRow === void 0 ? void 0 : creatingRow.id) === row.id;\n    const isEditing = (editingRow === null || editingRow === void 0 ? void 0 : editingRow.id) === row.id;\n    const handleCancel = ()=>{\n        if (isCreating) {\n            onCreatingRowCancel === null || onCreatingRowCancel === void 0 ? void 0 : onCreatingRowCancel({\n                row,\n                table\n            });\n            setCreatingRow(null);\n        } else if (isEditing) {\n            onEditingRowCancel === null || onEditingRowCancel === void 0 ? void 0 : onEditingRowCancel({\n                row,\n                table\n            });\n            setEditingRow(null);\n        }\n        row._valuesCache = {}; //reset values cache\n    };\n    const handleSubmitRow = ()=>{\n        var _a;\n        //look for auto-filled input values\n        (_a = Object.values(editInputRefs === null || editInputRefs === void 0 ? void 0 : editInputRefs.current).filter((inputRef)=>{\n            var _a, _b;\n            return row.id === ((_b = (_a = inputRef === null || inputRef === void 0 ? void 0 : inputRef.name) === null || _a === void 0 ? void 0 : _a.split(\"_\")) === null || _b === void 0 ? void 0 : _b[0]);\n        })) === null || _a === void 0 ? void 0 : _a.forEach((input)=>{\n            if (input.value !== undefined && Object.hasOwn(row === null || row === void 0 ? void 0 : row._valuesCache, input.name)) {\n                // @ts-ignore\n                row._valuesCache[input.name] = input.value;\n            }\n        });\n        if (isCreating) onCreatingRowSave === null || onCreatingRowSave === void 0 ? void 0 : onCreatingRowSave({\n            exitCreatingMode: ()=>setCreatingRow(null),\n            row,\n            table,\n            values: row._valuesCache\n        });\n        else if (isEditing) {\n            onEditingRowSave === null || onEditingRowSave === void 0 ? void 0 : onEditingRowSave({\n                exitEditingMode: ()=>setEditingRow(null),\n                row,\n                table,\n                values: row === null || row === void 0 ? void 0 : row._valuesCache\n            });\n        }\n    };\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Box__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n        onClick: (e)=>e.stopPropagation(),\n        sx: (theme)=>Object.assign({\n                display: \"flex\",\n                gap: \"0.75rem\"\n            }, parseFromValuesOrFunc(rest === null || rest === void 0 ? void 0 : rest.sx, theme)),\n        children: variant === \"icon\" ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n            children: [\n                (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Tooltip__WEBPACK_IMPORTED_MODULE_8__[\"default\"], {\n                    title: localization.cancel,\n                    children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_IconButton__WEBPACK_IMPORTED_MODULE_9__[\"default\"], {\n                        \"aria-label\": localization.cancel,\n                        onClick: handleCancel,\n                        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(CancelIcon, {})\n                    })\n                }),\n                (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Tooltip__WEBPACK_IMPORTED_MODULE_8__[\"default\"], {\n                    title: localization.save,\n                    children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_IconButton__WEBPACK_IMPORTED_MODULE_9__[\"default\"], {\n                        \"aria-label\": localization.save,\n                        color: \"info\",\n                        onClick: handleSubmitRow,\n                        children: isSaving ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_CircularProgress__WEBPACK_IMPORTED_MODULE_53__[\"default\"], {\n                            size: 18\n                        }) : (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SaveIcon, {})\n                    })\n                })\n            ]\n        }) : (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n            children: [\n                (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Button__WEBPACK_IMPORTED_MODULE_10__[\"default\"], {\n                    onClick: handleCancel,\n                    sx: {\n                        minWidth: \"100px\"\n                    },\n                    children: localization.cancel\n                }),\n                (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(_mui_material_Button__WEBPACK_IMPORTED_MODULE_10__[\"default\"], {\n                    onClick: handleSubmitRow,\n                    sx: {\n                        minWidth: \"100px\"\n                    },\n                    variant: \"contained\",\n                    children: [\n                        isSaving && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_CircularProgress__WEBPACK_IMPORTED_MODULE_53__[\"default\"], {\n                            color: \"inherit\",\n                            size: 18\n                        }),\n                        localization.save\n                    ]\n                })\n            ]\n        })\n    });\n};\nconst MRT_EditRowModal = (_a)=>{\n    var _b;\n    var { open, table } = _a, rest = __rest(_a, [\n        \"open\",\n        \"table\"\n    ]);\n    const { getState, options: { localization, muiCreateRowModalProps, muiEditRowDialogProps, onCreatingRowCancel, onEditingRowCancel, renderCreateRowDialogContent, renderEditRowDialogContent }, setCreatingRow, setEditingRow } = table;\n    const { creatingRow, editingRow } = getState();\n    const row = creatingRow !== null && creatingRow !== void 0 ? creatingRow : editingRow;\n    const dialogProps = Object.assign(Object.assign(Object.assign({}, parseFromValuesOrFunc(muiEditRowDialogProps, {\n        row,\n        table\n    })), creatingRow && parseFromValuesOrFunc(muiCreateRowModalProps, {\n        row,\n        table\n    })), rest);\n    const internalEditComponents = row.getAllCells().filter((cell)=>cell.column.columnDef.columnDefType === \"data\").map((cell)=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MRT_EditCellTextField, {\n            cell: cell,\n            table: table\n        }, cell.id));\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Dialog__WEBPACK_IMPORTED_MODULE_54__[\"default\"], Object.assign({\n        fullWidth: true,\n        maxWidth: \"xs\",\n        onClose: (event, reason)=>{\n            var _a;\n            if (creatingRow) {\n                onCreatingRowCancel === null || onCreatingRowCancel === void 0 ? void 0 : onCreatingRowCancel({\n                    row,\n                    table\n                });\n                setCreatingRow(null);\n            } else {\n                onEditingRowCancel === null || onEditingRowCancel === void 0 ? void 0 : onEditingRowCancel({\n                    row,\n                    table\n                });\n                setEditingRow(null);\n            }\n            row._valuesCache = {}; //reset values cache\n            (_a = dialogProps.onClose) === null || _a === void 0 ? void 0 : _a.call(dialogProps, event, reason);\n        },\n        open: open\n    }, dialogProps, {\n        children: (_b = creatingRow && (renderCreateRowDialogContent === null || renderCreateRowDialogContent === void 0 ? void 0 : renderCreateRowDialogContent({\n            internalEditComponents,\n            row,\n            table\n        })) || (renderEditRowDialogContent === null || renderEditRowDialogContent === void 0 ? void 0 : renderEditRowDialogContent({\n            internalEditComponents,\n            row,\n            table\n        }))) !== null && _b !== void 0 ? _b : (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n            children: [\n                (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_DialogTitle__WEBPACK_IMPORTED_MODULE_55__[\"default\"], {\n                    sx: {\n                        textAlign: \"center\"\n                    },\n                    children: localization.edit\n                }),\n                (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_DialogContent__WEBPACK_IMPORTED_MODULE_56__[\"default\"], {\n                    children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"form\", {\n                        onSubmit: (e)=>e.preventDefault(),\n                        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Stack__WEBPACK_IMPORTED_MODULE_32__[\"default\"], {\n                            sx: {\n                                gap: \"32px\",\n                                paddingTop: \"16px\",\n                                width: \"100%\"\n                            },\n                            children: internalEditComponents\n                        })\n                    })\n                }),\n                (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_DialogActions__WEBPACK_IMPORTED_MODULE_57__[\"default\"], {\n                    sx: {\n                        p: \"1.25rem\"\n                    },\n                    children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MRT_EditActionButtons, {\n                        row: row,\n                        table: table,\n                        variant: \"text\"\n                    })\n                })\n            ]\n        })\n    }));\n};\nconst useIsomorphicLayoutEffect =  false ? 0 : react__WEBPACK_IMPORTED_MODULE_1__.useEffect;\nconst MRT_TableContainer = (_a)=>{\n    var { table } = _a, rest = __rest(_a, [\n        \"table\"\n    ]);\n    const { getState, options: { createDisplayMode, editDisplayMode, enableStickyHeader, muiTableContainerProps }, refs: { bottomToolbarRef, tableContainerRef, topToolbarRef } } = table;\n    const { creatingRow, editingRow, isFullScreen, isLoading, showLoadingOverlay } = getState();\n    const loading = showLoadingOverlay !== false && (isLoading || showLoadingOverlay);\n    const [totalToolbarHeight, setTotalToolbarHeight] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    const tableContainerProps = Object.assign(Object.assign({}, parseFromValuesOrFunc(muiTableContainerProps, {\n        table\n    })), rest);\n    useIsomorphicLayoutEffect(()=>{\n        var _a, _b, _c, _d;\n        const topToolbarHeight = typeof document !== \"undefined\" ? (_b = (_a = topToolbarRef.current) === null || _a === void 0 ? void 0 : _a.offsetHeight) !== null && _b !== void 0 ? _b : 0 : 0;\n        const bottomToolbarHeight = typeof document !== \"undefined\" ? (_d = (_c = bottomToolbarRef === null || bottomToolbarRef === void 0 ? void 0 : bottomToolbarRef.current) === null || _c === void 0 ? void 0 : _c.offsetHeight) !== null && _d !== void 0 ? _d : 0 : 0;\n        setTotalToolbarHeight(topToolbarHeight + bottomToolbarHeight);\n    });\n    const createModalOpen = createDisplayMode === \"modal\" && creatingRow;\n    const editModalOpen = editDisplayMode === \"modal\" && editingRow;\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(_mui_material_TableContainer__WEBPACK_IMPORTED_MODULE_58__[\"default\"], Object.assign({\n        \"aria-busy\": loading,\n        \"aria-describedby\": loading ? \"mrt-progress\" : undefined\n    }, tableContainerProps, {\n        ref: (node)=>{\n            if (node) {\n                tableContainerRef.current = node;\n                if (tableContainerProps === null || tableContainerProps === void 0 ? void 0 : tableContainerProps.ref) {\n                    //@ts-ignore\n                    tableContainerProps.ref.current = node;\n                }\n            }\n        },\n        style: Object.assign({\n            maxHeight: isFullScreen ? `calc(100vh - ${totalToolbarHeight}px)` : undefined\n        }, tableContainerProps === null || tableContainerProps === void 0 ? void 0 : tableContainerProps.style),\n        sx: (theme)=>Object.assign({\n                maxHeight: enableStickyHeader ? `clamp(350px, calc(100vh - ${totalToolbarHeight}px), 9999px)` : undefined,\n                maxWidth: \"100%\",\n                overflow: \"auto\",\n                position: \"relative\"\n            }, parseFromValuesOrFunc(tableContainerProps === null || tableContainerProps === void 0 ? void 0 : tableContainerProps.sx, theme)),\n        children: [\n            loading ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MRT_TableLoadingOverlay, {\n                table: table\n            }) : null,\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MRT_Table, {\n                table: table\n            }),\n            (createModalOpen || editModalOpen) && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MRT_EditRowModal, {\n                open: true,\n                table: table\n            })\n        ]\n    }));\n};\nconst MRT_TablePaper = (_a)=>{\n    var _b, _c;\n    var { table } = _a, rest = __rest(_a, [\n        \"table\"\n    ]);\n    const { getState, options: { enableBottomToolbar, enableTopToolbar, muiTablePaperProps, renderBottomToolbar, renderTopToolbar }, refs: { tablePaperRef } } = table;\n    const { isFullScreen } = getState();\n    const paperProps = Object.assign(Object.assign({}, parseFromValuesOrFunc(muiTablePaperProps, {\n        table\n    })), rest);\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(_mui_material_Paper__WEBPACK_IMPORTED_MODULE_59__[\"default\"], Object.assign({\n        elevation: 2\n    }, paperProps, {\n        ref: (ref)=>{\n            tablePaperRef.current = ref;\n            if (paperProps === null || paperProps === void 0 ? void 0 : paperProps.ref) {\n                //@ts-ignore\n                paperProps.ref.current = ref;\n            }\n        },\n        style: Object.assign(Object.assign({}, isFullScreen ? {\n            bottom: 0,\n            height: \"100vh\",\n            left: 0,\n            margin: 0,\n            maxHeight: \"100vh\",\n            maxWidth: \"100vw\",\n            padding: 0,\n            position: \"fixed\",\n            right: 0,\n            top: 0,\n            width: \"100vw\",\n            zIndex: 999\n        } : {}), paperProps === null || paperProps === void 0 ? void 0 : paperProps.style),\n        sx: (theme)=>Object.assign({\n                backgroundColor: getMRTTheme(table, theme).baseBackgroundColor,\n                backgroundImage: \"unset\",\n                overflow: \"hidden\",\n                transition: \"all 100ms ease-in-out\"\n            }, parseFromValuesOrFunc(paperProps === null || paperProps === void 0 ? void 0 : paperProps.sx, theme)),\n        children: [\n            enableTopToolbar && ((_b = parseFromValuesOrFunc(renderTopToolbar, {\n                table\n            })) !== null && _b !== void 0 ? _b : (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MRT_TopToolbar, {\n                table: table\n            })),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MRT_TableContainer, {\n                table: table\n            }),\n            enableBottomToolbar && ((_c = parseFromValuesOrFunc(renderBottomToolbar, {\n                table\n            })) !== null && _c !== void 0 ? _c : (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MRT_BottomToolbar, {\n                table: table\n            }))\n        ]\n    }));\n};\nconst MRT_RowPinButton = (_a)=>{\n    var { pinningPosition, row, table } = _a, rest = __rest(_a, [\n        \"pinningPosition\",\n        \"row\",\n        \"table\"\n    ]);\n    const { options: { icons: { CloseIcon, PushPinIcon }, localization, rowPinningDisplayMode } } = table;\n    const isPinned = row.getIsPinned();\n    const [tooltipOpened, setTooltipOpened] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const handleTogglePin = (event)=>{\n        setTooltipOpened(false);\n        event.stopPropagation();\n        row.pin(isPinned ? false : pinningPosition);\n    };\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Tooltip__WEBPACK_IMPORTED_MODULE_8__[\"default\"], {\n        enterDelay: 1000,\n        enterNextDelay: 1000,\n        open: tooltipOpened,\n        title: isPinned ? localization.unpin : localization.pin,\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_IconButton__WEBPACK_IMPORTED_MODULE_9__[\"default\"], Object.assign({\n            \"aria-label\": localization.pin,\n            onClick: handleTogglePin,\n            onMouseEnter: ()=>setTooltipOpened(true),\n            onMouseLeave: ()=>setTooltipOpened(false),\n            size: \"small\"\n        }, rest, {\n            sx: (theme)=>Object.assign({\n                    height: \"24px\",\n                    width: \"24px\"\n                }, parseFromValuesOrFunc(rest === null || rest === void 0 ? void 0 : rest.sx, theme)),\n            children: isPinned ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(CloseIcon, {}) : (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(PushPinIcon, {\n                fontSize: \"small\",\n                style: {\n                    transform: `rotate(${rowPinningDisplayMode === \"sticky\" ? 135 : pinningPosition === \"top\" ? 180 : 0}deg)`\n                }\n            })\n        }))\n    });\n};\nconst MRT_TableBodyRowPinButton = (_a)=>{\n    var { row, table } = _a, rest = __rest(_a, [\n        \"row\",\n        \"table\"\n    ]);\n    const { getState, options: { enableRowPinning, rowPinningDisplayMode } } = table;\n    const { density } = getState();\n    const canPin = parseFromValuesOrFunc(enableRowPinning, row);\n    if (!canPin) return null;\n    const rowPinButtonProps = Object.assign({\n        row,\n        table\n    }, rest);\n    if (rowPinningDisplayMode === \"top-and-bottom\" && !row.getIsPinned()) {\n        return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(_mui_material_Box__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n            sx: {\n                display: \"flex\",\n                flexDirection: density === \"compact\" ? \"row\" : \"column\"\n            },\n            children: [\n                (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MRT_RowPinButton, Object.assign({\n                    pinningPosition: \"top\"\n                }, rowPinButtonProps)),\n                (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MRT_RowPinButton, Object.assign({\n                    pinningPosition: \"bottom\"\n                }, rowPinButtonProps))\n            ]\n        });\n    }\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MRT_RowPinButton, Object.assign({\n        pinningPosition: rowPinningDisplayMode === \"bottom\" ? \"bottom\" : \"top\"\n    }, rowPinButtonProps));\n};\nconst MRT_ExpandAllButton = (_a)=>{\n    var _b, _c;\n    var { table } = _a, rest = __rest(_a, [\n        \"table\"\n    ]);\n    const { getCanSomeRowsExpand, getIsAllRowsExpanded, getIsSomeRowsExpanded, getState, options: { icons: { KeyboardDoubleArrowDownIcon }, localization, muiExpandAllButtonProps, renderDetailPanel }, toggleAllRowsExpanded } = table;\n    const { density, isLoading } = getState();\n    const iconButtonProps = Object.assign(Object.assign({}, parseFromValuesOrFunc(muiExpandAllButtonProps, {\n        table\n    })), rest);\n    const isAllRowsExpanded = getIsAllRowsExpanded();\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Tooltip__WEBPACK_IMPORTED_MODULE_8__[\"default\"], {\n        enterDelay: 1000,\n        enterNextDelay: 1000,\n        title: (_b = iconButtonProps === null || iconButtonProps === void 0 ? void 0 : iconButtonProps.title) !== null && _b !== void 0 ? _b : isAllRowsExpanded ? localization.collapseAll : localization.expandAll,\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_IconButton__WEBPACK_IMPORTED_MODULE_9__[\"default\"], Object.assign({\n                \"aria-label\": localization.expandAll,\n                disabled: isLoading || !renderDetailPanel && !getCanSomeRowsExpand(),\n                onClick: ()=>toggleAllRowsExpanded(!isAllRowsExpanded)\n            }, iconButtonProps, {\n                sx: (theme)=>Object.assign({\n                        height: density === \"compact\" ? \"1.75rem\" : \"2.25rem\",\n                        mt: density !== \"compact\" ? \"-0.25rem\" : undefined,\n                        width: density === \"compact\" ? \"1.75rem\" : \"2.25rem\"\n                    }, parseFromValuesOrFunc(iconButtonProps === null || iconButtonProps === void 0 ? void 0 : iconButtonProps.sx, theme)),\n                title: undefined,\n                children: (_c = iconButtonProps === null || iconButtonProps === void 0 ? void 0 : iconButtonProps.children) !== null && _c !== void 0 ? _c : (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(KeyboardDoubleArrowDownIcon, {\n                    style: {\n                        transform: `rotate(${isAllRowsExpanded ? -180 : getIsSomeRowsExpanded() ? -90 : 0}deg)`,\n                        transition: \"transform 150ms\"\n                    }\n                })\n            }))\n        })\n    });\n};\nconst MRT_ExpandButton = ({ row, table })=>{\n    var _a, _b;\n    const { getState, options: { icons: { ExpandMoreIcon }, localization, muiExpandButtonProps, renderDetailPanel } } = table;\n    const { density } = getState();\n    const iconButtonProps = parseFromValuesOrFunc(muiExpandButtonProps, {\n        row,\n        table\n    });\n    const canExpand = row.getCanExpand();\n    const isExpanded = row.getIsExpanded();\n    const handleToggleExpand = (event)=>{\n        var _a;\n        event.stopPropagation();\n        row.toggleExpanded();\n        (_a = iconButtonProps === null || iconButtonProps === void 0 ? void 0 : iconButtonProps.onClick) === null || _a === void 0 ? void 0 : _a.call(iconButtonProps, event);\n    };\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Tooltip__WEBPACK_IMPORTED_MODULE_8__[\"default\"], {\n        disableHoverListener: !canExpand && !renderDetailPanel,\n        enterDelay: 1000,\n        enterNextDelay: 1000,\n        title: (_a = iconButtonProps === null || iconButtonProps === void 0 ? void 0 : iconButtonProps.title) !== null && _a !== void 0 ? _a : isExpanded ? localization.collapse : localization.expand,\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"span\", {\n            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_IconButton__WEBPACK_IMPORTED_MODULE_9__[\"default\"], Object.assign({\n                \"aria-label\": localization.expand,\n                disabled: !canExpand && !renderDetailPanel\n            }, iconButtonProps, {\n                onClick: handleToggleExpand,\n                sx: (theme)=>Object.assign({\n                        height: density === \"compact\" ? \"1.75rem\" : \"2.25rem\",\n                        opacity: !canExpand && !renderDetailPanel ? 0.3 : 1,\n                        width: density === \"compact\" ? \"1.75rem\" : \"2.25rem\"\n                    }, parseFromValuesOrFunc(iconButtonProps === null || iconButtonProps === void 0 ? void 0 : iconButtonProps.sx, theme)),\n                title: undefined,\n                children: (_b = iconButtonProps === null || iconButtonProps === void 0 ? void 0 : iconButtonProps.children) !== null && _b !== void 0 ? _b : (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ExpandMoreIcon, {\n                    style: {\n                        transform: `rotate(${!canExpand && !renderDetailPanel ? -90 : isExpanded ? -180 : 0}deg)`,\n                        transition: \"transform 150ms\"\n                    }\n                })\n            }))\n        })\n    });\n};\nconst MRT_RowActionMenu = (_a)=>{\n    var { anchorEl, handleEdit, row, setAnchorEl, table } = _a, rest = __rest(_a, [\n        \"anchorEl\",\n        \"handleEdit\",\n        \"row\",\n        \"setAnchorEl\",\n        \"table\"\n    ]);\n    const { getState, options: { editDisplayMode, enableEditing, icons: { EditIcon }, localization, renderRowActionMenuItems } } = table;\n    const { density } = getState();\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(_mui_material_Menu__WEBPACK_IMPORTED_MODULE_23__[\"default\"], Object.assign({\n        MenuListProps: {\n            dense: density === \"compact\"\n        },\n        anchorEl: anchorEl,\n        onClick: (event)=>event.stopPropagation(),\n        onClose: ()=>setAnchorEl(null),\n        open: !!anchorEl\n    }, rest, {\n        children: [\n            parseFromValuesOrFunc(enableEditing, row) && [\n                \"modal\",\n                \"row\"\n            ].includes(editDisplayMode) && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_MenuItem__WEBPACK_IMPORTED_MODULE_12__[\"default\"], {\n                onClick: handleEdit,\n                sx: commonMenuItemStyles,\n                children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(_mui_material_Box__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n                    sx: commonListItemStyles,\n                    children: [\n                        (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_ListItemIcon__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n                            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(EditIcon, {})\n                        }),\n                        localization.edit\n                    ]\n                })\n            }),\n            renderRowActionMenuItems === null || renderRowActionMenuItems === void 0 ? void 0 : renderRowActionMenuItems({\n                closeMenu: ()=>setAnchorEl(null),\n                row,\n                table\n            })\n        ]\n    }));\n};\nconst commonIconButtonStyles = {\n    \"&:hover\": {\n        opacity: 1\n    },\n    height: \"2rem\",\n    ml: \"10px\",\n    opacity: 0.5,\n    transition: \"opacity 150ms\",\n    width: \"2rem\"\n};\nconst MRT_ToggleRowActionMenuButton = (_a)=>{\n    var { cell, row, table } = _a, rest = __rest(_a, [\n        \"cell\",\n        \"row\",\n        \"table\"\n    ]);\n    const { getState, options: { createDisplayMode, editDisplayMode, enableEditing, icons: { EditIcon, MoreHorizIcon }, localization, renderRowActionMenuItems, renderRowActions }, setEditingRow } = table;\n    const { creatingRow, editingRow } = getState();\n    const isCreating = (creatingRow === null || creatingRow === void 0 ? void 0 : creatingRow.id) === row.id;\n    const isEditing = (editingRow === null || editingRow === void 0 ? void 0 : editingRow.id) === row.id;\n    const showEditActionButtons = isCreating && createDisplayMode === \"row\" || isEditing && editDisplayMode === \"row\";\n    const [anchorEl, setAnchorEl] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const handleOpenRowActionMenu = (event)=>{\n        event.stopPropagation();\n        event.preventDefault();\n        setAnchorEl(event.currentTarget);\n    };\n    const handleStartEditMode = (event)=>{\n        event.stopPropagation();\n        setEditingRow(Object.assign({}, row));\n        setAnchorEl(null);\n    };\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n        children: renderRowActions && !showEditActionButtons ? renderRowActions({\n            cell,\n            row,\n            table\n        }) : showEditActionButtons ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MRT_EditActionButtons, {\n            row: row,\n            table: table\n        }) : !renderRowActionMenuItems && parseFromValuesOrFunc(enableEditing, row) && [\n            \"modal\",\n            \"row\"\n        ].includes(editDisplayMode) ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Tooltip__WEBPACK_IMPORTED_MODULE_8__[\"default\"], {\n            placement: \"right\",\n            title: localization.edit,\n            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_IconButton__WEBPACK_IMPORTED_MODULE_9__[\"default\"], Object.assign({\n                \"aria-label\": localization.edit,\n                onClick: handleStartEditMode,\n                sx: commonIconButtonStyles\n            }, rest, {\n                children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(EditIcon, {})\n            }))\n        }) : renderRowActionMenuItems ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n            children: [\n                (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_Tooltip__WEBPACK_IMPORTED_MODULE_8__[\"default\"], {\n                    enterDelay: 1000,\n                    enterNextDelay: 1000,\n                    title: localization.rowActions,\n                    children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_mui_material_IconButton__WEBPACK_IMPORTED_MODULE_9__[\"default\"], Object.assign({\n                        \"aria-label\": localization.rowActions,\n                        onClick: handleOpenRowActionMenu,\n                        size: \"small\",\n                        sx: commonIconButtonStyles\n                    }, rest, {\n                        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MoreHorizIcon, {})\n                    }))\n                }),\n                (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MRT_RowActionMenu, {\n                    anchorEl: anchorEl,\n                    handleEdit: handleStartEditMode,\n                    row: row,\n                    setAnchorEl: setAnchorEl,\n                    table: table\n                })\n            ]\n        }) : null\n    });\n};\nconst useMRT_DisplayColumns = (params)=>{\n    var _a, _b, _c, _d;\n    const { columnOrder, creatingRow, grouping, tableOptions } = params;\n    const order = (_b = (_a = tableOptions.state) === null || _a === void 0 ? void 0 : _a.columnOrder) !== null && _b !== void 0 ? _b : columnOrder;\n    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>[\n            makeRowPinColumn,\n            makeRowDragColumn,\n            makeRowActionsColumn,\n            makeRowExpandColumn,\n            makeRowSelectColumn,\n            makeRowNumbersColumn,\n            makeSpacerColumn\n        ].map((makeCol)=>makeCol(params, order)).filter(Boolean), [\n        columnOrder,\n        creatingRow,\n        grouping,\n        tableOptions.displayColumnDefOptions,\n        tableOptions.editDisplayMode,\n        tableOptions.enableColumnDragging,\n        tableOptions.enableColumnFilterModes,\n        tableOptions.enableColumnOrdering,\n        tableOptions.enableEditing,\n        tableOptions.enableExpandAll,\n        tableOptions.enableExpanding,\n        tableOptions.enableGrouping,\n        tableOptions.enableRowActions,\n        tableOptions.enableRowDragging,\n        tableOptions.enableRowNumbers,\n        tableOptions.enableRowOrdering,\n        tableOptions.enableRowSelection,\n        tableOptions.enableSelectAll,\n        tableOptions.localization,\n        tableOptions.positionActionsColumn,\n        tableOptions.renderDetailPanel,\n        tableOptions.renderRowActionMenuItems,\n        tableOptions.renderRowActions,\n        (_c = tableOptions.state) === null || _c === void 0 ? void 0 : _c.columnOrder,\n        (_d = tableOptions.state) === null || _d === void 0 ? void 0 : _d.grouping\n    ]);\n};\nfunction defaultDisplayColumnProps({ defaultDisplayColumn, displayColumnDefOptions, localization }, id, header, size = 60) {\n    return Object.assign(Object.assign(Object.assign(Object.assign({}, defaultDisplayColumn), {\n        header: header ? localization[header] : \"\",\n        size\n    }), displayColumnDefOptions === null || displayColumnDefOptions === void 0 ? void 0 : displayColumnDefOptions[id]), {\n        id\n    });\n}\nfunction makeRowPinColumn({ tableOptions }, order) {\n    const id = \"mrt-row-pin\";\n    if (order.includes(id)) {\n        return Object.assign({\n            Cell: ({ row, table })=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MRT_TableBodyRowPinButton, {\n                    row: row,\n                    table: table\n                })\n        }, defaultDisplayColumnProps(tableOptions, id, \"pin\"));\n    }\n    return null;\n}\nfunction makeRowDragColumn({ tableOptions }, order) {\n    const id = \"mrt-row-drag\";\n    if (order.includes(id)) {\n        return Object.assign({\n            Cell: ({ row, rowRef, table })=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MRT_TableBodyRowGrabHandle, {\n                    row: row,\n                    rowRef: rowRef,\n                    table: table\n                })\n        }, defaultDisplayColumnProps(tableOptions, id, \"move\"));\n    }\n    return null;\n}\nfunction makeRowActionsColumn({ creatingRow, tableOptions }, order) {\n    const id = \"mrt-row-actions\";\n    if (order.includes(id) || creatingRow && tableOptions.createDisplayMode === \"row\") {\n        return Object.assign({\n            Cell: ({ cell, row, table })=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MRT_ToggleRowActionMenuButton, {\n                    cell: cell,\n                    row: row,\n                    table: table\n                })\n        }, defaultDisplayColumnProps(tableOptions, id, \"actions\"));\n    }\n    return null;\n}\nfunction makeRowExpandColumn({ grouping, tableOptions }, order) {\n    var _a, _b;\n    const id = \"mrt-row-expand\";\n    if (order.includes(id) && showExpandColumn(tableOptions, (_b = (_a = tableOptions.state) === null || _a === void 0 ? void 0 : _a.grouping) !== null && _b !== void 0 ? _b : grouping)) {\n        return Object.assign({\n            Cell: ({ row, table })=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MRT_ExpandButton, {\n                    row: row,\n                    table: table\n                }),\n            Header: tableOptions.enableExpandAll ? ({ table })=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MRT_ExpandAllButton, {\n                    table: table\n                }) : undefined\n        }, defaultDisplayColumnProps(tableOptions, id, \"expand\"));\n    }\n    return null;\n}\nfunction makeRowSelectColumn({ tableOptions }, order) {\n    const id = \"mrt-row-select\";\n    if (order.includes(id)) {\n        return Object.assign({\n            Cell: ({ row, table })=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MRT_SelectCheckbox, {\n                    row: row,\n                    table: table\n                }),\n            Header: tableOptions.enableSelectAll && tableOptions.enableMultiRowSelection ? ({ table })=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MRT_SelectCheckbox, {\n                    selectAll: true,\n                    table: table\n                }) : undefined\n        }, defaultDisplayColumnProps(tableOptions, id, \"select\"));\n    }\n    return null;\n}\nfunction makeRowNumbersColumn({ tableOptions }, order) {\n    const id = \"mrt-row-numbers\";\n    if (order.includes(id) || tableOptions.enableRowNumbers) return Object.assign({\n        Cell: ({ row })=>row.index + 1,\n        Header: ()=>tableOptions.localization.rowNumber\n    }, defaultDisplayColumnProps(tableOptions, id, \"rowNumbers\"));\n    return null;\n}\nconst blankColProps = {\n    children: null,\n    sx: {\n        flex: \"1 0 auto\",\n        minWidth: 0,\n        p: 0,\n        width: 0\n    }\n};\nfunction makeSpacerColumn({ tableOptions }, order) {\n    const id = \"mrt-row-spacer\";\n    if (order.includes(id)) {\n        return Object.assign(Object.assign({}, defaultDisplayColumnProps(tableOptions, id, undefined, 0)), {\n            muiTableBodyCellProps: blankColProps,\n            muiTableFooterCellProps: blankColProps,\n            muiTableHeadCellProps: blankColProps\n        });\n    }\n    return null;\n}\nconst useMRT_Effects = (table)=>{\n    const { getIsSomeRowsPinned, getState, options: { enablePagination, enableRowPinning, rowCount } } = table;\n    const { density, globalFilter, isFullScreen, isLoading, pagination, showSkeletons, sorting } = getState();\n    const rerender = (0,react__WEBPACK_IMPORTED_MODULE_1__.useReducer)(()=>({}), {})[1];\n    const isMounted = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n    const initialBodyHeight = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)();\n    const previousTop = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)();\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (false) {}\n    }, []);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (isMounted && \"undefined\" !== \"undefined\") {}\n        isMounted.current = true;\n    }, [\n        isFullScreen\n    ]);\n    //if page index is out of bounds, set it to the last page\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!enablePagination || isLoading || showSkeletons) return;\n        const { pageIndex, pageSize } = pagination;\n        const totalRowCount = rowCount !== null && rowCount !== void 0 ? rowCount : table.getPrePaginationRowModel().rows.length;\n        const firstVisibleRowIndex = pageIndex * pageSize;\n        if (firstVisibleRowIndex > totalRowCount) {\n            table.setPageIndex(Math.floor(totalRowCount / pageSize));\n        }\n    }, [\n        rowCount,\n        table.getPrePaginationRowModel().rows.length\n    ]);\n    //turn off sort when global filter is looking for ranked results\n    const appliedSort = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(sorting);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (sorting.length) {\n            appliedSort.current = sorting;\n        }\n    }, [\n        sorting\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!getCanRankRows(table)) return;\n        if (globalFilter) {\n            table.setSorting([]);\n        } else {\n            table.setSorting(()=>appliedSort.current || []);\n        }\n    }, [\n        globalFilter\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (enableRowPinning && getIsSomeRowsPinned()) {\n            setTimeout(()=>{\n                rerender();\n            }, 150);\n        }\n    }, [\n        density\n    ]);\n};\nconst useMRT_TableInstance = (tableOptions)=>{\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10;\n    const bottomToolbarRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const editInputRefs = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)({});\n    const filterInputRefs = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)({});\n    const searchInputRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const tableContainerRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const tableHeadCellRefs = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)({});\n    const tablePaperRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const topToolbarRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const tableHeadRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const tableFooterRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const initialState = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        var _a, _b, _c;\n        const initState = (_a = tableOptions.initialState) !== null && _a !== void 0 ? _a : {};\n        initState.columnOrder = (_b = initState.columnOrder) !== null && _b !== void 0 ? _b : getDefaultColumnOrderIds(tableOptions);\n        initState.globalFilterFn = (_c = tableOptions.globalFilterFn) !== null && _c !== void 0 ? _c : \"fuzzy\";\n        return initState;\n    }, []);\n    const [creatingRow, _setCreatingRow] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)((_a = initialState.creatingRow) !== null && _a !== void 0 ? _a : null);\n    const [columnFilterFns, setColumnFilterFns] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(()=>Object.assign({}, ...getAllLeafColumnDefs(tableOptions.columns).map((col)=>{\n            var _a, _b, _c, _d;\n            return {\n                [getColumnId(col)]: col.filterFn instanceof Function ? (_a = col.filterFn.name) !== null && _a !== void 0 ? _a : \"custom\" : (_d = (_b = col.filterFn) !== null && _b !== void 0 ? _b : (_c = initialState === null || initialState === void 0 ? void 0 : initialState.columnFilterFns) === null || _c === void 0 ? void 0 : _c[getColumnId(col)]) !== null && _d !== void 0 ? _d : getDefaultColumnFilterFn(col)\n            };\n        })));\n    const [columnOrder, setColumnOrder] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)((_b = initialState.columnOrder) !== null && _b !== void 0 ? _b : []);\n    const [density, setDensity] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)((_c = initialState === null || initialState === void 0 ? void 0 : initialState.density) !== null && _c !== void 0 ? _c : \"comfortable\");\n    const [draggingColumn, setDraggingColumn] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)((_d = initialState.draggingColumn) !== null && _d !== void 0 ? _d : null);\n    const [draggingRow, setDraggingRow] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)((_e = initialState.draggingRow) !== null && _e !== void 0 ? _e : null);\n    const [editingCell, setEditingCell] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)((_f = initialState.editingCell) !== null && _f !== void 0 ? _f : null);\n    const [editingRow, setEditingRow] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)((_g = initialState.editingRow) !== null && _g !== void 0 ? _g : null);\n    const [globalFilterFn, setGlobalFilterFn] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)((_h = initialState.globalFilterFn) !== null && _h !== void 0 ? _h : \"fuzzy\");\n    const [grouping, setGrouping] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)((_j = initialState.grouping) !== null && _j !== void 0 ? _j : []);\n    const [hoveredColumn, setHoveredColumn] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)((_k = initialState.hoveredColumn) !== null && _k !== void 0 ? _k : null);\n    const [hoveredRow, setHoveredRow] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)((_l = initialState.hoveredRow) !== null && _l !== void 0 ? _l : null);\n    const [isFullScreen, setIsFullScreen] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)((_m = initialState === null || initialState === void 0 ? void 0 : initialState.isFullScreen) !== null && _m !== void 0 ? _m : false);\n    const [showAlertBanner, setShowAlertBanner] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)((_p = (_o = tableOptions.initialState) === null || _o === void 0 ? void 0 : _o.showAlertBanner) !== null && _p !== void 0 ? _p : false);\n    const [showColumnFilters, setShowColumnFilters] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)((_q = initialState === null || initialState === void 0 ? void 0 : initialState.showColumnFilters) !== null && _q !== void 0 ? _q : false);\n    const [showGlobalFilter, setShowGlobalFilter] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)((_r = initialState === null || initialState === void 0 ? void 0 : initialState.showGlobalFilter) !== null && _r !== void 0 ? _r : false);\n    const [showToolbarDropZone, setShowToolbarDropZone] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)((_s = initialState === null || initialState === void 0 ? void 0 : initialState.showToolbarDropZone) !== null && _s !== void 0 ? _s : false);\n    const displayColumns = useMRT_DisplayColumns({\n        columnOrder,\n        creatingRow,\n        grouping,\n        tableOptions\n    });\n    const columnDefs = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        var _a, _b, _c;\n        return prepareColumns({\n            aggregationFns: tableOptions.aggregationFns,\n            columnDefs: [\n                ...displayColumns,\n                ...tableOptions.columns\n            ],\n            columnFilterFns: (_b = (_a = tableOptions.state) === null || _a === void 0 ? void 0 : _a.columnFilterFns) !== null && _b !== void 0 ? _b : columnFilterFns,\n            defaultDisplayColumn: (_c = tableOptions.defaultDisplayColumn) !== null && _c !== void 0 ? _c : {},\n            filterFns: tableOptions.filterFns,\n            sortingFns: tableOptions.sortingFns\n        });\n    }, [\n        columnFilterFns,\n        displayColumns,\n        tableOptions.columns,\n        (_t = tableOptions.state) === null || _t === void 0 ? void 0 : _t.columnFilterFns\n    ]);\n    const data = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        var _a, _b, _c, _d, _e;\n        return (((_a = tableOptions.state) === null || _a === void 0 ? void 0 : _a.isLoading) || ((_b = tableOptions.state) === null || _b === void 0 ? void 0 : _b.showSkeletons)) && !tableOptions.data.length ? [\n            ...Array(((_d = (_c = tableOptions.state) === null || _c === void 0 ? void 0 : _c.pagination) === null || _d === void 0 ? void 0 : _d.pageSize) || ((_e = initialState === null || initialState === void 0 ? void 0 : initialState.pagination) === null || _e === void 0 ? void 0 : _e.pageSize) || 10).fill(null)\n        ].map(()=>Object.assign({}, ...getAllLeafColumnDefs(tableOptions.columns).map((col)=>({\n                    [getColumnId(col)]: null\n                })))) : tableOptions.data;\n    }, [\n        tableOptions.data,\n        (_u = tableOptions.state) === null || _u === void 0 ? void 0 : _u.isLoading,\n        (_v = tableOptions.state) === null || _v === void 0 ? void 0 : _v.showSkeletons\n    ]);\n    //@ts-ignore\n    const table = (0,_tanstack_react_table__WEBPACK_IMPORTED_MODULE_3__.useReactTable)(Object.assign(Object.assign({\n        getCoreRowModel: (0,_tanstack_react_table__WEBPACK_IMPORTED_MODULE_4__.getCoreRowModel)(),\n        getExpandedRowModel: tableOptions.enableExpanding || tableOptions.enableGrouping ? (0,_tanstack_react_table__WEBPACK_IMPORTED_MODULE_4__.getExpandedRowModel)() : undefined,\n        getFacetedMinMaxValues: tableOptions.enableFacetedValues ? (0,_tanstack_react_table__WEBPACK_IMPORTED_MODULE_4__.getFacetedMinMaxValues)() : undefined,\n        getFacetedRowModel: tableOptions.enableFacetedValues ? (0,_tanstack_react_table__WEBPACK_IMPORTED_MODULE_4__.getFacetedRowModel)() : undefined,\n        getFacetedUniqueValues: tableOptions.enableFacetedValues ? (0,_tanstack_react_table__WEBPACK_IMPORTED_MODULE_4__.getFacetedUniqueValues)() : undefined,\n        getFilteredRowModel: tableOptions.enableColumnFilters || tableOptions.enableGlobalFilter || tableOptions.enableFilters ? (0,_tanstack_react_table__WEBPACK_IMPORTED_MODULE_4__.getFilteredRowModel)() : undefined,\n        getGroupedRowModel: tableOptions.enableGrouping ? (0,_tanstack_react_table__WEBPACK_IMPORTED_MODULE_4__.getGroupedRowModel)() : undefined,\n        getPaginationRowModel: tableOptions.enablePagination ? (0,_tanstack_react_table__WEBPACK_IMPORTED_MODULE_4__.getPaginationRowModel)() : undefined,\n        getSortedRowModel: tableOptions.enableSorting ? (0,_tanstack_react_table__WEBPACK_IMPORTED_MODULE_4__.getSortedRowModel)() : undefined,\n        getSubRows: (row)=>row === null || row === void 0 ? void 0 : row.subRows,\n        onColumnOrderChange: setColumnOrder,\n        onGroupingChange: setGrouping\n    }, tableOptions), {\n        //@ts-ignore\n        columns: columnDefs,\n        data,\n        globalFilterFn: (_w = tableOptions.filterFns) === null || _w === void 0 ? void 0 : _w[globalFilterFn !== null && globalFilterFn !== void 0 ? globalFilterFn : \"fuzzy\"],\n        initialState,\n        state: Object.assign({\n            columnFilterFns,\n            columnOrder,\n            creatingRow,\n            density,\n            draggingColumn,\n            draggingRow,\n            editingCell,\n            editingRow,\n            globalFilterFn,\n            grouping,\n            hoveredColumn,\n            hoveredRow,\n            isFullScreen,\n            showAlertBanner,\n            showColumnFilters,\n            showGlobalFilter,\n            showToolbarDropZone\n        }, tableOptions.state)\n    }));\n    // @ts-ignore\n    table.refs = {\n        // @ts-ignore\n        bottomToolbarRef,\n        editInputRefs,\n        filterInputRefs,\n        // @ts-ignore\n        searchInputRef,\n        // @ts-ignore\n        tableContainerRef,\n        // @ts-ignore\n        tableFooterRef,\n        tableHeadCellRefs,\n        // @ts-ignore\n        tableHeadRef,\n        // @ts-ignore\n        tablePaperRef,\n        // @ts-ignore\n        topToolbarRef\n    };\n    const setCreatingRow = (row)=>{\n        var _a, _b;\n        let _row = row;\n        if (row === true) {\n            _row = createRow(table);\n        }\n        (_b = (_a = tableOptions === null || tableOptions === void 0 ? void 0 : tableOptions.onCreatingRowChange) === null || _a === void 0 ? void 0 : _a.call(tableOptions, _row)) !== null && _b !== void 0 ? _b : _setCreatingRow(_row);\n    };\n    table.setCreatingRow = setCreatingRow;\n    table.setColumnFilterFns = (_x = tableOptions.onColumnFilterFnsChange) !== null && _x !== void 0 ? _x : setColumnFilterFns;\n    table.setDensity = (_y = tableOptions.onDensityChange) !== null && _y !== void 0 ? _y : setDensity;\n    table.setDraggingColumn = (_z = tableOptions.onDraggingColumnChange) !== null && _z !== void 0 ? _z : setDraggingColumn;\n    table.setDraggingRow = (_0 = tableOptions.onDraggingRowChange) !== null && _0 !== void 0 ? _0 : setDraggingRow;\n    table.setEditingCell = (_1 = tableOptions.onEditingCellChange) !== null && _1 !== void 0 ? _1 : setEditingCell;\n    table.setEditingRow = (_2 = tableOptions.onEditingRowChange) !== null && _2 !== void 0 ? _2 : setEditingRow;\n    table.setGlobalFilterFn = (_3 = tableOptions.onGlobalFilterFnChange) !== null && _3 !== void 0 ? _3 : setGlobalFilterFn;\n    table.setHoveredColumn = (_4 = tableOptions.onHoveredColumnChange) !== null && _4 !== void 0 ? _4 : setHoveredColumn;\n    table.setHoveredRow = (_5 = tableOptions.onHoveredRowChange) !== null && _5 !== void 0 ? _5 : setHoveredRow;\n    table.setIsFullScreen = (_6 = tableOptions.onIsFullScreenChange) !== null && _6 !== void 0 ? _6 : setIsFullScreen;\n    table.setShowAlertBanner = (_7 = tableOptions.onShowAlertBannerChange) !== null && _7 !== void 0 ? _7 : setShowAlertBanner;\n    table.setShowColumnFilters = (_8 = tableOptions.onShowColumnFiltersChange) !== null && _8 !== void 0 ? _8 : setShowColumnFilters;\n    table.setShowGlobalFilter = (_9 = tableOptions.onShowGlobalFilterChange) !== null && _9 !== void 0 ? _9 : setShowGlobalFilter;\n    table.setShowToolbarDropZone = (_10 = tableOptions.onShowToolbarDropZoneChange) !== null && _10 !== void 0 ? _10 : setShowToolbarDropZone;\n    useMRT_Effects(table);\n    return table;\n};\nconst MRT_AggregationFns = Object.assign({}, _tanstack_react_table__WEBPACK_IMPORTED_MODULE_4__.aggregationFns);\nconst fuzzy = (row, columnId, filterValue, addMeta)=>{\n    const itemRank = (0,_tanstack_match_sorter_utils__WEBPACK_IMPORTED_MODULE_18__.rankItem)(row.getValue(columnId), filterValue, {\n        threshold: _tanstack_match_sorter_utils__WEBPACK_IMPORTED_MODULE_18__.rankings.MATCHES\n    });\n    addMeta(itemRank);\n    return itemRank.passed;\n};\nfuzzy.autoRemove = (val)=>!val;\nconst contains = (row, id, filterValue)=>row.getValue(id).toString().toLowerCase().trim().includes(filterValue.toString().toLowerCase().trim());\ncontains.autoRemove = (val)=>!val;\nconst startsWith = (row, id, filterValue)=>row.getValue(id).toString().toLowerCase().trim().startsWith(filterValue.toString().toLowerCase().trim());\nstartsWith.autoRemove = (val)=>!val;\nconst endsWith = (row, id, filterValue)=>row.getValue(id).toString().toLowerCase().trim().endsWith(filterValue.toString().toLowerCase().trim());\nendsWith.autoRemove = (val)=>!val;\nconst equals = (row, id, filterValue)=>row.getValue(id).toString().toLowerCase().trim() === (filterValue === null || filterValue === void 0 ? void 0 : filterValue.toString().toLowerCase().trim());\nequals.autoRemove = (val)=>!val;\nconst notEquals = (row, id, filterValue)=>row.getValue(id).toString().toLowerCase().trim() !== filterValue.toString().toLowerCase().trim();\nnotEquals.autoRemove = (val)=>!val;\nconst greaterThan = (row, id, filterValue)=>!isNaN(+filterValue) && !isNaN(+row.getValue(id)) ? +row.getValue(id) > +filterValue : row.getValue(id).toString().toLowerCase().trim() > (filterValue === null || filterValue === void 0 ? void 0 : filterValue.toString().toLowerCase().trim());\ngreaterThan.autoRemove = (val)=>!val;\nconst greaterThanOrEqualTo = (row, id, filterValue)=>equals(row, id, filterValue) || greaterThan(row, id, filterValue);\ngreaterThanOrEqualTo.autoRemove = (val)=>!val;\nconst lessThan = (row, id, filterValue)=>!isNaN(+filterValue) && !isNaN(+row.getValue(id)) ? +row.getValue(id) < +filterValue : row.getValue(id).toString().toLowerCase().trim() < (filterValue === null || filterValue === void 0 ? void 0 : filterValue.toString().toLowerCase().trim());\nlessThan.autoRemove = (val)=>!val;\nconst lessThanOrEqualTo = (row, id, filterValue)=>equals(row, id, filterValue) || lessThan(row, id, filterValue);\nlessThanOrEqualTo.autoRemove = (val)=>!val;\nconst between = (row, id, filterValues)=>([\n        \"\",\n        undefined\n    ].includes(filterValues[0]) || greaterThan(row, id, filterValues[0])) && (!isNaN(+filterValues[0]) && !isNaN(+filterValues[1]) && +filterValues[0] > +filterValues[1] || [\n        \"\",\n        undefined\n    ].includes(filterValues[1]) || lessThan(row, id, filterValues[1]));\nbetween.autoRemove = (val)=>!val;\nconst betweenInclusive = (row, id, filterValues)=>([\n        \"\",\n        undefined\n    ].includes(filterValues[0]) || greaterThanOrEqualTo(row, id, filterValues[0])) && (!isNaN(+filterValues[0]) && !isNaN(+filterValues[1]) && +filterValues[0] > +filterValues[1] || [\n        \"\",\n        undefined\n    ].includes(filterValues[1]) || lessThanOrEqualTo(row, id, filterValues[1]));\nbetweenInclusive.autoRemove = (val)=>!val;\nconst empty = (row, id, _filterValue)=>!row.getValue(id).toString().trim();\nempty.autoRemove = (val)=>!val;\nconst notEmpty = (row, id, _filterValue)=>!!row.getValue(id).toString().trim();\nnotEmpty.autoRemove = (val)=>!val;\nconst MRT_FilterFns = Object.assign(Object.assign({}, _tanstack_react_table__WEBPACK_IMPORTED_MODULE_4__.filterFns), {\n    between,\n    betweenInclusive,\n    contains,\n    empty,\n    endsWith,\n    equals,\n    fuzzy,\n    greaterThan,\n    greaterThanOrEqualTo,\n    lessThan,\n    lessThanOrEqualTo,\n    notEmpty,\n    notEquals,\n    startsWith\n});\nconst MRT_Default_Icons = {\n    ArrowDownwardIcon: _mui_icons_material_ArrowDownward__WEBPACK_IMPORTED_MODULE_60__[\"default\"],\n    ArrowRightIcon: _mui_icons_material_ArrowRight__WEBPACK_IMPORTED_MODULE_61__[\"default\"],\n    CancelIcon: _mui_icons_material_Cancel__WEBPACK_IMPORTED_MODULE_62__[\"default\"],\n    ChevronLeftIcon: _mui_icons_material_ChevronLeft__WEBPACK_IMPORTED_MODULE_63__[\"default\"],\n    ChevronRightIcon: _mui_icons_material_ChevronRight__WEBPACK_IMPORTED_MODULE_64__[\"default\"],\n    ClearAllIcon: _mui_icons_material_ClearAll__WEBPACK_IMPORTED_MODULE_65__[\"default\"],\n    CloseIcon: _mui_icons_material_Close__WEBPACK_IMPORTED_MODULE_66__[\"default\"],\n    DensityLargeIcon: _mui_icons_material_DensityLarge__WEBPACK_IMPORTED_MODULE_67__[\"default\"],\n    DensityMediumIcon: _mui_icons_material_DensityMedium__WEBPACK_IMPORTED_MODULE_68__[\"default\"],\n    DensitySmallIcon: _mui_icons_material_DensitySmall__WEBPACK_IMPORTED_MODULE_69__[\"default\"],\n    DragHandleIcon: _mui_icons_material_DragHandle__WEBPACK_IMPORTED_MODULE_70__[\"default\"],\n    DynamicFeedIcon: _mui_icons_material_DynamicFeed__WEBPACK_IMPORTED_MODULE_71__[\"default\"],\n    EditIcon: _mui_icons_material_Edit__WEBPACK_IMPORTED_MODULE_72__[\"default\"],\n    ExpandMoreIcon: _mui_icons_material_ExpandMore__WEBPACK_IMPORTED_MODULE_73__[\"default\"],\n    FilterAltIcon: _mui_icons_material_FilterAlt__WEBPACK_IMPORTED_MODULE_74__[\"default\"],\n    FilterListIcon: _mui_icons_material_FilterList__WEBPACK_IMPORTED_MODULE_75__[\"default\"],\n    FilterListOffIcon: _mui_icons_material_FilterListOff__WEBPACK_IMPORTED_MODULE_76__[\"default\"],\n    FirstPageIcon: _mui_icons_material_FirstPage__WEBPACK_IMPORTED_MODULE_77__[\"default\"],\n    FullscreenExitIcon: _mui_icons_material_FullscreenExit__WEBPACK_IMPORTED_MODULE_78__[\"default\"],\n    FullscreenIcon: _mui_icons_material_Fullscreen__WEBPACK_IMPORTED_MODULE_79__[\"default\"],\n    KeyboardDoubleArrowDownIcon: _mui_icons_material_KeyboardDoubleArrowDown__WEBPACK_IMPORTED_MODULE_80__[\"default\"],\n    LastPageIcon: _mui_icons_material_LastPage__WEBPACK_IMPORTED_MODULE_81__[\"default\"],\n    MoreHorizIcon: _mui_icons_material_MoreHoriz__WEBPACK_IMPORTED_MODULE_82__[\"default\"],\n    MoreVertIcon: _mui_icons_material_MoreVert__WEBPACK_IMPORTED_MODULE_83__[\"default\"],\n    PushPinIcon: _mui_icons_material_PushPin__WEBPACK_IMPORTED_MODULE_84__[\"default\"],\n    RestartAltIcon: _mui_icons_material_RestartAlt__WEBPACK_IMPORTED_MODULE_85__[\"default\"],\n    SaveIcon: _mui_icons_material_Save__WEBPACK_IMPORTED_MODULE_86__[\"default\"],\n    SearchIcon: _mui_icons_material_Search__WEBPACK_IMPORTED_MODULE_87__[\"default\"],\n    SearchOffIcon: _mui_icons_material_SearchOff__WEBPACK_IMPORTED_MODULE_88__[\"default\"],\n    SortIcon: _mui_icons_material_Sort__WEBPACK_IMPORTED_MODULE_89__[\"default\"],\n    SyncAltIcon: _mui_icons_material_SyncAlt__WEBPACK_IMPORTED_MODULE_90__[\"default\"],\n    ViewColumnIcon: _mui_icons_material_ViewColumn__WEBPACK_IMPORTED_MODULE_91__[\"default\"],\n    VisibilityOffIcon: _mui_icons_material_VisibilityOff__WEBPACK_IMPORTED_MODULE_92__[\"default\"]\n};\nconst MRT_Localization_EN = {\n    actions: \"Actions\",\n    and: \"and\",\n    cancel: \"Cancel\",\n    changeFilterMode: \"Change filter mode\",\n    changeSearchMode: \"Change search mode\",\n    clearFilter: \"Clear filter\",\n    clearSearch: \"Clear search\",\n    clearSort: \"Clear sort\",\n    clickToCopy: \"Click to copy\",\n    collapse: \"Collapse\",\n    collapseAll: \"Collapse all\",\n    columnActions: \"Column Actions\",\n    copiedToClipboard: \"Copied to clipboard\",\n    dropToGroupBy: \"Drop to group by {column}\",\n    edit: \"Edit\",\n    expand: \"Expand\",\n    expandAll: \"Expand all\",\n    filterArrIncludes: \"Includes\",\n    filterArrIncludesAll: \"Includes all\",\n    filterArrIncludesSome: \"Includes\",\n    filterBetween: \"Between\",\n    filterBetweenInclusive: \"Between Inclusive\",\n    filterByColumn: \"Filter by {column}\",\n    filterContains: \"Contains\",\n    filterEmpty: \"Empty\",\n    filterEndsWith: \"Ends With\",\n    filterEquals: \"Equals\",\n    filterEqualsString: \"Equals\",\n    filterFuzzy: \"Fuzzy\",\n    filterGreaterThan: \"Greater Than\",\n    filterGreaterThanOrEqualTo: \"Greater Than Or Equal To\",\n    filterInNumberRange: \"Between\",\n    filterIncludesString: \"Contains\",\n    filterIncludesStringSensitive: \"Contains\",\n    filterLessThan: \"Less Than\",\n    filterLessThanOrEqualTo: \"Less Than Or Equal To\",\n    filterMode: \"Filter Mode: {filterType}\",\n    filterNotEmpty: \"Not Empty\",\n    filterNotEquals: \"Not Equals\",\n    filterStartsWith: \"Starts With\",\n    filterWeakEquals: \"Equals\",\n    filteringByColumn: \"Filtering by {column} - {filterType} {filterValue}\",\n    goToFirstPage: \"Go to first page\",\n    goToLastPage: \"Go to last page\",\n    goToNextPage: \"Go to next page\",\n    goToPreviousPage: \"Go to previous page\",\n    grab: \"Grab\",\n    groupByColumn: \"Group by {column}\",\n    groupedBy: \"Grouped by \",\n    hideAll: \"Hide all\",\n    hideColumn: \"Hide {column} column\",\n    max: \"Max\",\n    min: \"Min\",\n    move: \"Move\",\n    noRecordsToDisplay: \"No records to display\",\n    noResultsFound: \"No results found\",\n    of: \"of\",\n    or: \"or\",\n    pin: \"Pin\",\n    pinToLeft: \"Pin to left\",\n    pinToRight: \"Pin to right\",\n    resetColumnSize: \"Reset column size\",\n    resetOrder: \"Reset order\",\n    rowActions: \"Row Actions\",\n    rowNumber: \"#\",\n    rowNumbers: \"Row Numbers\",\n    rowsPerPage: \"Rows per page\",\n    save: \"Save\",\n    search: \"Search\",\n    selectedCountOfRowCountRowsSelected: \"{selectedCount} of {rowCount} row(s) selected\",\n    select: \"Select\",\n    showAll: \"Show all\",\n    showAllColumns: \"Show all columns\",\n    showHideColumns: \"Show/Hide columns\",\n    showHideFilters: \"Show/Hide filters\",\n    showHideSearch: \"Show/Hide search\",\n    sortByColumnAsc: \"Sort by {column} ascending\",\n    sortByColumnDesc: \"Sort by {column} descending\",\n    sortedByColumnAsc: \"Sorted by {column} ascending\",\n    sortedByColumnDesc: \"Sorted by {column} descending\",\n    thenBy: \", then by \",\n    toggleDensity: \"Toggle density\",\n    toggleFullScreen: \"Toggle full screen\",\n    toggleSelectAll: \"Toggle select all\",\n    toggleSelectRow: \"Toggle select row\",\n    toggleVisibility: \"Toggle visibility\",\n    ungroupByColumn: \"Ungroup by {column}\",\n    unpin: \"Unpin\",\n    unpinAll: \"Unpin all\"\n};\nconst MRT_DefaultColumn = {\n    filterVariant: \"text\",\n    maxSize: 1000,\n    minSize: 40,\n    size: 180\n};\nconst MRT_DefaultDisplayColumn = {\n    columnDefType: \"display\",\n    enableClickToCopy: false,\n    enableColumnActions: false,\n    enableColumnDragging: false,\n    enableColumnFilter: false,\n    enableColumnOrdering: false,\n    enableEditing: false,\n    enableGlobalFilter: false,\n    enableGrouping: false,\n    enableHiding: false,\n    enableResizing: false,\n    enableSorting: false\n};\nconst useMRT_TableOptions = (_a)=>{\n    var _b;\n    var { aggregationFns, autoResetExpanded = false, columnFilterDisplayMode = \"subheader\", columnResizeDirection, columnResizeMode = \"onChange\", createDisplayMode = \"modal\", defaultColumn, defaultDisplayColumn, editDisplayMode = \"modal\", enableBottomToolbar = true, enableColumnActions = true, enableColumnFilters = true, enableColumnOrdering = false, enableColumnPinning = false, enableColumnResizing = false, enableDensityToggle = true, enableExpandAll = true, enableExpanding, enableFilterMatchHighlighting = true, enableFilters = true, enableFullScreenToggle = true, enableGlobalFilter = true, enableGlobalFilterRankedResults = true, enableGrouping = false, enableHiding = true, enableMultiRowSelection = true, enableMultiSort = true, enablePagination = true, enableRowPinning = false, enableRowSelection = false, enableSelectAll = true, enableSorting = true, enableStickyHeader = false, enableTableFooter = true, enableTableHead = true, enableToolbarInternalActions = true, enableTopToolbar = true, filterFns, icons, layoutMode, localization, manualFiltering, manualGrouping, manualPagination, manualSorting, paginationDisplayMode = \"default\", positionActionsColumn = \"first\", positionExpandColumn = \"first\", positionGlobalFilter = \"right\", positionPagination = \"bottom\", positionToolbarAlertBanner = \"top\", positionToolbarDropZone = \"top\", rowNumberDisplayMode = \"static\", rowPinningDisplayMode = \"sticky\", selectAllMode = \"page\", sortingFns } = _a, rest = __rest(_a, [\n        \"aggregationFns\",\n        \"autoResetExpanded\",\n        \"columnFilterDisplayMode\",\n        \"columnResizeDirection\",\n        \"columnResizeMode\",\n        \"createDisplayMode\",\n        \"defaultColumn\",\n        \"defaultDisplayColumn\",\n        \"editDisplayMode\",\n        \"enableBottomToolbar\",\n        \"enableColumnActions\",\n        \"enableColumnFilters\",\n        \"enableColumnOrdering\",\n        \"enableColumnPinning\",\n        \"enableColumnResizing\",\n        \"enableDensityToggle\",\n        \"enableExpandAll\",\n        \"enableExpanding\",\n        \"enableFilterMatchHighlighting\",\n        \"enableFilters\",\n        \"enableFullScreenToggle\",\n        \"enableGlobalFilter\",\n        \"enableGlobalFilterRankedResults\",\n        \"enableGrouping\",\n        \"enableHiding\",\n        \"enableMultiRowSelection\",\n        \"enableMultiSort\",\n        \"enablePagination\",\n        \"enableRowPinning\",\n        \"enableRowSelection\",\n        \"enableSelectAll\",\n        \"enableSorting\",\n        \"enableStickyHeader\",\n        \"enableTableFooter\",\n        \"enableTableHead\",\n        \"enableToolbarInternalActions\",\n        \"enableTopToolbar\",\n        \"filterFns\",\n        \"icons\",\n        \"layoutMode\",\n        \"localization\",\n        \"manualFiltering\",\n        \"manualGrouping\",\n        \"manualPagination\",\n        \"manualSorting\",\n        \"paginationDisplayMode\",\n        \"positionActionsColumn\",\n        \"positionExpandColumn\",\n        \"positionGlobalFilter\",\n        \"positionPagination\",\n        \"positionToolbarAlertBanner\",\n        \"positionToolbarDropZone\",\n        \"rowNumberDisplayMode\",\n        \"rowPinningDisplayMode\",\n        \"selectAllMode\",\n        \"sortingFns\"\n    ]);\n    const theme = (0,_mui_material_styles__WEBPACK_IMPORTED_MODULE_13__[\"default\"])();\n    const _icons = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>Object.assign(Object.assign({}, MRT_Default_Icons), icons), [\n        icons\n    ]);\n    const _localization = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>Object.assign(Object.assign({}, MRT_Localization_EN), localization), [\n        localization\n    ]);\n    const _aggregationFns = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>Object.assign(Object.assign({}, MRT_AggregationFns), aggregationFns), []);\n    const _filterFns = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>Object.assign(Object.assign({}, MRT_FilterFns), filterFns), []);\n    const _sortingFns = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>Object.assign(Object.assign({}, MRT_SortingFns), sortingFns), []);\n    const _defaultColumn = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>Object.assign(Object.assign({}, MRT_DefaultColumn), defaultColumn), [\n        defaultColumn\n    ]);\n    const _defaultDisplayColumn = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>Object.assign(Object.assign({}, MRT_DefaultDisplayColumn), defaultDisplayColumn), [\n        defaultDisplayColumn\n    ]);\n    if (!columnResizeDirection) {\n        columnResizeDirection = theme.direction || \"ltr\";\n    }\n    layoutMode = layoutMode || (enableColumnResizing ? \"grid-no-grow\" : \"semantic\");\n    if (layoutMode === \"semantic\" && (rest.enableRowVirtualization || rest.enableColumnVirtualization)) {\n        layoutMode = \"grid\";\n    }\n    if (rest.enableRowVirtualization) {\n        enableStickyHeader = true;\n    }\n    if (enablePagination === false && manualPagination === undefined) {\n        manualPagination = true;\n    }\n    if (!((_b = rest.data) === null || _b === void 0 ? void 0 : _b.length)) {\n        manualFiltering = true;\n        manualGrouping = true;\n        manualPagination = true;\n        manualSorting = true;\n    }\n    return Object.assign({\n        aggregationFns: _aggregationFns,\n        autoResetExpanded,\n        columnFilterDisplayMode,\n        columnResizeDirection,\n        columnResizeMode,\n        createDisplayMode,\n        defaultColumn: _defaultColumn,\n        defaultDisplayColumn: _defaultDisplayColumn,\n        editDisplayMode,\n        enableBottomToolbar,\n        enableColumnActions,\n        enableColumnFilters,\n        enableColumnOrdering,\n        enableColumnPinning,\n        enableColumnResizing,\n        enableDensityToggle,\n        enableExpandAll,\n        enableExpanding,\n        enableFilterMatchHighlighting,\n        enableFilters,\n        enableFullScreenToggle,\n        enableGlobalFilter,\n        enableGlobalFilterRankedResults,\n        enableGrouping,\n        enableHiding,\n        enableMultiRowSelection,\n        enableMultiSort,\n        enablePagination,\n        enableRowPinning,\n        enableRowSelection,\n        enableSelectAll,\n        enableSorting,\n        enableStickyHeader,\n        enableTableFooter,\n        enableTableHead,\n        enableToolbarInternalActions,\n        enableTopToolbar,\n        filterFns: _filterFns,\n        icons: _icons,\n        layoutMode,\n        localization: _localization,\n        manualFiltering,\n        manualGrouping,\n        manualPagination,\n        manualSorting,\n        paginationDisplayMode,\n        positionActionsColumn,\n        positionExpandColumn,\n        positionGlobalFilter,\n        positionPagination,\n        positionToolbarAlertBanner,\n        positionToolbarDropZone,\n        rowNumberDisplayMode,\n        rowPinningDisplayMode,\n        selectAllMode,\n        sortingFns: _sortingFns\n    }, rest);\n};\nconst useMaterialReactTable = (tableOptions)=>useMRT_TableInstance(useMRT_TableOptions(tableOptions));\nconst isTableInstanceProp = (props)=>props.table !== undefined;\nconst MaterialReactTable = (props)=>{\n    let table;\n    if (isTableInstanceProp(props)) {\n        table = props.table;\n    } else {\n        table = useMaterialReactTable(props);\n    }\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MRT_TablePaper, {\n        table: table\n    });\n};\n //# sourceMappingURL=index.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/material-react-table/dist/index.esm.js\n");

/***/ })

};
;